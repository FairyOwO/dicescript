package dicescript

// Code generated by peg -switch -inline roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint16

const (
	ruleUnknown pegRule = iota
	ruledicescript
	rulestmtUnderground
	rulestmtRoot
	rulestmtLines
	rulenextLine
	rule_switchEnablePrefix
	rule_switchTrue
	rule_switchFalse
	ruleflagsSwitch
	rulestmtWithSemicolon
	rulestmtWithBlock
	rulestmtBreak
	rulestmtContinue
	rulestmtReturn
	rulestmtWhile
	ruleblock
	rulestmtElse
	rulestmtIf
	rulefunc_def_params
	rulestmtFunc
	rulestmtAssign
	ruleexprRoot
	rule_step
	rule_sliceSuffix
	ruleexprSlice
	ruleexprValueIfExists
	ruleexprTernary
	ruleexprLogicOr
	ruleexprLogicAnd
	ruleexprBitwiseOr
	ruleexprBitwiseAnd
	ruleexprCompare
	ruleexprAdditive
	ruleexprMultiplicative
	ruleexprNullCoalescing
	ruleexprExp
	ruleexprUnaryNeg
	ruleexprUnaryPos
	rulenos
	rule_diceMod
	rule_diceMod2
	rule_dicePearMod
	ruledetailStart
	ruledetailEnd
	rule_diceType1
	rule_diceType2
	rule_diceType3
	rule_diceType4
	rule_diceExpr1
	rule_diceExpr2
	rule_diceExpr3
	rule_diceExprX
	rule_wodTypeMain
	rule_wodDiceType
	rule_wodMain
	rule_cocDiceType
	rule_diceCocBonus
	rule_diceCocPenalty
	rule_dcDiceType
	rule_fateDiceType
	ruleexprDice
	ruleitem_get
	rulearray_call
	ruleattr_get
	rulefunc_invoke
	ruledict_item
	rulevalue_id_without_colon
	rulevalue
	rulenumber
	rulefloat
	rulestrPart
	rulestrPart1
	rulestrPart2
	rulestrPart3
	rulefstring
	rulekeywords
	ruleidentifier_ch0
	ruleidentifier_ch
	ruleno_keywords
	ruleidentifier
	ruleidentifierWithoutColon
	rulesub
	ruleparenOpen
	ruleparenClose
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	rulenullCoalescing
	rulebitwiseOr
	rulebitwiseAnd
	rulelogicOr
	rulelogicAnd
	rulelt
	rulegt
	rulele
	rulege
	ruleeq
	rulene
	rulesp
	rulespNoCR
	rulesp1
	ruleescape
	rulecomment
	rulest_expr
	rulee0
	ruleest
	rulest_assign_multi
	rulest_star
	rulest_assign
	rulest_modify_multi_1
	rulest_modify_rest1
	rulest_modify_multi_2
	rulest_modify_multi_rest
	rulest_modify2
	rulest_modify_rest
	rulest_name1
	rulest_name1r
	rulest_name2
	rulest_name2r
	ruleid_ch0
	ruleid_ch
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	rulePegText
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
	ruleAction75
	ruleAction76
	ruleAction77
	ruleAction78
	ruleAction79
	ruleAction80
	ruleAction81
	ruleAction82
	ruleAction83
	ruleAction84
	ruleAction85
	ruleAction86
	ruleAction87
	ruleAction88
	ruleAction89
	ruleAction90
	ruleAction91
	ruleAction92
	ruleAction93
	ruleAction94
	ruleAction95
	ruleAction96
	ruleAction97
	ruleAction98
	ruleAction99
	ruleAction100
	ruleAction101
	ruleAction102
	ruleAction103
	ruleAction104
	ruleAction105
	ruleAction106
	ruleAction107
	ruleAction108
	ruleAction109
	ruleAction110
	ruleAction111
	ruleAction112
	ruleAction113
	ruleAction114
	ruleAction115
	ruleAction116
	ruleAction117
	ruleAction118
	ruleAction119
	ruleAction120
	ruleAction121
	ruleAction122
	ruleAction123
	ruleAction124
	ruleAction125
	ruleAction126
	ruleAction127
	ruleAction128
	ruleAction129
	ruleAction130
	ruleAction131
	ruleAction132
	ruleAction133
	ruleAction134
	ruleAction135
	ruleAction136
	ruleAction137
	ruleAction138
	ruleAction139
	ruleAction140
	ruleAction141
	ruleAction142
	ruleAction143
	ruleAction144
	ruleAction145
	ruleAction146
	ruleAction147
	ruleAction148
	ruleAction149
	ruleAction150
	ruleAction151
	ruleAction152
	ruleAction153
	ruleAction154
	ruleAction155
	ruleAction156
	ruleAction157
	ruleAction158
	ruleAction159
	ruleAction160
	ruleAction161
	ruleAction162
	ruleAction163
	ruleAction164
	ruleAction165
	ruleAction166
	ruleAction167
	ruleAction168
	ruleAction169
	ruleAction170
	ruleAction171
	ruleAction172
	ruleAction173
	ruleAction174
	ruleAction175
	ruleAction176
	ruleAction177
	ruleAction178
)

var rul3s = [...]string{
	"Unknown",
	"dicescript",
	"stmtUnderground",
	"stmtRoot",
	"stmtLines",
	"nextLine",
	"_switchEnablePrefix",
	"_switchTrue",
	"_switchFalse",
	"flagsSwitch",
	"stmtWithSemicolon",
	"stmtWithBlock",
	"stmtBreak",
	"stmtContinue",
	"stmtReturn",
	"stmtWhile",
	"block",
	"stmtElse",
	"stmtIf",
	"func_def_params",
	"stmtFunc",
	"stmtAssign",
	"exprRoot",
	"_step",
	"_sliceSuffix",
	"exprSlice",
	"exprValueIfExists",
	"exprTernary",
	"exprLogicOr",
	"exprLogicAnd",
	"exprBitwiseOr",
	"exprBitwiseAnd",
	"exprCompare",
	"exprAdditive",
	"exprMultiplicative",
	"exprNullCoalescing",
	"exprExp",
	"exprUnaryNeg",
	"exprUnaryPos",
	"nos",
	"_diceMod",
	"_diceMod2",
	"_dicePearMod",
	"detailStart",
	"detailEnd",
	"_diceType1",
	"_diceType2",
	"_diceType3",
	"_diceType4",
	"_diceExpr1",
	"_diceExpr2",
	"_diceExpr3",
	"_diceExprX",
	"_wodTypeMain",
	"_wodDiceType",
	"_wodMain",
	"_cocDiceType",
	"_diceCocBonus",
	"_diceCocPenalty",
	"_dcDiceType",
	"_fateDiceType",
	"exprDice",
	"item_get",
	"array_call",
	"attr_get",
	"func_invoke",
	"dict_item",
	"value_id_without_colon",
	"value",
	"number",
	"float",
	"strPart",
	"strPart1",
	"strPart2",
	"strPart3",
	"fstring",
	"keywords",
	"identifier_ch0",
	"identifier_ch",
	"no_keywords",
	"identifier",
	"identifierWithoutColon",
	"sub",
	"parenOpen",
	"parenClose",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"nullCoalescing",
	"bitwiseOr",
	"bitwiseAnd",
	"logicOr",
	"logicAnd",
	"lt",
	"gt",
	"le",
	"ge",
	"eq",
	"ne",
	"sp",
	"spNoCR",
	"sp1",
	"escape",
	"comment",
	"st_expr",
	"e0",
	"est",
	"st_assign_multi",
	"st_star",
	"st_assign",
	"st_modify_multi_1",
	"st_modify_rest1",
	"st_modify_multi_2",
	"st_modify_multi_rest",
	"st_modify2",
	"st_modify_rest",
	"st_name1",
	"st_name1r",
	"st_name2",
	"st_name2r",
	"id_ch0",
	"id_ch",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"PegText",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
	"Action75",
	"Action76",
	"Action77",
	"Action78",
	"Action79",
	"Action80",
	"Action81",
	"Action82",
	"Action83",
	"Action84",
	"Action85",
	"Action86",
	"Action87",
	"Action88",
	"Action89",
	"Action90",
	"Action91",
	"Action92",
	"Action93",
	"Action94",
	"Action95",
	"Action96",
	"Action97",
	"Action98",
	"Action99",
	"Action100",
	"Action101",
	"Action102",
	"Action103",
	"Action104",
	"Action105",
	"Action106",
	"Action107",
	"Action108",
	"Action109",
	"Action110",
	"Action111",
	"Action112",
	"Action113",
	"Action114",
	"Action115",
	"Action116",
	"Action117",
	"Action118",
	"Action119",
	"Action120",
	"Action121",
	"Action122",
	"Action123",
	"Action124",
	"Action125",
	"Action126",
	"Action127",
	"Action128",
	"Action129",
	"Action130",
	"Action131",
	"Action132",
	"Action133",
	"Action134",
	"Action135",
	"Action136",
	"Action137",
	"Action138",
	"Action139",
	"Action140",
	"Action141",
	"Action142",
	"Action143",
	"Action144",
	"Action145",
	"Action146",
	"Action147",
	"Action148",
	"Action149",
	"Action150",
	"Action151",
	"Action152",
	"Action153",
	"Action154",
	"Action155",
	"Action156",
	"Action157",
	"Action158",
	"Action159",
	"Action160",
	"Action161",
	"Action162",
	"Action163",
	"Action164",
	"Action165",
	"Action166",
	"Action167",
	"Action168",
	"Action169",
	"Action170",
	"Action171",
	"Action172",
	"Action173",
	"Action174",
	"Action175",
	"Action176",
	"Action177",
	"Action178",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	ParserData
	Context

	Buffer string
	buffer []rune
	rules  [305]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOp(TypeHalt)
		case ruleAction1:
			p.BreakPush()
		case ruleAction2:
			p.ContinuePush()
		case ruleAction3:
			p.AddOp(TypeReturn)
		case ruleAction4:
			p.PushUndefined()
			p.AddOp(TypeReturn)
		case ruleAction5:
			p.LoopBegin()
			p.OffsetPush()
		case ruleAction6:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction7:
			p.AddOp(TypeJmp)
			p.OffsetPush()
			p.OffsetJmpSetX(0, 2, true)
			p.OffsetJmpSetX(1, 1, false)
			p.ContinueSet(2)
			p.BreakSet()
			p.OffsetPopN(3)
			p.LoopEnd()
		case ruleAction8:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction9:
			p.AddOp(TypeJmp)
			p.OffsetPopAndSet()
			p.OffsetPush()
		case ruleAction10:
			p.OffsetPopAndSet()
		case ruleAction11:
			p.CounterPush()
		case ruleAction12:
			p.CounterPush()
			p.CounterAdd(1)
		case ruleAction13:
			p.NamePush(text)
		case ruleAction14:
			p.NamePush(text)
		case ruleAction15:
			p.CounterAdd(1)
		case ruleAction16:
			p.NamePush(text)
		case ruleAction17:
			p.CodePush()
		case ruleAction18:
			num := p.CounterPop()
			arr := []string{}
			for i := IntType(0); i < num; i++ {
				arr = append(arr, p.NamePop())
			}
			p.AddStoreFunction(p.NamePop(), arr, string(text))
		case ruleAction19:
			p.NamePush(text)
		case ruleAction20:
			p.AddStore(p.NamePop())
		case ruleAction21:
			p.NamePush(text)
		case ruleAction22:
			p.CodePush()
		case ruleAction23:
			p.AddStoreComputed(p.NamePop(), string(text))
		case ruleAction24:
			p.NamePush(text)
		case ruleAction25:
			p.NamePush(text)
		case ruleAction26:
			attr, objName := p.NamePop(), p.NamePop()
			p.AddAttrSet(objName, attr, true)
		case ruleAction27:
			p.NamePush(text)
		case ruleAction28:
			p.AddStoreLocal(p.NamePop())
		case ruleAction29:
			p.NamePush(text)
		case ruleAction30:
			p.NamePush(text)
		case ruleAction31:
			attr, objName := p.NamePop(), p.NamePop()
			p.AddAttrSet(objName, attr, false)
		case ruleAction32:
			p.AddOp(TypeItemSet)
		case ruleAction33:
			p.AddOp(TypeSliceSet)
		case ruleAction34:
			p.PushUndefined()
		case ruleAction35:
			p.PushUndefined()
		case ruleAction36:
			p.PushUndefined()
		case ruleAction37:
			p.PushUndefined()
		case ruleAction38:
			p.AddOp(TypeSliceGet)
		case ruleAction39:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction40:
			p.AddOp(TypeJmp)
			p.OffsetPopAndSet()
			p.OffsetPush()
		case ruleAction41:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction42:
			p.AddOp(TypeJmp)
			p.OffsetPopAndSet()
			p.OffsetPush()
		case ruleAction43:
			p.OffsetPopAndSet()
		case ruleAction44:
			p.CounterPush()
		case ruleAction45:
			p.CounterAdd(1)
		case ruleAction46:
			p.PushStr("")
			limit := p.CounterPop() + 1
			for i := IntType(0); i < limit; i++ {
				p.OffsetPopAndSet()
			}
		case ruleAction47:
			p.AddOp(TypeJeDup)
			p.OffsetPush()
		case ruleAction48:
			p.AddOp(TypeJeDup)
			p.OffsetPush()
		case ruleAction49:
			p.AddOp(TypePushLast)
			p.OffsetPopAndSet()
			p.OffsetPopAndSet()
		case ruleAction50:
			p.AddOp(TypeLogicAnd)
		case ruleAction51:
			p.AddOp(TypeBitwiseOr)
		case ruleAction52:
			p.AddOp(TypeBitwiseAnd)
		case ruleAction53:
			p.AddOp(TypeCompLT)
		case ruleAction54:
			p.AddOp(TypeCompLE)
		case ruleAction55:
			p.AddOp(TypeCompEQ)
		case ruleAction56:
			p.AddOp(TypeCompNE)
		case ruleAction57:
			p.AddOp(TypeCompGE)
		case ruleAction58:
			p.AddOp(TypeCompGT)
		case ruleAction59:
			p.AddOp(TypeAdd)
		case ruleAction60:
			p.AddOp(TypeSubtract)
		case ruleAction61:
			p.AddOp(TypeMultiply)
		case ruleAction62:
			p.AddOp(TypeDivide)
		case ruleAction63:
			p.AddOp(TypeModulus)
		case ruleAction64:
			p.AddOp(TypeNullCoalescing)
		case ruleAction65:
			p.AddOp(TypeExponentiation)
		case ruleAction66:
			p.AddOp(TypeNegation)
		case ruleAction67:
			p.AddOp(TypePositive)
		case ruleAction68:
			p.AddOp(TypeDiceSetKeepLowNum)
		case ruleAction69:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepLowNum)
		case ruleAction70:
			p.AddOp(TypeDiceSetKeepHighNum)
		case ruleAction71:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepHighNum)
		case ruleAction72:
			p.AddOp(TypeDiceSetDropHighNum)
		case ruleAction73:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetDropHighNum)
		case ruleAction74:
			p.AddOp(TypeDiceSetDropLowNum)
		case ruleAction75:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetDropLowNum)
		case ruleAction76:
			p.AddOp(TypeDiceSetMin)
		case ruleAction77:
			p.AddOp(TypeDiceSetMax)
		case ruleAction78:
			p.PushIntNumber("2")
			p.AddOp(TypeDiceSetTimes)
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepHighNum)
		case ruleAction79:
			p.PushIntNumber("2")
			p.AddOp(TypeDiceSetTimes)
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepLowNum)
		case ruleAction80:
			p.CounterPush()
			p.CounterAdd(IntType(token.begin))
		case ruleAction81:
			p.AddDiceDetail(p.CounterPop(), IntType(token.end))
		case ruleAction82:
			p.AddOp(TypeDiceInit)
			p.AddOp(TypeDiceSetTimes)
		case ruleAction83:
			p.AddOp(TypeDiceInit)
		case ruleAction84:
			p.AddOp(TypeDiceInit)
			p.AddOp(TypeDiceSetTimes)
		case ruleAction85:
			p.AddOp(TypeDice)
		case ruleAction86:
			p.AddOp(TypeWodSetPoints)
		case ruleAction87:
			p.AddOp(TypeWodSetThreshold)
		case ruleAction88:
			p.AddOp(TypeWodSetThresholdQ)
		case ruleAction89:
			p.PushIntNumber("1")
		case ruleAction90:
			p.AddOp(TypeDiceCocBonus)
		case ruleAction91:
			p.PushIntNumber("1")
		case ruleAction92:
			p.AddOp(TypeDiceCocPenalty)
		case ruleAction93:
			p.AddOp(TypeDice)
		case ruleAction94:
			p.AddOp(TypeDice)
		case ruleAction95:
			p.AddOp(TypePushDefaultExpr)
			p.AddOp(TypeDice)
		case ruleAction96:
			p.PushIntNumber("1")
		case ruleAction97:
			p.AddOp(TypePushDefaultExpr)
			p.AddOp(TypeDice)
		case ruleAction98:
			p.AddOp(TypeWodSetInit)
		case ruleAction99:
			p.AddOp(TypeWodSetPool)
		case ruleAction100:
			p.AddOp(TypeDiceWod)
		case ruleAction101:
			p.AddOp(TypeDCSetInit)
		case ruleAction102:
			p.AddOp(TypeDCSetPool)
		case ruleAction103:
			p.AddOp(TypeDCSetPoints)
		case ruleAction104:
			p.AddOp(TypeDiceDC)
		case ruleAction105:
			p.AddOp(TypeDiceFate)
		case ruleAction106:
			p.AddOp(TypeItemGet)
		case ruleAction107:
			p.WriteCode(TypeGetAttr, string("kh"))
		case ruleAction108:
			p.AddInvoke(1)
		case ruleAction109:
			p.AddInvoke(0)
		case ruleAction110:
			p.WriteCode(TypeGetAttr, string("kl"))
		case ruleAction111:
			p.AddInvoke(1)
		case ruleAction112:
			p.AddInvoke(0)
		case ruleAction113:
			p.AddOp(TypeItemGet)
		case ruleAction114:
			p.WriteCode(TypeGetAttr, string(text))
		case ruleAction115:
			p.AddInvoke(0)
		case ruleAction116:
			p.CounterPush()
			p.CounterAdd(1)
		case ruleAction117:
			p.CounterAdd(1)
		case ruleAction118:
			p.AddInvoke(p.CounterPop())
		case ruleAction119:
			p.CounterAdd(1)
		case ruleAction120:
			p.WriteCode(TypeLoadName, string(text))
		case ruleAction121:
			p.PushIntNumber("1")
		case ruleAction122:
			p.PushIntNumber("0")
		case ruleAction123:
			p.PushUndefined()
		case ruleAction124:
			p.PushThis()
		case ruleAction125:
			p.WriteCode(TypeLoadNameRaw, string(text))
		case ruleAction126:
			p.WriteCode(TypeLoadNameWithDetail, string(text))
		case ruleAction127:
			p.PushArray(0)
		case ruleAction128:
			p.AddOp(TypePushRange)
		case ruleAction129:
			p.CounterPush()
			p.CounterAdd(1)
		case ruleAction130:
			p.CounterAdd(1)
		case ruleAction131:
			p.PushArray(p.CounterPop())
		case ruleAction132:
			p.PushDict(0)
		case ruleAction133:
			p.CounterPush()
		case ruleAction134:
			p.PushDict(p.CounterPop())
		case ruleAction135:
			p.CodePush()
		case ruleAction136:
			num := p.CounterPop()
			arr := []string{}
			for i := IntType(0); i < num; i++ {
				arr = append(arr, p.NamePop())
			}
			p.AddStoreFunction("", arr, string(text))
		case ruleAction137:
			p.PushIntNumber(string(text))
		case ruleAction138:
			p.PushFloatNumber(string(text))
		case ruleAction139:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction140:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction141:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction142:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction143:
			p.PushStr("")
		case ruleAction144:
			p.PushStr("")
		case ruleAction145:
			p.PushStr("")
		case ruleAction146:
			p.PushStr("")
		case ruleAction147:
			p.CounterPush()
		case ruleAction148:
			p.CounterAdd(1)
		case ruleAction149:
			p.CounterAdd(1)
		case ruleAction150:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction151:
			p.CounterPush()
		case ruleAction152:
			p.CounterAdd(1)
		case ruleAction153:
			p.CounterAdd(1)
		case ruleAction154:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction155:
			p.CounterPush()
		case ruleAction156:
			p.CounterPop()
		case ruleAction157:
			p.CounterPush()
		case ruleAction158:
			p.CounterPop()
		case ruleAction159:
			p.AddStName()
		case ruleAction160:
			p.AddStName()
		case ruleAction161:
			p.AddOp(TypeStX1)
		case ruleAction162:
			p.AddOp(TypeStX0)
		case ruleAction163:
			p.AddStName()
		case ruleAction164:
			p.AddStName()
		case ruleAction165:
			p.CodePush()
		case ruleAction166:
			p.CodePop()
			p.AddStoreComputedOnStack(text)
			p.AddStName()
		case ruleAction167:
			p.CodePush()
		case ruleAction168:
			p.CodePop()
			p.AddStoreComputedOnStack(text)
			p.AddStName()
		case ruleAction169:
			p.AddStModify("+", text)
		case ruleAction170:
			p.AddStModify("-", text)
		case ruleAction171:
			p.AddStModify("+", text)
		case ruleAction172:
			p.AddStModify("-", text)
		case ruleAction173:
			p.AddStModify("-", text)
		case ruleAction174:
			p.PushStr(text)
		case ruleAction175:
			p.PushStr(text)
		case ruleAction176:
			p.PushStr(text)
		case ruleAction177:
			p.PushStr(text)
		case ruleAction178:
			p.PushStr(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 dicescript <- <(sp stmtUnderground Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				{
					position2 := position
					{
						position3, tokenIndex3 := position, tokenIndex
						if buffer[position] != rune('^') {
							goto l4
						}
						position++
						if buffer[position] != rune('s') {
							goto l4
						}
						position++
						if buffer[position] != rune('t') {
							goto l4
						}
						position++
						{
							position5 := position
							{
								position6, tokenIndex6 := position, tokenIndex
								{
									position8 := position
									{
										position9, tokenIndex9 := position, tokenIndex
										if !_rules[rulest_name2]() {
											goto l10
										}
										if !_rules[rulest_modify_rest1]() {
											goto l10
										}
										goto l9
									l10:
										position, tokenIndex = position9, tokenIndex9
										if !_rules[rulest_name2r]() {
											goto l11
										}
										if !_rules[rulest_modify_rest1]() {
											goto l11
										}
										goto l9
									l11:
										position, tokenIndex = position9, tokenIndex9
										if !_rules[rulest_name1]() {
											goto l12
										}
										if !_rules[rulest_modify_rest]() {
											goto l12
										}
										goto l9
									l12:
										position, tokenIndex = position9, tokenIndex9
										if !_rules[rulest_name1r]() {
											goto l7
										}
										if !_rules[rulest_modify_rest]() {
											goto l7
										}
									}
								l9:
									if !_rules[rulesp]() {
										goto l7
									}
									{
										position13, tokenIndex13 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l13
										}
										position++
										goto l14
									l13:
										position, tokenIndex = position13, tokenIndex13
									}
								l14:
									if !_rules[rulesp]() {
										goto l7
									}
									if !_rules[rulest_modify_multi_rest]() {
										goto l7
									}
									add(rulest_modify_multi_1, position8)
								}
								goto l6
							l7:
								position, tokenIndex = position6, tokenIndex6
								{
									position16 := position
									{
										position19 := position
										{
											position20, tokenIndex20 := position, tokenIndex
											if !_rules[rulest_name2]() {
												goto l21
											}
											if !_rules[rulesp]() {
												goto l21
											}
											{
												position22, tokenIndex22 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l23
												}
												position++
												goto l22
											l23:
												position, tokenIndex = position22, tokenIndex22
												if buffer[position] != rune('=') {
													goto l21
												}
												position++
											}
										l22:
											if !_rules[rulesp]() {
												goto l21
											}
											if !_rules[ruleest]() {
												goto l21
											}
											{
												add(ruleAction159, position)
											}
											goto l20
										l21:
											position, tokenIndex = position20, tokenIndex20
											if !_rules[rulest_name1]() {
												goto l25
											}
											if !_rules[ruleest]() {
												goto l25
											}
											{
												add(ruleAction160, position)
											}
											goto l20
										l25:
											position, tokenIndex = position20, tokenIndex20
											if !_rules[rulest_name2r]() {
												goto l27
											}
											if !_rules[rulesp]() {
												goto l27
											}
											{
												position28 := position
												if buffer[position] != rune('*') {
													goto l27
												}
												position++
												if !_rules[rulesp]() {
													goto l27
												}
												{
													position29, tokenIndex29 := position, tokenIndex
													if !_rules[rulefloat]() {
														goto l30
													}
													goto l29
												l30:
													position, tokenIndex = position29, tokenIndex29
													if !_rules[rulenumber]() {
														goto l31
													}
													goto l29
												l31:
													position, tokenIndex = position29, tokenIndex29
													if !_rules[rulesub]() {
														goto l27
													}
												}
											l29:
												add(rulest_star, position28)
											}
											if !_rules[rulesp]() {
												goto l27
											}
											{
												position32, tokenIndex32 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l33
												}
												position++
												goto l32
											l33:
												position, tokenIndex = position32, tokenIndex32
												if buffer[position] != rune('=') {
													goto l27
												}
												position++
											}
										l32:
											if !_rules[rulesp]() {
												goto l27
											}
											if !_rules[ruleest]() {
												goto l27
											}
											{
												add(ruleAction161, position)
											}
											goto l20
										l27:
											position, tokenIndex = position20, tokenIndex20
											if !_rules[rulest_name2r]() {
												goto l35
											}
											if !_rules[rulesp]() {
												goto l35
											}
											if buffer[position] != rune('*') {
												goto l35
											}
											position++
											if !_rules[rulesp]() {
												goto l35
											}
											{
												position36, tokenIndex36 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l37
												}
												position++
												goto l36
											l37:
												position, tokenIndex = position36, tokenIndex36
												if buffer[position] != rune('=') {
													goto l35
												}
												position++
											}
										l36:
											if !_rules[rulesp]() {
												goto l35
											}
											if !_rules[ruleest]() {
												goto l35
											}
											{
												add(ruleAction162, position)
											}
											goto l20
										l35:
											position, tokenIndex = position20, tokenIndex20
											if !_rules[rulest_name2r]() {
												goto l39
											}
											if !_rules[rulesp]() {
												goto l39
											}
											{
												position40, tokenIndex40 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l41
												}
												position++
												goto l40
											l41:
												position, tokenIndex = position40, tokenIndex40
												if buffer[position] != rune('=') {
													goto l39
												}
												position++
											}
										l40:
											if !_rules[rulesp]() {
												goto l39
											}
											if !_rules[ruleest]() {
												goto l39
											}
											{
												add(ruleAction163, position)
											}
											goto l20
										l39:
											position, tokenIndex = position20, tokenIndex20
											if !_rules[rulest_name1r]() {
												goto l43
											}
											if !_rules[ruleest]() {
												goto l43
											}
											{
												add(ruleAction164, position)
											}
											goto l20
										l43:
											position, tokenIndex = position20, tokenIndex20
											if buffer[position] != rune('&') {
												goto l45
											}
											position++
											if !_rules[rulest_name2]() {
												goto l45
											}
											if !_rules[rulesp]() {
												goto l45
											}
											{
												position46, tokenIndex46 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l47
												}
												position++
												goto l46
											l47:
												position, tokenIndex = position46, tokenIndex46
												if buffer[position] != rune('=') {
													goto l45
												}
												position++
											}
										l46:
											if !_rules[rulesp]() {
												goto l45
											}
											{
												add(ruleAction165, position)
											}
											{
												position49 := position
												if !_rules[ruleest]() {
													goto l45
												}
												add(rulePegText, position49)
											}
											{
												add(ruleAction166, position)
											}
											goto l20
										l45:
											position, tokenIndex = position20, tokenIndex20
											if buffer[position] != rune('&') {
												goto l15
											}
											position++
											if !_rules[rulest_name2r]() {
												goto l15
											}
											if !_rules[rulesp]() {
												goto l15
											}
											{
												position51, tokenIndex51 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l52
												}
												position++
												goto l51
											l52:
												position, tokenIndex = position51, tokenIndex51
												if buffer[position] != rune('=') {
													goto l15
												}
												position++
											}
										l51:
											if !_rules[rulesp]() {
												goto l15
											}
											{
												add(ruleAction167, position)
											}
											{
												position54 := position
												if !_rules[ruleest]() {
													goto l15
												}
												add(rulePegText, position54)
											}
											{
												add(ruleAction168, position)
											}
										}
									l20:
										add(rulest_assign, position19)
									}
									if !_rules[rulesp]() {
										goto l15
									}
									{
										position56, tokenIndex56 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l56
										}
										position++
										goto l57
									l56:
										position, tokenIndex = position56, tokenIndex56
									}
								l57:
									if !_rules[rulesp]() {
										goto l15
									}
								l17:
									{
										position18, tokenIndex18 := position, tokenIndex
										{
											position58 := position
											{
												position59, tokenIndex59 := position, tokenIndex
												if !_rules[rulest_name2]() {
													goto l60
												}
												if !_rules[rulesp]() {
													goto l60
												}
												{
													position61, tokenIndex61 := position, tokenIndex
													if buffer[position] != rune(':') {
														goto l62
													}
													position++
													goto l61
												l62:
													position, tokenIndex = position61, tokenIndex61
													if buffer[position] != rune('=') {
														goto l60
													}
													position++
												}
											l61:
												if !_rules[rulesp]() {
													goto l60
												}
												if !_rules[ruleest]() {
													goto l60
												}
												{
													add(ruleAction159, position)
												}
												goto l59
											l60:
												position, tokenIndex = position59, tokenIndex59
												if !_rules[rulest_name1]() {
													goto l64
												}
												if !_rules[ruleest]() {
													goto l64
												}
												{
													add(ruleAction160, position)
												}
												goto l59
											l64:
												position, tokenIndex = position59, tokenIndex59
												if !_rules[rulest_name2r]() {
													goto l66
												}
												if !_rules[rulesp]() {
													goto l66
												}
												{
													position67 := position
													if buffer[position] != rune('*') {
														goto l66
													}
													position++
													if !_rules[rulesp]() {
														goto l66
													}
													{
														position68, tokenIndex68 := position, tokenIndex
														if !_rules[rulefloat]() {
															goto l69
														}
														goto l68
													l69:
														position, tokenIndex = position68, tokenIndex68
														if !_rules[rulenumber]() {
															goto l70
														}
														goto l68
													l70:
														position, tokenIndex = position68, tokenIndex68
														if !_rules[rulesub]() {
															goto l66
														}
													}
												l68:
													add(rulest_star, position67)
												}
												if !_rules[rulesp]() {
													goto l66
												}
												{
													position71, tokenIndex71 := position, tokenIndex
													if buffer[position] != rune(':') {
														goto l72
													}
													position++
													goto l71
												l72:
													position, tokenIndex = position71, tokenIndex71
													if buffer[position] != rune('=') {
														goto l66
													}
													position++
												}
											l71:
												if !_rules[rulesp]() {
													goto l66
												}
												if !_rules[ruleest]() {
													goto l66
												}
												{
													add(ruleAction161, position)
												}
												goto l59
											l66:
												position, tokenIndex = position59, tokenIndex59
												if !_rules[rulest_name2r]() {
													goto l74
												}
												if !_rules[rulesp]() {
													goto l74
												}
												if buffer[position] != rune('*') {
													goto l74
												}
												position++
												if !_rules[rulesp]() {
													goto l74
												}
												{
													position75, tokenIndex75 := position, tokenIndex
													if buffer[position] != rune(':') {
														goto l76
													}
													position++
													goto l75
												l76:
													position, tokenIndex = position75, tokenIndex75
													if buffer[position] != rune('=') {
														goto l74
													}
													position++
												}
											l75:
												if !_rules[rulesp]() {
													goto l74
												}
												if !_rules[ruleest]() {
													goto l74
												}
												{
													add(ruleAction162, position)
												}
												goto l59
											l74:
												position, tokenIndex = position59, tokenIndex59
												if !_rules[rulest_name2r]() {
													goto l78
												}
												if !_rules[rulesp]() {
													goto l78
												}
												{
													position79, tokenIndex79 := position, tokenIndex
													if buffer[position] != rune(':') {
														goto l80
													}
													position++
													goto l79
												l80:
													position, tokenIndex = position79, tokenIndex79
													if buffer[position] != rune('=') {
														goto l78
													}
													position++
												}
											l79:
												if !_rules[rulesp]() {
													goto l78
												}
												if !_rules[ruleest]() {
													goto l78
												}
												{
													add(ruleAction163, position)
												}
												goto l59
											l78:
												position, tokenIndex = position59, tokenIndex59
												if !_rules[rulest_name1r]() {
													goto l82
												}
												if !_rules[ruleest]() {
													goto l82
												}
												{
													add(ruleAction164, position)
												}
												goto l59
											l82:
												position, tokenIndex = position59, tokenIndex59
												if buffer[position] != rune('&') {
													goto l84
												}
												position++
												if !_rules[rulest_name2]() {
													goto l84
												}
												if !_rules[rulesp]() {
													goto l84
												}
												{
													position85, tokenIndex85 := position, tokenIndex
													if buffer[position] != rune(':') {
														goto l86
													}
													position++
													goto l85
												l86:
													position, tokenIndex = position85, tokenIndex85
													if buffer[position] != rune('=') {
														goto l84
													}
													position++
												}
											l85:
												if !_rules[rulesp]() {
													goto l84
												}
												{
													add(ruleAction165, position)
												}
												{
													position88 := position
													if !_rules[ruleest]() {
														goto l84
													}
													add(rulePegText, position88)
												}
												{
													add(ruleAction166, position)
												}
												goto l59
											l84:
												position, tokenIndex = position59, tokenIndex59
												if buffer[position] != rune('&') {
													goto l18
												}
												position++
												if !_rules[rulest_name2r]() {
													goto l18
												}
												if !_rules[rulesp]() {
													goto l18
												}
												{
													position90, tokenIndex90 := position, tokenIndex
													if buffer[position] != rune(':') {
														goto l91
													}
													position++
													goto l90
												l91:
													position, tokenIndex = position90, tokenIndex90
													if buffer[position] != rune('=') {
														goto l18
													}
													position++
												}
											l90:
												if !_rules[rulesp]() {
													goto l18
												}
												{
													add(ruleAction167, position)
												}
												{
													position93 := position
													if !_rules[ruleest]() {
														goto l18
													}
													add(rulePegText, position93)
												}
												{
													add(ruleAction168, position)
												}
											}
										l59:
											add(rulest_assign, position58)
										}
										if !_rules[rulesp]() {
											goto l18
										}
										{
											position95, tokenIndex95 := position, tokenIndex
											if buffer[position] != rune(',') {
												goto l95
											}
											position++
											goto l96
										l95:
											position, tokenIndex = position95, tokenIndex95
										}
									l96:
										if !_rules[rulesp]() {
											goto l18
										}
										goto l17
									l18:
										position, tokenIndex = position18, tokenIndex18
									}
									add(rulest_assign_multi, position16)
								}
								goto l6
							l15:
								position, tokenIndex = position6, tokenIndex6
								{
									position98 := position
									if !_rules[rulest_modify2]() {
										goto l97
									}
									if !_rules[rulesp]() {
										goto l97
									}
									{
										position99, tokenIndex99 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l99
										}
										position++
										goto l100
									l99:
										position, tokenIndex = position99, tokenIndex99
									}
								l100:
									if !_rules[rulesp]() {
										goto l97
									}
									if !_rules[rulest_modify_multi_rest]() {
										goto l97
									}
									add(rulest_modify_multi_2, position98)
								}
								goto l6
							l97:
								position, tokenIndex = position6, tokenIndex6
								if buffer[position] != rune('1') {
									goto l4
								}
								position++
								if buffer[position] != rune('2') {
									goto l4
								}
								position++
								if buffer[position] != rune('3') {
									goto l4
								}
								position++
							}
						l6:
							add(rulest_expr, position5)
						}
						goto l3
					l4:
						position, tokenIndex = position3, tokenIndex3
						if !_rules[rulestmtRoot]() {
							goto l0
						}
					}
				l3:
					add(rulestmtUnderground, position2)
				}
				{
					add(ruleAction0, position)
				}
				add(ruledicescript, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 stmtUnderground <- <(('^' 's' 't' st_expr) / stmtRoot)> */
		nil,
		/* 2 stmtRoot <- <(stmtLines sp)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				if !_rules[rulestmtLines]() {
					goto l103
				}
				if !_rules[rulesp]() {
					goto l103
				}
				add(rulestmtRoot, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 3 stmtLines <- <((&{!p.Config.DisableStmts} stmtWithBlock stmtLines?) / (flagsSwitch stmtLines?) / (comment sp stmtLines?) / (stmtWithSemicolon nextLine?) / ((';' sp)+ stmtLines?))> */
		func() bool {
			position105, tokenIndex105 := position, tokenIndex
			{
				position106 := position
				{
					position107, tokenIndex107 := position, tokenIndex
					if !(!p.Config.DisableStmts) {
						goto l108
					}
					{
						position109 := position
						{
							switch buffer[position] {
							case 'r':
								{
									position111 := position
									{
										position112, tokenIndex112 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l113
										}
										position++
										if buffer[position] != rune('e') {
											goto l113
										}
										position++
										if buffer[position] != rune('t') {
											goto l113
										}
										position++
										if buffer[position] != rune('u') {
											goto l113
										}
										position++
										if buffer[position] != rune('r') {
											goto l113
										}
										position++
										if buffer[position] != rune('n') {
											goto l113
										}
										position++
										if !_rules[rulesp1]() {
											goto l113
										}
										if !_rules[ruleexprRoot]() {
											goto l113
										}
										{
											add(ruleAction3, position)
										}
										goto l112
									l113:
										position, tokenIndex = position112, tokenIndex112
										if buffer[position] != rune('r') {
											goto l108
										}
										position++
										if buffer[position] != rune('e') {
											goto l108
										}
										position++
										if buffer[position] != rune('t') {
											goto l108
										}
										position++
										if buffer[position] != rune('u') {
											goto l108
										}
										position++
										if buffer[position] != rune('r') {
											goto l108
										}
										position++
										if buffer[position] != rune('n') {
											goto l108
										}
										position++
										if !_rules[rulesp]() {
											goto l108
										}
										{
											add(ruleAction4, position)
										}
									}
								l112:
									add(rulestmtReturn, position111)
								}
							case 'w':
								{
									position116 := position
									if buffer[position] != rune('w') {
										goto l108
									}
									position++
									if buffer[position] != rune('h') {
										goto l108
									}
									position++
									if buffer[position] != rune('i') {
										goto l108
									}
									position++
									if buffer[position] != rune('l') {
										goto l108
									}
									position++
									if buffer[position] != rune('e') {
										goto l108
									}
									position++
									{
										add(ruleAction5, position)
									}
									if !_rules[rulesp1]() {
										goto l108
									}
									if !_rules[ruleexprRoot]() {
										goto l108
									}
									{
										add(ruleAction6, position)
									}
									if !_rules[ruleblock]() {
										goto l108
									}
									{
										add(ruleAction7, position)
									}
									add(rulestmtWhile, position116)
								}
							case 'f':
								{
									position120 := position
									if buffer[position] != rune('f') {
										goto l108
									}
									position++
									if buffer[position] != rune('u') {
										goto l108
									}
									position++
									if buffer[position] != rune('n') {
										goto l108
									}
									position++
									if buffer[position] != rune('c') {
										goto l108
									}
									position++
									if !_rules[rulesp1]() {
										goto l108
									}
									if !_rules[ruleidentifier]() {
										goto l108
									}
									if !_rules[rulesp]() {
										goto l108
									}
									{
										add(ruleAction16, position)
									}
									if !_rules[rulefunc_def_params]() {
										goto l108
									}
									if buffer[position] != rune('{') {
										goto l108
									}
									position++
									if !_rules[rulesp]() {
										goto l108
									}
									{
										add(ruleAction17, position)
									}
									{
										position123 := position
										{
											position124, tokenIndex124 := position, tokenIndex
											if !_rules[rulestmtRoot]() {
												goto l124
											}
											goto l125
										l124:
											position, tokenIndex = position124, tokenIndex124
										}
									l125:
										add(rulePegText, position123)
									}
									if buffer[position] != rune('}') {
										goto l108
									}
									position++
									if !_rules[rulesp]() {
										goto l108
									}
									{
										add(ruleAction18, position)
									}
									add(rulestmtFunc, position120)
								}
							default:
								if !_rules[rulestmtIf]() {
									goto l108
								}
							}
						}

						add(rulestmtWithBlock, position109)
					}
					{
						position127, tokenIndex127 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l127
						}
						goto l128
					l127:
						position, tokenIndex = position127, tokenIndex127
					}
				l128:
					goto l107
				l108:
					position, tokenIndex = position107, tokenIndex107
					{
						position130 := position
						{
							position131, tokenIndex131 := position, tokenIndex
							if buffer[position] != rune('/') {
								goto l132
							}
							position++
							if buffer[position] != rune('/') {
								goto l132
							}
							position++
							{
								position133, tokenIndex133 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l133
								}
								goto l134
							l133:
								position, tokenIndex = position133, tokenIndex133
							}
						l134:
							if !_rules[rule_switchEnablePrefix]() {
								goto l132
							}
							if buffer[position] != rune('W') {
								goto l132
							}
							position++
							if buffer[position] != rune('o') {
								goto l132
							}
							position++
							if buffer[position] != rune('D') {
								goto l132
							}
							position++
							if !_rules[rulesp1]() {
								goto l132
							}
							{
								position135, tokenIndex135 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l136
								}
								if !_rules[rulesp1]() {
									goto l136
								}
								p.Config.EnableDiceWoD = true
								goto l135
							l136:
								position, tokenIndex = position135, tokenIndex135
								if !_rules[rule_switchFalse]() {
									goto l132
								}
								if !_rules[rulesp1]() {
									goto l132
								}
								p.Config.EnableDiceWoD = false
							}
						l135:
						l137:
							{
								position138, tokenIndex138 := position, tokenIndex
								{
									position139, tokenIndex139 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l139
									}
									position++
									goto l138
								l139:
									position, tokenIndex = position139, tokenIndex139
								}
								if !matchDot() {
									goto l138
								}
								goto l137
							l138:
								position, tokenIndex = position138, tokenIndex138
							}
							goto l131
						l132:
							position, tokenIndex = position131, tokenIndex131
							if buffer[position] != rune('/') {
								goto l140
							}
							position++
							if buffer[position] != rune('/') {
								goto l140
							}
							position++
							{
								position141, tokenIndex141 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l141
								}
								goto l142
							l141:
								position, tokenIndex = position141, tokenIndex141
							}
						l142:
							if !_rules[rule_switchEnablePrefix]() {
								goto l140
							}
							if buffer[position] != rune('C') {
								goto l140
							}
							position++
							if buffer[position] != rune('o') {
								goto l140
							}
							position++
							if buffer[position] != rune('C') {
								goto l140
							}
							position++
							if !_rules[rulesp1]() {
								goto l140
							}
							{
								position143, tokenIndex143 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l144
								}
								if !_rules[rulesp1]() {
									goto l144
								}
								p.Config.EnableDiceCoC = true
								goto l143
							l144:
								position, tokenIndex = position143, tokenIndex143
								if !_rules[rule_switchFalse]() {
									goto l140
								}
								if !_rules[rulesp1]() {
									goto l140
								}
								p.Config.EnableDiceCoC = false
							}
						l143:
						l145:
							{
								position146, tokenIndex146 := position, tokenIndex
								{
									position147, tokenIndex147 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l147
									}
									position++
									goto l146
								l147:
									position, tokenIndex = position147, tokenIndex147
								}
								if !matchDot() {
									goto l146
								}
								goto l145
							l146:
								position, tokenIndex = position146, tokenIndex146
							}
							goto l131
						l140:
							position, tokenIndex = position131, tokenIndex131
							if buffer[position] != rune('/') {
								goto l148
							}
							position++
							if buffer[position] != rune('/') {
								goto l148
							}
							position++
							{
								position149, tokenIndex149 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l149
								}
								goto l150
							l149:
								position, tokenIndex = position149, tokenIndex149
							}
						l150:
							if !_rules[rule_switchEnablePrefix]() {
								goto l148
							}
							if buffer[position] != rune('F') {
								goto l148
							}
							position++
							if buffer[position] != rune('a') {
								goto l148
							}
							position++
							if buffer[position] != rune('t') {
								goto l148
							}
							position++
							if buffer[position] != rune('e') {
								goto l148
							}
							position++
							if !_rules[rulesp1]() {
								goto l148
							}
							{
								position151, tokenIndex151 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l152
								}
								if !_rules[rulesp1]() {
									goto l152
								}
								p.Config.EnableDiceFate = true
								goto l151
							l152:
								position, tokenIndex = position151, tokenIndex151
								if !_rules[rule_switchFalse]() {
									goto l148
								}
								if !_rules[rulesp1]() {
									goto l148
								}
								p.Config.EnableDiceFate = false
							}
						l151:
						l153:
							{
								position154, tokenIndex154 := position, tokenIndex
								{
									position155, tokenIndex155 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l155
									}
									position++
									goto l154
								l155:
									position, tokenIndex = position155, tokenIndex155
								}
								if !matchDot() {
									goto l154
								}
								goto l153
							l154:
								position, tokenIndex = position154, tokenIndex154
							}
							goto l131
						l148:
							position, tokenIndex = position131, tokenIndex131
							if buffer[position] != rune('/') {
								goto l129
							}
							position++
							if buffer[position] != rune('/') {
								goto l129
							}
							position++
							{
								position156, tokenIndex156 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l156
								}
								goto l157
							l156:
								position, tokenIndex = position156, tokenIndex156
							}
						l157:
							if !_rules[rule_switchEnablePrefix]() {
								goto l129
							}
							if buffer[position] != rune('D') {
								goto l129
							}
							position++
							if buffer[position] != rune('o') {
								goto l129
							}
							position++
							if buffer[position] != rune('u') {
								goto l129
							}
							position++
							if buffer[position] != rune('b') {
								goto l129
							}
							position++
							if buffer[position] != rune('l') {
								goto l129
							}
							position++
							if buffer[position] != rune('e') {
								goto l129
							}
							position++
							if buffer[position] != rune('C') {
								goto l129
							}
							position++
							if buffer[position] != rune('r') {
								goto l129
							}
							position++
							if buffer[position] != rune('o') {
								goto l129
							}
							position++
							if buffer[position] != rune('s') {
								goto l129
							}
							position++
							if buffer[position] != rune('s') {
								goto l129
							}
							position++
							if !_rules[rulesp1]() {
								goto l129
							}
							{
								position158, tokenIndex158 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l159
								}
								if !_rules[rulesp1]() {
									goto l159
								}
								p.Config.EnableDiceDoubleCross = true
								goto l158
							l159:
								position, tokenIndex = position158, tokenIndex158
								if !_rules[rule_switchFalse]() {
									goto l129
								}
								if !_rules[rulesp1]() {
									goto l129
								}
								p.Config.EnableDiceDoubleCross = false
							}
						l158:
						l160:
							{
								position161, tokenIndex161 := position, tokenIndex
								{
									position162, tokenIndex162 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l162
									}
									position++
									goto l161
								l162:
									position, tokenIndex = position162, tokenIndex162
								}
								if !matchDot() {
									goto l161
								}
								goto l160
							l161:
								position, tokenIndex = position161, tokenIndex161
							}
						}
					l131:
						add(ruleflagsSwitch, position130)
					}
					{
						position163, tokenIndex163 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l163
						}
						goto l164
					l163:
						position, tokenIndex = position163, tokenIndex163
					}
				l164:
					goto l107
				l129:
					position, tokenIndex = position107, tokenIndex107
					{
						position166 := position
						if !_rules[rulespNoCR]() {
							goto l165
						}
						if buffer[position] != rune('/') {
							goto l165
						}
						position++
						if buffer[position] != rune('/') {
							goto l165
						}
						position++
					l167:
						{
							position168, tokenIndex168 := position, tokenIndex
							{
								position169, tokenIndex169 := position, tokenIndex
								if buffer[position] != rune('\n') {
									goto l169
								}
								position++
								goto l168
							l169:
								position, tokenIndex = position169, tokenIndex169
							}
							if !matchDot() {
								goto l168
							}
							goto l167
						l168:
							position, tokenIndex = position168, tokenIndex168
						}
						{
							position170, tokenIndex170 := position, tokenIndex
							if buffer[position] != rune('\n') {
								goto l171
							}
							position++
							goto l170
						l171:
							position, tokenIndex = position170, tokenIndex170
							{
								position172, tokenIndex172 := position, tokenIndex
								if !matchDot() {
									goto l172
								}
								goto l165
							l172:
								position, tokenIndex = position172, tokenIndex172
							}
						}
					l170:
						add(rulecomment, position166)
					}
					if !_rules[rulesp]() {
						goto l165
					}
					{
						position173, tokenIndex173 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l173
						}
						goto l174
					l173:
						position, tokenIndex = position173, tokenIndex173
					}
				l174:
					goto l107
				l165:
					position, tokenIndex = position107, tokenIndex107
					{
						position176 := position
						{
							position177, tokenIndex177 := position, tokenIndex
							{
								position179 := position
								{
									position180, tokenIndex180 := position, tokenIndex
									if !_rules[ruleidentifier]() {
										goto l181
									}
									if !_rules[rulesp]() {
										goto l181
									}
									{
										add(ruleAction19, position)
									}
									if buffer[position] != rune('=') {
										goto l181
									}
									position++
									if !_rules[rulesp]() {
										goto l181
									}
									if !_rules[ruleexprRoot]() {
										goto l181
									}
									{
										add(ruleAction20, position)
									}
									goto l180
								l181:
									position, tokenIndex = position180, tokenIndex180
									if buffer[position] != rune('&') {
										goto l184
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l184
									}
									if !_rules[rulesp]() {
										goto l184
									}
									{
										add(ruleAction21, position)
									}
									if buffer[position] != rune('=') {
										goto l184
									}
									position++
									if !_rules[rulesp]() {
										goto l184
									}
									{
										add(ruleAction22, position)
									}
									{
										position187 := position
										if !_rules[ruleexprRoot]() {
											goto l184
										}
										add(rulePegText, position187)
									}
									{
										add(ruleAction23, position)
									}
									goto l180
								l184:
									position, tokenIndex = position180, tokenIndex180
									if buffer[position] != rune('&') {
										goto l189
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l189
									}
									if !_rules[rulesp]() {
										goto l189
									}
									{
										add(ruleAction24, position)
									}
									if buffer[position] != rune('.') {
										goto l189
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l189
									}
									if !_rules[rulesp]() {
										goto l189
									}
									{
										add(ruleAction25, position)
									}
									if !_rules[rulesp]() {
										goto l189
									}
									if buffer[position] != rune('=') {
										goto l189
									}
									position++
									if !_rules[rulesp]() {
										goto l189
									}
									if !_rules[ruleexprRoot]() {
										goto l189
									}
									{
										add(ruleAction26, position)
									}
									goto l180
								l189:
									position, tokenIndex = position180, tokenIndex180
									if buffer[position] != rune('t') {
										goto l193
									}
									position++
									if buffer[position] != rune('h') {
										goto l193
									}
									position++
									if buffer[position] != rune('i') {
										goto l193
									}
									position++
									if buffer[position] != rune('s') {
										goto l193
									}
									position++
									if !_rules[rulesp]() {
										goto l193
									}
									if buffer[position] != rune('.') {
										goto l193
									}
									position++
									if !_rules[rulesp]() {
										goto l193
									}
									if !_rules[ruleidentifier]() {
										goto l193
									}
									if !_rules[rulesp]() {
										goto l193
									}
									{
										add(ruleAction27, position)
									}
									if buffer[position] != rune('=') {
										goto l193
									}
									position++
									if !_rules[rulesp]() {
										goto l193
									}
									if !_rules[ruleexprRoot]() {
										goto l193
									}
									{
										add(ruleAction28, position)
									}
									goto l180
								l193:
									position, tokenIndex = position180, tokenIndex180
									if !_rules[ruleidentifier]() {
										goto l196
									}
									if !_rules[rulesp]() {
										goto l196
									}
									{
										add(ruleAction29, position)
									}
									if buffer[position] != rune('.') {
										goto l196
									}
									position++
									if !_rules[rulesp]() {
										goto l196
									}
									if !_rules[ruleidentifier]() {
										goto l196
									}
									if !_rules[rulesp]() {
										goto l196
									}
									{
										add(ruleAction30, position)
									}
									if buffer[position] != rune('=') {
										goto l196
									}
									position++
									if !_rules[rulesp]() {
										goto l196
									}
									if !_rules[ruleexprRoot]() {
										goto l196
									}
									{
										add(ruleAction31, position)
									}
									goto l180
								l196:
									position, tokenIndex = position180, tokenIndex180
									if !_rules[ruleexprRoot]() {
										goto l200
									}
									if buffer[position] != rune('[') {
										goto l200
									}
									position++
									if !_rules[rulesp]() {
										goto l200
									}
									if !_rules[ruleexprRoot]() {
										goto l200
									}
									if buffer[position] != rune(']') {
										goto l200
									}
									position++
									if !_rules[rulesp]() {
										goto l200
									}
									if buffer[position] != rune('=') {
										goto l200
									}
									position++
									if !_rules[rulesp]() {
										goto l200
									}
									if !_rules[ruleexprRoot]() {
										goto l200
									}
									{
										add(ruleAction32, position)
									}
									goto l180
								l200:
									position, tokenIndex = position180, tokenIndex180
									if !_rules[ruleexprRoot]() {
										goto l178
									}
									if !_rules[rule_sliceSuffix]() {
										goto l178
									}
									if buffer[position] != rune('=') {
										goto l178
									}
									position++
									if !_rules[rulesp]() {
										goto l178
									}
									if !_rules[ruleexprRoot]() {
										goto l178
									}
									{
										add(ruleAction33, position)
									}
								}
							l180:
								add(rulestmtAssign, position179)
							}
							goto l177
						l178:
							position, tokenIndex = position177, tokenIndex177
							{
								position204 := position
								if buffer[position] != rune('b') {
									goto l203
								}
								position++
								if buffer[position] != rune('r') {
									goto l203
								}
								position++
								if buffer[position] != rune('e') {
									goto l203
								}
								position++
								if buffer[position] != rune('a') {
									goto l203
								}
								position++
								if buffer[position] != rune('k') {
									goto l203
								}
								position++
								if !_rules[rulesp]() {
									goto l203
								}
								{
									add(ruleAction1, position)
								}
								add(rulestmtBreak, position204)
							}
							goto l177
						l203:
							position, tokenIndex = position177, tokenIndex177
							{
								position207 := position
								if buffer[position] != rune('c') {
									goto l206
								}
								position++
								if buffer[position] != rune('o') {
									goto l206
								}
								position++
								if buffer[position] != rune('n') {
									goto l206
								}
								position++
								if buffer[position] != rune('t') {
									goto l206
								}
								position++
								if buffer[position] != rune('i') {
									goto l206
								}
								position++
								if buffer[position] != rune('n') {
									goto l206
								}
								position++
								if buffer[position] != rune('u') {
									goto l206
								}
								position++
								if buffer[position] != rune('e') {
									goto l206
								}
								position++
								if !_rules[rulesp]() {
									goto l206
								}
								{
									add(ruleAction2, position)
								}
								add(rulestmtContinue, position207)
							}
							goto l177
						l206:
							position, tokenIndex = position177, tokenIndex177
							if !_rules[ruleexprRoot]() {
								goto l175
							}
						}
					l177:
						add(rulestmtWithSemicolon, position176)
					}
					{
						position209, tokenIndex209 := position, tokenIndex
						{
							position211 := position
							{
								position214, tokenIndex214 := position, tokenIndex
								if !_rules[rulespNoCR]() {
									goto l215
								}
								if buffer[position] != rune('\n') {
									goto l215
								}
								position++
								goto l214
							l215:
								position, tokenIndex = position214, tokenIndex214
								if !_rules[rulesp]() {
									goto l209
								}
								if buffer[position] != rune(';') {
									goto l209
								}
								position++
							}
						l214:
							if !_rules[rulesp]() {
								goto l209
							}
						l212:
							{
								position213, tokenIndex213 := position, tokenIndex
								{
									position216, tokenIndex216 := position, tokenIndex
									if !_rules[rulespNoCR]() {
										goto l217
									}
									if buffer[position] != rune('\n') {
										goto l217
									}
									position++
									goto l216
								l217:
									position, tokenIndex = position216, tokenIndex216
									if !_rules[rulesp]() {
										goto l213
									}
									if buffer[position] != rune(';') {
										goto l213
									}
									position++
								}
							l216:
								if !_rules[rulesp]() {
									goto l213
								}
								goto l212
							l213:
								position, tokenIndex = position213, tokenIndex213
							}
							{
								position218, tokenIndex218 := position, tokenIndex
								if !_rules[rulestmtLines]() {
									goto l218
								}
								goto l219
							l218:
								position, tokenIndex = position218, tokenIndex218
							}
						l219:
							add(rulenextLine, position211)
						}
						goto l210
					l209:
						position, tokenIndex = position209, tokenIndex209
					}
				l210:
					goto l107
				l175:
					position, tokenIndex = position107, tokenIndex107
					if buffer[position] != rune(';') {
						goto l105
					}
					position++
					if !_rules[rulesp]() {
						goto l105
					}
				l220:
					{
						position221, tokenIndex221 := position, tokenIndex
						if buffer[position] != rune(';') {
							goto l221
						}
						position++
						if !_rules[rulesp]() {
							goto l221
						}
						goto l220
					l221:
						position, tokenIndex = position221, tokenIndex221
					}
					{
						position222, tokenIndex222 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l222
						}
						goto l223
					l222:
						position, tokenIndex = position222, tokenIndex222
					}
				l223:
				}
			l107:
				add(rulestmtLines, position106)
			}
			return true
		l105:
			position, tokenIndex = position105, tokenIndex105
			return false
		},
		/* 4 nextLine <- <((((spNoCR '\n') / (sp ';')) sp)+ stmtLines?)> */
		nil,
		/* 5 _switchEnablePrefix <- <('#' 'E' 'n' 'a' 'b' 'l' 'e' 'D' 'i' 'c' 'e')> */
		func() bool {
			position225, tokenIndex225 := position, tokenIndex
			{
				position226 := position
				if buffer[position] != rune('#') {
					goto l225
				}
				position++
				if buffer[position] != rune('E') {
					goto l225
				}
				position++
				if buffer[position] != rune('n') {
					goto l225
				}
				position++
				if buffer[position] != rune('a') {
					goto l225
				}
				position++
				if buffer[position] != rune('b') {
					goto l225
				}
				position++
				if buffer[position] != rune('l') {
					goto l225
				}
				position++
				if buffer[position] != rune('e') {
					goto l225
				}
				position++
				if buffer[position] != rune('D') {
					goto l225
				}
				position++
				if buffer[position] != rune('i') {
					goto l225
				}
				position++
				if buffer[position] != rune('c') {
					goto l225
				}
				position++
				if buffer[position] != rune('e') {
					goto l225
				}
				position++
				add(rule_switchEnablePrefix, position226)
			}
			return true
		l225:
			position, tokenIndex = position225, tokenIndex225
			return false
		},
		/* 6 _switchTrue <- <('t' 'r' 'u' 'e')> */
		func() bool {
			position227, tokenIndex227 := position, tokenIndex
			{
				position228 := position
				if buffer[position] != rune('t') {
					goto l227
				}
				position++
				if buffer[position] != rune('r') {
					goto l227
				}
				position++
				if buffer[position] != rune('u') {
					goto l227
				}
				position++
				if buffer[position] != rune('e') {
					goto l227
				}
				position++
				add(rule_switchTrue, position228)
			}
			return true
		l227:
			position, tokenIndex = position227, tokenIndex227
			return false
		},
		/* 7 _switchFalse <- <('f' 'a' 'l' 's' 'e')> */
		func() bool {
			position229, tokenIndex229 := position, tokenIndex
			{
				position230 := position
				if buffer[position] != rune('f') {
					goto l229
				}
				position++
				if buffer[position] != rune('a') {
					goto l229
				}
				position++
				if buffer[position] != rune('l') {
					goto l229
				}
				position++
				if buffer[position] != rune('s') {
					goto l229
				}
				position++
				if buffer[position] != rune('e') {
					goto l229
				}
				position++
				add(rule_switchFalse, position230)
			}
			return true
		l229:
			position, tokenIndex = position229, tokenIndex229
			return false
		},
		/* 8 flagsSwitch <- <(('/' '/' sp? _switchEnablePrefix ('W' 'o' 'D') sp1 ((_switchTrue sp1 !{p.Config.EnableDiceWoD = true}) / (_switchFalse sp1 !{p.Config.EnableDiceWoD = false})) (!'\n' .)*) / ('/' '/' sp? _switchEnablePrefix ('C' 'o' 'C') sp1 ((_switchTrue sp1 !{p.Config.EnableDiceCoC = true}) / (_switchFalse sp1 !{p.Config.EnableDiceCoC = false})) (!'\n' .)*) / ('/' '/' sp? _switchEnablePrefix ('F' 'a' 't' 'e') sp1 ((_switchTrue sp1 !{p.Config.EnableDiceFate = true}) / (_switchFalse sp1 !{p.Config.EnableDiceFate = false})) (!'\n' .)*) / ('/' '/' sp? _switchEnablePrefix ('D' 'o' 'u' 'b' 'l' 'e' 'C' 'r' 'o' 's' 's') sp1 ((_switchTrue sp1 !{p.Config.EnableDiceDoubleCross = true}) / (_switchFalse sp1 !{p.Config.EnableDiceDoubleCross = false})) (!'\n' .)*))> */
		nil,
		/* 9 stmtWithSemicolon <- <(stmtAssign / stmtBreak / stmtContinue / exprRoot)> */
		nil,
		/* 10 stmtWithBlock <- <((&('r') stmtReturn) | (&('w') stmtWhile) | (&('f') stmtFunc) | (&('i') stmtIf))> */
		nil,
		/* 11 stmtBreak <- <('b' 'r' 'e' 'a' 'k' sp Action1)> */
		nil,
		/* 12 stmtContinue <- <('c' 'o' 'n' 't' 'i' 'n' 'u' 'e' sp Action2)> */
		nil,
		/* 13 stmtReturn <- <(('r' 'e' 't' 'u' 'r' 'n' sp1 exprRoot Action3) / ('r' 'e' 't' 'u' 'r' 'n' sp Action4))> */
		nil,
		/* 14 stmtWhile <- <('w' 'h' 'i' 'l' 'e' Action5 sp1 exprRoot Action6 block Action7)> */
		nil,
		/* 15 block <- <((('{' sp '}') / ('{' sp stmtRoot '}')) sp)> */
		func() bool {
			position238, tokenIndex238 := position, tokenIndex
			{
				position239 := position
				{
					position240, tokenIndex240 := position, tokenIndex
					if buffer[position] != rune('{') {
						goto l241
					}
					position++
					if !_rules[rulesp]() {
						goto l241
					}
					if buffer[position] != rune('}') {
						goto l241
					}
					position++
					goto l240
				l241:
					position, tokenIndex = position240, tokenIndex240
					if buffer[position] != rune('{') {
						goto l238
					}
					position++
					if !_rules[rulesp]() {
						goto l238
					}
					if !_rules[rulestmtRoot]() {
						goto l238
					}
					if buffer[position] != rune('}') {
						goto l238
					}
					position++
				}
			l240:
				if !_rules[rulesp]() {
					goto l238
				}
				add(ruleblock, position239)
			}
			return true
		l238:
			position, tokenIndex = position238, tokenIndex238
			return false
		},
		/* 16 stmtElse <- <('e' 'l' 's' 'e' ((sp block) / (sp1 stmtIf)))> */
		nil,
		/* 17 stmtIf <- <('i' 'f' sp1 exprRoot Action8 block Action9 stmtElse? Action10)> */
		func() bool {
			position243, tokenIndex243 := position, tokenIndex
			{
				position244 := position
				if buffer[position] != rune('i') {
					goto l243
				}
				position++
				if buffer[position] != rune('f') {
					goto l243
				}
				position++
				if !_rules[rulesp1]() {
					goto l243
				}
				if !_rules[ruleexprRoot]() {
					goto l243
				}
				{
					add(ruleAction8, position)
				}
				if !_rules[ruleblock]() {
					goto l243
				}
				{
					add(ruleAction9, position)
				}
				{
					position247, tokenIndex247 := position, tokenIndex
					{
						position249 := position
						if buffer[position] != rune('e') {
							goto l247
						}
						position++
						if buffer[position] != rune('l') {
							goto l247
						}
						position++
						if buffer[position] != rune('s') {
							goto l247
						}
						position++
						if buffer[position] != rune('e') {
							goto l247
						}
						position++
						{
							position250, tokenIndex250 := position, tokenIndex
							if !_rules[rulesp]() {
								goto l251
							}
							if !_rules[ruleblock]() {
								goto l251
							}
							goto l250
						l251:
							position, tokenIndex = position250, tokenIndex250
							if !_rules[rulesp1]() {
								goto l247
							}
							if !_rules[rulestmtIf]() {
								goto l247
							}
						}
					l250:
						add(rulestmtElse, position249)
					}
					goto l248
				l247:
					position, tokenIndex = position247, tokenIndex247
				}
			l248:
				{
					add(ruleAction10, position)
				}
				add(rulestmtIf, position244)
			}
			return true
		l243:
			position, tokenIndex = position243, tokenIndex243
			return false
		},
		/* 18 func_def_params <- <(('(' sp ')' sp Action11) / ('(' sp Action12 identifier sp Action13 (',' sp identifier sp Action14 Action15)* ')' sp))> */
		func() bool {
			position253, tokenIndex253 := position, tokenIndex
			{
				position254 := position
				{
					position255, tokenIndex255 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l256
					}
					position++
					if !_rules[rulesp]() {
						goto l256
					}
					if buffer[position] != rune(')') {
						goto l256
					}
					position++
					if !_rules[rulesp]() {
						goto l256
					}
					{
						add(ruleAction11, position)
					}
					goto l255
				l256:
					position, tokenIndex = position255, tokenIndex255
					if buffer[position] != rune('(') {
						goto l253
					}
					position++
					if !_rules[rulesp]() {
						goto l253
					}
					{
						add(ruleAction12, position)
					}
					if !_rules[ruleidentifier]() {
						goto l253
					}
					if !_rules[rulesp]() {
						goto l253
					}
					{
						add(ruleAction13, position)
					}
				l260:
					{
						position261, tokenIndex261 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l261
						}
						position++
						if !_rules[rulesp]() {
							goto l261
						}
						if !_rules[ruleidentifier]() {
							goto l261
						}
						if !_rules[rulesp]() {
							goto l261
						}
						{
							add(ruleAction14, position)
						}
						{
							add(ruleAction15, position)
						}
						goto l260
					l261:
						position, tokenIndex = position261, tokenIndex261
					}
					if buffer[position] != rune(')') {
						goto l253
					}
					position++
					if !_rules[rulesp]() {
						goto l253
					}
				}
			l255:
				add(rulefunc_def_params, position254)
			}
			return true
		l253:
			position, tokenIndex = position253, tokenIndex253
			return false
		},
		/* 19 stmtFunc <- <('f' 'u' 'n' 'c' sp1 identifier sp Action16 func_def_params '{' sp Action17 <stmtRoot?> '}' sp Action18)> */
		nil,
		/* 20 stmtAssign <- <((identifier sp Action19 '=' sp exprRoot Action20) / ('&' identifier sp Action21 '=' sp Action22 <exprRoot> Action23) / ('&' identifier sp Action24 '.' identifier sp Action25 sp '=' sp exprRoot Action26) / ('t' 'h' 'i' 's' sp '.' sp identifier sp Action27 '=' sp exprRoot Action28) / (identifier sp Action29 '.' sp identifier sp Action30 '=' sp exprRoot Action31) / (exprRoot '[' sp exprRoot ']' sp '=' sp exprRoot Action32) / (exprRoot _sliceSuffix '=' sp exprRoot Action33))> */
		nil,
		/* 21 exprRoot <- <(exprSlice sp)> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				{
					position268 := position
					{
						position269, tokenIndex269 := position, tokenIndex
						if !_rules[ruleexprTernary]() {
							goto l270
						}
						if !_rules[rule_sliceSuffix]() {
							goto l270
						}
						{
							position271, tokenIndex271 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l271
							}
							position++
							goto l270
						l271:
							position, tokenIndex = position271, tokenIndex271
						}
						{
							add(ruleAction38, position)
						}
						goto l269
					l270:
						position, tokenIndex = position269, tokenIndex269
						if !_rules[ruleexprTernary]() {
							goto l266
						}
					}
				l269:
					add(ruleexprSlice, position268)
				}
				if !_rules[rulesp]() {
					goto l266
				}
				add(ruleexprRoot, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 22 _step <- <((':' sp (exprRoot / (sp Action34))) / (sp Action35))> */
		nil,
		/* 23 _sliceSuffix <- <('[' sp (exprRoot / (sp Action36)) ':' sp (exprRoot / (sp Action37)) _step ']' sp)> */
		func() bool {
			position274, tokenIndex274 := position, tokenIndex
			{
				position275 := position
				if buffer[position] != rune('[') {
					goto l274
				}
				position++
				if !_rules[rulesp]() {
					goto l274
				}
				{
					position276, tokenIndex276 := position, tokenIndex
					if !_rules[ruleexprRoot]() {
						goto l277
					}
					goto l276
				l277:
					position, tokenIndex = position276, tokenIndex276
					if !_rules[rulesp]() {
						goto l274
					}
					{
						add(ruleAction36, position)
					}
				}
			l276:
				if buffer[position] != rune(':') {
					goto l274
				}
				position++
				if !_rules[rulesp]() {
					goto l274
				}
				{
					position279, tokenIndex279 := position, tokenIndex
					if !_rules[ruleexprRoot]() {
						goto l280
					}
					goto l279
				l280:
					position, tokenIndex = position279, tokenIndex279
					if !_rules[rulesp]() {
						goto l274
					}
					{
						add(ruleAction37, position)
					}
				}
			l279:
				{
					position282 := position
					{
						position283, tokenIndex283 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l284
						}
						position++
						if !_rules[rulesp]() {
							goto l284
						}
						{
							position285, tokenIndex285 := position, tokenIndex
							if !_rules[ruleexprRoot]() {
								goto l286
							}
							goto l285
						l286:
							position, tokenIndex = position285, tokenIndex285
							if !_rules[rulesp]() {
								goto l284
							}
							{
								add(ruleAction34, position)
							}
						}
					l285:
						goto l283
					l284:
						position, tokenIndex = position283, tokenIndex283
						if !_rules[rulesp]() {
							goto l274
						}
						{
							add(ruleAction35, position)
						}
					}
				l283:
					add(rule_step, position282)
				}
				if buffer[position] != rune(']') {
					goto l274
				}
				position++
				if !_rules[rulesp]() {
					goto l274
				}
				add(rule_sliceSuffix, position275)
			}
			return true
		l274:
			position, tokenIndex = position274, tokenIndex274
			return false
		},
		/* 24 exprSlice <- <((exprTernary _sliceSuffix !'=' Action38) / exprTernary)> */
		nil,
		/* 25 exprValueIfExists <- <(exprLogicOr sp '?' sp Action39 exprLogicOr sp Action40)> */
		func() bool {
			position290, tokenIndex290 := position, tokenIndex
			{
				position291 := position
				if !_rules[ruleexprLogicOr]() {
					goto l290
				}
				if !_rules[rulesp]() {
					goto l290
				}
				if buffer[position] != rune('?') {
					goto l290
				}
				position++
				if !_rules[rulesp]() {
					goto l290
				}
				{
					add(ruleAction39, position)
				}
				if !_rules[ruleexprLogicOr]() {
					goto l290
				}
				if !_rules[rulesp]() {
					goto l290
				}
				{
					add(ruleAction40, position)
				}
				add(ruleexprValueIfExists, position291)
			}
			return true
		l290:
			position, tokenIndex = position290, tokenIndex290
			return false
		},
		/* 26 exprTernary <- <((exprLogicOr sp '?' sp Action41 exprLogicOr sp ':' sp Action42 exprLogicOr sp Action43) / (exprValueIfExists Action44 (',' sp exprValueIfExists Action45)* Action46) / exprLogicOr)> */
		func() bool {
			position294, tokenIndex294 := position, tokenIndex
			{
				position295 := position
				{
					position296, tokenIndex296 := position, tokenIndex
					if !_rules[ruleexprLogicOr]() {
						goto l297
					}
					if !_rules[rulesp]() {
						goto l297
					}
					if buffer[position] != rune('?') {
						goto l297
					}
					position++
					if !_rules[rulesp]() {
						goto l297
					}
					{
						add(ruleAction41, position)
					}
					if !_rules[ruleexprLogicOr]() {
						goto l297
					}
					if !_rules[rulesp]() {
						goto l297
					}
					if buffer[position] != rune(':') {
						goto l297
					}
					position++
					if !_rules[rulesp]() {
						goto l297
					}
					{
						add(ruleAction42, position)
					}
					if !_rules[ruleexprLogicOr]() {
						goto l297
					}
					if !_rules[rulesp]() {
						goto l297
					}
					{
						add(ruleAction43, position)
					}
					goto l296
				l297:
					position, tokenIndex = position296, tokenIndex296
					if !_rules[ruleexprValueIfExists]() {
						goto l301
					}
					{
						add(ruleAction44, position)
					}
				l303:
					{
						position304, tokenIndex304 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l304
						}
						position++
						if !_rules[rulesp]() {
							goto l304
						}
						if !_rules[ruleexprValueIfExists]() {
							goto l304
						}
						{
							add(ruleAction45, position)
						}
						goto l303
					l304:
						position, tokenIndex = position304, tokenIndex304
					}
					{
						add(ruleAction46, position)
					}
					goto l296
				l301:
					position, tokenIndex = position296, tokenIndex296
					if !_rules[ruleexprLogicOr]() {
						goto l294
					}
				}
			l296:
				add(ruleexprTernary, position295)
			}
			return true
		l294:
			position, tokenIndex = position294, tokenIndex294
			return false
		},
		/* 27 exprLogicOr <- <(exprLogicAnd sp (logicOr Action47 exprLogicAnd Action48 Action49)*)> */
		func() bool {
			position307, tokenIndex307 := position, tokenIndex
			{
				position308 := position
				if !_rules[ruleexprLogicAnd]() {
					goto l307
				}
				if !_rules[rulesp]() {
					goto l307
				}
			l309:
				{
					position310, tokenIndex310 := position, tokenIndex
					{
						position311 := position
						if buffer[position] != rune('|') {
							goto l310
						}
						position++
						if buffer[position] != rune('|') {
							goto l310
						}
						position++
						if !_rules[rulesp]() {
							goto l310
						}
						add(rulelogicOr, position311)
					}
					{
						add(ruleAction47, position)
					}
					if !_rules[ruleexprLogicAnd]() {
						goto l310
					}
					{
						add(ruleAction48, position)
					}
					{
						add(ruleAction49, position)
					}
					goto l309
				l310:
					position, tokenIndex = position310, tokenIndex310
				}
				add(ruleexprLogicOr, position308)
			}
			return true
		l307:
			position, tokenIndex = position307, tokenIndex307
			return false
		},
		/* 28 exprLogicAnd <- <(exprBitwiseOr sp (logicAnd exprBitwiseOr Action50)*)> */
		func() bool {
			position315, tokenIndex315 := position, tokenIndex
			{
				position316 := position
				if !_rules[ruleexprBitwiseOr]() {
					goto l315
				}
				if !_rules[rulesp]() {
					goto l315
				}
			l317:
				{
					position318, tokenIndex318 := position, tokenIndex
					{
						position319 := position
						if buffer[position] != rune('&') {
							goto l318
						}
						position++
						if buffer[position] != rune('&') {
							goto l318
						}
						position++
						if !_rules[rulesp]() {
							goto l318
						}
						add(rulelogicAnd, position319)
					}
					if !_rules[ruleexprBitwiseOr]() {
						goto l318
					}
					{
						add(ruleAction50, position)
					}
					goto l317
				l318:
					position, tokenIndex = position318, tokenIndex318
				}
				add(ruleexprLogicAnd, position316)
			}
			return true
		l315:
			position, tokenIndex = position315, tokenIndex315
			return false
		},
		/* 29 exprBitwiseOr <- <((&{p.Config.DisableBitwiseOp} exprCompare) / (exprBitwiseAnd sp (bitwiseOr exprBitwiseAnd Action51)*))> */
		func() bool {
			position321, tokenIndex321 := position, tokenIndex
			{
				position322 := position
				{
					position323, tokenIndex323 := position, tokenIndex
					if !(p.Config.DisableBitwiseOp) {
						goto l324
					}
					if !_rules[ruleexprCompare]() {
						goto l324
					}
					goto l323
				l324:
					position, tokenIndex = position323, tokenIndex323
					if !_rules[ruleexprBitwiseAnd]() {
						goto l321
					}
					if !_rules[rulesp]() {
						goto l321
					}
				l325:
					{
						position326, tokenIndex326 := position, tokenIndex
						{
							position327 := position
							if buffer[position] != rune('|') {
								goto l326
							}
							position++
							if !_rules[rulesp]() {
								goto l326
							}
							add(rulebitwiseOr, position327)
						}
						if !_rules[ruleexprBitwiseAnd]() {
							goto l326
						}
						{
							add(ruleAction51, position)
						}
						goto l325
					l326:
						position, tokenIndex = position326, tokenIndex326
					}
				}
			l323:
				add(ruleexprBitwiseOr, position322)
			}
			return true
		l321:
			position, tokenIndex = position321, tokenIndex321
			return false
		},
		/* 30 exprBitwiseAnd <- <(exprCompare sp (bitwiseAnd exprCompare Action52)*)> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				if !_rules[ruleexprCompare]() {
					goto l329
				}
				if !_rules[rulesp]() {
					goto l329
				}
			l331:
				{
					position332, tokenIndex332 := position, tokenIndex
					{
						position333 := position
						if buffer[position] != rune('&') {
							goto l332
						}
						position++
						if !_rules[rulesp]() {
							goto l332
						}
						add(rulebitwiseAnd, position333)
					}
					if !_rules[ruleexprCompare]() {
						goto l332
					}
					{
						add(ruleAction52, position)
					}
					goto l331
				l332:
					position, tokenIndex = position332, tokenIndex332
				}
				add(ruleexprBitwiseAnd, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 31 exprCompare <- <(exprAdditive sp ((lt exprAdditive Action53) / (ge exprAdditive Action57) / ((&('>') (gt exprAdditive Action58)) | (&('!') (ne exprAdditive Action56)) | (&('=') (eq exprAdditive Action55)) | (&('<') (le exprAdditive Action54))))*)> */
		func() bool {
			position335, tokenIndex335 := position, tokenIndex
			{
				position336 := position
				if !_rules[ruleexprAdditive]() {
					goto l335
				}
				if !_rules[rulesp]() {
					goto l335
				}
			l337:
				{
					position338, tokenIndex338 := position, tokenIndex
					{
						position339, tokenIndex339 := position, tokenIndex
						{
							position341 := position
							if buffer[position] != rune('<') {
								goto l340
							}
							position++
							if !_rules[rulesp]() {
								goto l340
							}
							add(rulelt, position341)
						}
						if !_rules[ruleexprAdditive]() {
							goto l340
						}
						{
							add(ruleAction53, position)
						}
						goto l339
					l340:
						position, tokenIndex = position339, tokenIndex339
						{
							position344 := position
							if buffer[position] != rune('>') {
								goto l343
							}
							position++
							if buffer[position] != rune('=') {
								goto l343
							}
							position++
							if !_rules[rulesp]() {
								goto l343
							}
							add(rulege, position344)
						}
						if !_rules[ruleexprAdditive]() {
							goto l343
						}
						{
							add(ruleAction57, position)
						}
						goto l339
					l343:
						position, tokenIndex = position339, tokenIndex339
						{
							switch buffer[position] {
							case '>':
								{
									position347 := position
									if buffer[position] != rune('>') {
										goto l338
									}
									position++
									if !_rules[rulesp]() {
										goto l338
									}
									add(rulegt, position347)
								}
								if !_rules[ruleexprAdditive]() {
									goto l338
								}
								{
									add(ruleAction58, position)
								}
							case '!':
								{
									position349 := position
									if buffer[position] != rune('!') {
										goto l338
									}
									position++
									if buffer[position] != rune('=') {
										goto l338
									}
									position++
									if !_rules[rulesp]() {
										goto l338
									}
									add(rulene, position349)
								}
								if !_rules[ruleexprAdditive]() {
									goto l338
								}
								{
									add(ruleAction56, position)
								}
							case '=':
								{
									position351 := position
									if buffer[position] != rune('=') {
										goto l338
									}
									position++
									if buffer[position] != rune('=') {
										goto l338
									}
									position++
									if !_rules[rulesp]() {
										goto l338
									}
									add(ruleeq, position351)
								}
								if !_rules[ruleexprAdditive]() {
									goto l338
								}
								{
									add(ruleAction55, position)
								}
							default:
								{
									position353 := position
									if buffer[position] != rune('<') {
										goto l338
									}
									position++
									if buffer[position] != rune('=') {
										goto l338
									}
									position++
									if !_rules[rulesp]() {
										goto l338
									}
									add(rulele, position353)
								}
								if !_rules[ruleexprAdditive]() {
									goto l338
								}
								{
									add(ruleAction54, position)
								}
							}
						}

					}
				l339:
					goto l337
				l338:
					position, tokenIndex = position338, tokenIndex338
				}
				add(ruleexprCompare, position336)
			}
			return true
		l335:
			position, tokenIndex = position335, tokenIndex335
			return false
		},
		/* 32 exprAdditive <- <(exprMultiplicative sp ((add exprMultiplicative Action59) / (minus exprMultiplicative Action60))*)> */
		func() bool {
			position355, tokenIndex355 := position, tokenIndex
			{
				position356 := position
				if !_rules[ruleexprMultiplicative]() {
					goto l355
				}
				if !_rules[rulesp]() {
					goto l355
				}
			l357:
				{
					position358, tokenIndex358 := position, tokenIndex
					{
						position359, tokenIndex359 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l360
						}
						if !_rules[ruleexprMultiplicative]() {
							goto l360
						}
						{
							add(ruleAction59, position)
						}
						goto l359
					l360:
						position, tokenIndex = position359, tokenIndex359
						if !_rules[ruleminus]() {
							goto l358
						}
						if !_rules[ruleexprMultiplicative]() {
							goto l358
						}
						{
							add(ruleAction60, position)
						}
					}
				l359:
					goto l357
				l358:
					position, tokenIndex = position358, tokenIndex358
				}
				add(ruleexprAdditive, position356)
			}
			return true
		l355:
			position, tokenIndex = position355, tokenIndex355
			return false
		},
		/* 33 exprMultiplicative <- <(exprNullCoalescing sp ((&('%') (modulus exprExp Action63)) | (&('/') (divide exprExp Action62)) | (&('*') (multiply exprExp Action61)))*)> */
		func() bool {
			position363, tokenIndex363 := position, tokenIndex
			{
				position364 := position
				{
					position365 := position
					if !_rules[ruleexprExp]() {
						goto l363
					}
					if !_rules[rulesp]() {
						goto l363
					}
				l366:
					{
						position367, tokenIndex367 := position, tokenIndex
						{
							position368 := position
							if buffer[position] != rune('?') {
								goto l367
							}
							position++
							if buffer[position] != rune('?') {
								goto l367
							}
							position++
							if !_rules[rulesp]() {
								goto l367
							}
							add(rulenullCoalescing, position368)
						}
						if !_rules[ruleexprExp]() {
							goto l367
						}
						{
							add(ruleAction64, position)
						}
						goto l366
					l367:
						position, tokenIndex = position367, tokenIndex367
					}
					add(ruleexprNullCoalescing, position365)
				}
				if !_rules[rulesp]() {
					goto l363
				}
			l370:
				{
					position371, tokenIndex371 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position373 := position
								if buffer[position] != rune('%') {
									goto l371
								}
								position++
								if !_rules[rulesp]() {
									goto l371
								}
								add(rulemodulus, position373)
							}
							if !_rules[ruleexprExp]() {
								goto l371
							}
							{
								add(ruleAction63, position)
							}
						case '/':
							{
								position375 := position
								{
									position376, tokenIndex376 := position, tokenIndex
									if buffer[position] != rune('/') {
										goto l377
									}
									position++
									goto l376
								l377:
									position, tokenIndex = position376, tokenIndex376
									if buffer[position] != rune('／') {
										goto l371
									}
									position++
								}
							l376:
								if !_rules[rulesp]() {
									goto l371
								}
								add(ruledivide, position375)
							}
							if !_rules[ruleexprExp]() {
								goto l371
							}
							{
								add(ruleAction62, position)
							}
						default:
							{
								position379 := position
								{
									position380, tokenIndex380 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l381
									}
									position++
									goto l380
								l381:
									position, tokenIndex = position380, tokenIndex380
									if buffer[position] != rune('＊') {
										goto l371
									}
									position++
								}
							l380:
								if !_rules[rulesp]() {
									goto l371
								}
								add(rulemultiply, position379)
							}
							if !_rules[ruleexprExp]() {
								goto l371
							}
							{
								add(ruleAction61, position)
							}
						}
					}

					goto l370
				l371:
					position, tokenIndex = position371, tokenIndex371
				}
				add(ruleexprMultiplicative, position364)
			}
			return true
		l363:
			position, tokenIndex = position363, tokenIndex363
			return false
		},
		/* 34 exprNullCoalescing <- <(exprExp sp (nullCoalescing exprExp Action64)*)> */
		nil,
		/* 35 exprExp <- <(exprUnaryNeg sp (exponentiation exprUnaryNeg Action65)*)> */
		func() bool {
			position384, tokenIndex384 := position, tokenIndex
			{
				position385 := position
				if !_rules[ruleexprUnaryNeg]() {
					goto l384
				}
				if !_rules[rulesp]() {
					goto l384
				}
			l386:
				{
					position387, tokenIndex387 := position, tokenIndex
					{
						position388 := position
						{
							position389, tokenIndex389 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l390
							}
							position++
							if !_rules[rulesp]() {
								goto l390
							}
							goto l389
						l390:
							position, tokenIndex = position389, tokenIndex389
							if buffer[position] != rune('*') {
								goto l387
							}
							position++
							if buffer[position] != rune('*') {
								goto l387
							}
							position++
							if !_rules[rulesp]() {
								goto l387
							}
						}
					l389:
						add(ruleexponentiation, position388)
					}
					if !_rules[ruleexprUnaryNeg]() {
						goto l387
					}
					{
						add(ruleAction65, position)
					}
					goto l386
				l387:
					position, tokenIndex = position387, tokenIndex387
				}
				add(ruleexprExp, position385)
			}
			return true
		l384:
			position, tokenIndex = position384, tokenIndex384
			return false
		},
		/* 36 exprUnaryNeg <- <((minus exprRoot Action66) / exprUnaryPos)> */
		func() bool {
			position392, tokenIndex392 := position, tokenIndex
			{
				position393 := position
				{
					position394, tokenIndex394 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l395
					}
					if !_rules[ruleexprRoot]() {
						goto l395
					}
					{
						add(ruleAction66, position)
					}
					goto l394
				l395:
					position, tokenIndex = position394, tokenIndex394
					{
						position397 := position
						{
							position398, tokenIndex398 := position, tokenIndex
							if !_rules[ruleadd]() {
								goto l399
							}
							if !_rules[ruleexprRoot]() {
								goto l399
							}
							{
								add(ruleAction67, position)
							}
							goto l398
						l399:
							position, tokenIndex = position398, tokenIndex398
							{
								position401 := position
								{
									position402, tokenIndex402 := position, tokenIndex
									{
										position404, tokenIndex404 := position, tokenIndex
										{
											position405 := position
											if !_rules[rulenos]() {
												goto l403
											}
											{
												position406, tokenIndex406 := position, tokenIndex
												if buffer[position] != rune('d') {
													goto l407
												}
												position++
												goto l406
											l407:
												position, tokenIndex = position406, tokenIndex406
												if buffer[position] != rune('D') {
													goto l403
												}
												position++
											}
										l406:
											if !_rules[rulenos]() {
												goto l403
											}
											add(rule_diceType1, position405)
										}
										position, tokenIndex = position404, tokenIndex404
									}
									if !_rules[ruledetailStart]() {
										goto l403
									}
									if !_rules[rulenos]() {
										goto l403
									}
									if !_rules[rule_diceExpr1]() {
										goto l403
									}
									if !_rules[ruledetailEnd]() {
										goto l403
									}
									{
										add(ruleAction93, position)
									}
								l409:
									{
										position410, tokenIndex410 := position, tokenIndex
										if !_rules[rule_diceExprX]() {
											goto l410
										}
										goto l409
									l410:
										position, tokenIndex = position410, tokenIndex410
									}
									goto l402
								l403:
									position, tokenIndex = position402, tokenIndex402
									{
										position412, tokenIndex412 := position, tokenIndex
										if !_rules[rule_diceType2]() {
											goto l411
										}
										position, tokenIndex = position412, tokenIndex412
									}
									if !_rules[ruledetailStart]() {
										goto l411
									}
									{
										position413 := position
										{
											position414, tokenIndex414 := position, tokenIndex
											if buffer[position] != rune('d') {
												goto l415
											}
											position++
											goto l414
										l415:
											position, tokenIndex = position414, tokenIndex414
											if buffer[position] != rune('D') {
												goto l411
											}
											position++
										}
									l414:
										{
											add(ruleAction83, position)
										}
										if !_rules[rulenos]() {
											goto l411
										}
										{
											position417, tokenIndex417 := position, tokenIndex
											{
												position419, tokenIndex419 := position, tokenIndex
												if !_rules[rule_dicePearMod]() {
													goto l420
												}
												goto l419
											l420:
												position, tokenIndex = position419, tokenIndex419
												if !_rules[rule_diceMod]() {
													goto l417
												}
											}
										l419:
											goto l418
										l417:
											position, tokenIndex = position417, tokenIndex417
										}
									l418:
										{
											position421, tokenIndex421 := position, tokenIndex
											if !_rules[rule_diceMod2]() {
												goto l421
											}
											goto l422
										l421:
											position, tokenIndex = position421, tokenIndex421
										}
									l422:
										add(rule_diceExpr2, position413)
									}
									if !_rules[ruledetailEnd]() {
										goto l411
									}
									{
										add(ruleAction94, position)
									}
								l424:
									{
										position425, tokenIndex425 := position, tokenIndex
										if !_rules[rule_diceExprX]() {
											goto l425
										}
										goto l424
									l425:
										position, tokenIndex = position425, tokenIndex425
									}
									goto l402
								l411:
									position, tokenIndex = position402, tokenIndex402
									if !(!p.Config.DisableNDice) {
										goto l426
									}
									{
										position427, tokenIndex427 := position, tokenIndex
										{
											position428 := position
											if !_rules[rulenos]() {
												goto l426
											}
											{
												position429, tokenIndex429 := position, tokenIndex
												if buffer[position] != rune('d') {
													goto l430
												}
												position++
												goto l429
											l430:
												position, tokenIndex = position429, tokenIndex429
												if buffer[position] != rune('D') {
													goto l426
												}
												position++
											}
										l429:
											add(rule_diceType3, position428)
										}
										position, tokenIndex = position427, tokenIndex427
									}
									if !_rules[ruledetailStart]() {
										goto l426
									}
									if !_rules[rulenos]() {
										goto l426
									}
									if !_rules[rule_diceExpr3]() {
										goto l426
									}
									if !_rules[ruledetailEnd]() {
										goto l426
									}
									{
										add(ruleAction95, position)
									}
								l432:
									{
										position433, tokenIndex433 := position, tokenIndex
										if !_rules[rule_diceExprX]() {
											goto l433
										}
										goto l432
									l433:
										position, tokenIndex = position433, tokenIndex433
									}
									goto l402
								l426:
									position, tokenIndex = position402, tokenIndex402
									if !(!p.Config.DisableNDice) {
										goto l434
									}
									{
										position435, tokenIndex435 := position, tokenIndex
										{
											position436 := position
											{
												position437, tokenIndex437 := position, tokenIndex
												if buffer[position] != rune('d') {
													goto l438
												}
												position++
												goto l437
											l438:
												position, tokenIndex = position437, tokenIndex437
												if buffer[position] != rune('D') {
													goto l434
												}
												position++
											}
										l437:
											add(rule_diceType4, position436)
										}
										position, tokenIndex = position435, tokenIndex435
									}
									if !_rules[ruledetailStart]() {
										goto l434
									}
									{
										add(ruleAction96, position)
									}
									if !_rules[rule_diceExpr3]() {
										goto l434
									}
									if !_rules[ruledetailEnd]() {
										goto l434
									}
									{
										add(ruleAction97, position)
									}
								l441:
									{
										position442, tokenIndex442 := position, tokenIndex
										if !_rules[rule_diceExprX]() {
											goto l442
										}
										goto l441
									l442:
										position, tokenIndex = position442, tokenIndex442
									}
									goto l402
								l434:
									position, tokenIndex = position402, tokenIndex402
									if !(p.Config.EnableDiceCoC) {
										goto l443
									}
									{
										position444, tokenIndex444 := position, tokenIndex
										{
											position445 := position
											{
												switch buffer[position] {
												case 'B':
													if buffer[position] != rune('B') {
														goto l443
													}
													position++
												case 'b':
													if buffer[position] != rune('b') {
														goto l443
													}
													position++
												case 'P':
													if buffer[position] != rune('P') {
														goto l443
													}
													position++
												default:
													if buffer[position] != rune('p') {
														goto l443
													}
													position++
												}
											}

											{
												position447, tokenIndex447 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l448
												}
												{
													position449, tokenIndex449 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l449
													}
													goto l448
												l449:
													position, tokenIndex = position449, tokenIndex449
												}
												goto l447
											l448:
												position, tokenIndex = position447, tokenIndex447
												{
													position450, tokenIndex450 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l450
													}
													goto l443
												l450:
													position, tokenIndex = position450, tokenIndex450
												}
											}
										l447:
											add(rule_cocDiceType, position445)
										}
										position, tokenIndex = position444, tokenIndex444
									}
									if !_rules[ruledetailStart]() {
										goto l443
									}
									{
										position451, tokenIndex451 := position, tokenIndex
										{
											position453 := position
											{
												position454, tokenIndex454 := position, tokenIndex
												if buffer[position] != rune('b') {
													goto l455
												}
												position++
												goto l454
											l455:
												position, tokenIndex = position454, tokenIndex454
												if buffer[position] != rune('B') {
													goto l452
												}
												position++
											}
										l454:
											{
												position456, tokenIndex456 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l457
												}
												{
													position458, tokenIndex458 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l458
													}
													goto l457
												l458:
													position, tokenIndex = position458, tokenIndex458
												}
												goto l456
											l457:
												position, tokenIndex = position456, tokenIndex456
												{
													position459, tokenIndex459 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l459
													}
													goto l452
												l459:
													position, tokenIndex = position459, tokenIndex459
												}
												{
													add(ruleAction89, position)
												}
											}
										l456:
											if !_rules[ruledetailEnd]() {
												goto l452
											}
											{
												add(ruleAction90, position)
											}
											add(rule_diceCocBonus, position453)
										}
										goto l451
									l452:
										position, tokenIndex = position451, tokenIndex451
										{
											position462 := position
											{
												position463, tokenIndex463 := position, tokenIndex
												if buffer[position] != rune('p') {
													goto l464
												}
												position++
												goto l463
											l464:
												position, tokenIndex = position463, tokenIndex463
												if buffer[position] != rune('P') {
													goto l443
												}
												position++
											}
										l463:
											{
												position465, tokenIndex465 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l466
												}
												{
													position467, tokenIndex467 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l467
													}
													goto l466
												l467:
													position, tokenIndex = position467, tokenIndex467
												}
												goto l465
											l466:
												position, tokenIndex = position465, tokenIndex465
												{
													position468, tokenIndex468 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l468
													}
													goto l443
												l468:
													position, tokenIndex = position468, tokenIndex468
												}
												{
													add(ruleAction91, position)
												}
											}
										l465:
											if !_rules[ruledetailEnd]() {
												goto l443
											}
											{
												add(ruleAction92, position)
											}
											add(rule_diceCocPenalty, position462)
										}
									}
								l451:
									goto l402
								l443:
									position, tokenIndex = position402, tokenIndex402
									if !(p.Config.EnableDiceWoD) {
										goto l471
									}
									{
										position472, tokenIndex472 := position, tokenIndex
										{
											position473 := position
											{
												position474, tokenIndex474 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l475
												}
												if !_rules[rule_wodTypeMain]() {
													goto l475
												}
												goto l474
											l475:
												position, tokenIndex = position474, tokenIndex474
												if !_rules[rule_wodTypeMain]() {
													goto l471
												}
												{
													position476, tokenIndex476 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l476
													}
													goto l471
												l476:
													position, tokenIndex = position476, tokenIndex476
												}
											}
										l474:
											add(rule_wodDiceType, position473)
										}
										position, tokenIndex = position472, tokenIndex472
									}
									if !_rules[ruledetailStart]() {
										goto l471
									}
									{
										add(ruleAction98, position)
									}
									{
										position478, tokenIndex478 := position, tokenIndex
										if !_rules[rulenos]() {
											goto l479
										}
										{
											add(ruleAction99, position)
										}
										if !_rules[rule_wodMain]() {
											goto l479
										}
										goto l478
									l479:
										position, tokenIndex = position478, tokenIndex478
										if !_rules[rule_wodMain]() {
											goto l471
										}
										{
											position481, tokenIndex481 := position, tokenIndex
											if !_rules[ruleidentifier_ch]() {
												goto l481
											}
											goto l471
										l481:
											position, tokenIndex = position481, tokenIndex481
										}
									}
								l478:
									if !_rules[ruledetailEnd]() {
										goto l471
									}
									{
										add(ruleAction100, position)
									}
									goto l402
								l471:
									position, tokenIndex = position402, tokenIndex402
									if !(p.Config.EnableDiceDoubleCross) {
										goto l483
									}
									{
										position484, tokenIndex484 := position, tokenIndex
										{
											position485 := position
											if !_rules[rulenos]() {
												goto l483
											}
											{
												position486, tokenIndex486 := position, tokenIndex
												if buffer[position] != rune('c') {
													goto l487
												}
												position++
												goto l486
											l487:
												position, tokenIndex = position486, tokenIndex486
												if buffer[position] != rune('C') {
													goto l483
												}
												position++
											}
										l486:
											if !_rules[rulenos]() {
												goto l483
											}
										l488:
											{
												position489, tokenIndex489 := position, tokenIndex
												{
													position490, tokenIndex490 := position, tokenIndex
													if buffer[position] != rune('m') {
														goto l491
													}
													position++
													goto l490
												l491:
													position, tokenIndex = position490, tokenIndex490
													if buffer[position] != rune('M') {
														goto l489
													}
													position++
												}
											l490:
												if !_rules[rulenos]() {
													goto l489
												}
												goto l488
											l489:
												position, tokenIndex = position489, tokenIndex489
											}
											add(rule_dcDiceType, position485)
										}
										position, tokenIndex = position484, tokenIndex484
									}
									if !_rules[ruledetailStart]() {
										goto l483
									}
									{
										add(ruleAction101, position)
									}
									if !_rules[rulenos]() {
										goto l483
									}
									{
										add(ruleAction102, position)
									}
									{
										position494, tokenIndex494 := position, tokenIndex
										if buffer[position] != rune('c') {
											goto l495
										}
										position++
										goto l494
									l495:
										position, tokenIndex = position494, tokenIndex494
										if buffer[position] != rune('C') {
											goto l483
										}
										position++
									}
								l494:
									if !_rules[rulenos]() {
										goto l483
									}
								l496:
									{
										position497, tokenIndex497 := position, tokenIndex
										{
											position498, tokenIndex498 := position, tokenIndex
											if buffer[position] != rune('m') {
												goto l499
											}
											position++
											goto l498
										l499:
											position, tokenIndex = position498, tokenIndex498
											if buffer[position] != rune('M') {
												goto l497
											}
											position++
										}
									l498:
										if !_rules[rulenos]() {
											goto l497
										}
										{
											add(ruleAction103, position)
										}
										goto l496
									l497:
										position, tokenIndex = position497, tokenIndex497
									}
									if !_rules[ruledetailEnd]() {
										goto l483
									}
									{
										add(ruleAction104, position)
									}
									goto l402
								l483:
									position, tokenIndex = position402, tokenIndex402
									if !(p.Config.EnableDiceFate) {
										goto l502
									}
									{
										position503, tokenIndex503 := position, tokenIndex
										{
											position504 := position
											{
												position505, tokenIndex505 := position, tokenIndex
												if buffer[position] != rune('f') {
													goto l506
												}
												position++
												goto l505
											l506:
												position, tokenIndex = position505, tokenIndex505
												if buffer[position] != rune('F') {
													goto l502
												}
												position++
											}
										l505:
											{
												position507, tokenIndex507 := position, tokenIndex
												if !_rules[ruleidentifier_ch]() {
													goto l507
												}
												goto l502
											l507:
												position, tokenIndex = position507, tokenIndex507
											}
											add(rule_fateDiceType, position504)
										}
										position, tokenIndex = position503, tokenIndex503
									}
									if !_rules[ruledetailStart]() {
										goto l502
									}
									{
										position508, tokenIndex508 := position, tokenIndex
										if buffer[position] != rune('f') {
											goto l509
										}
										position++
										goto l508
									l509:
										position, tokenIndex = position508, tokenIndex508
										if buffer[position] != rune('F') {
											goto l502
										}
										position++
									}
								l508:
									{
										position510, tokenIndex510 := position, tokenIndex
										if !_rules[ruleidentifier_ch]() {
											goto l510
										}
										goto l502
									l510:
										position, tokenIndex = position510, tokenIndex510
									}
									if !_rules[ruledetailEnd]() {
										goto l502
									}
									{
										add(ruleAction105, position)
									}
									goto l402
								l502:
									position, tokenIndex = position402, tokenIndex402
									{
										position512 := position
										{
											position513, tokenIndex513 := position, tokenIndex
											if buffer[position] != rune('t') {
												goto l514
											}
											position++
											if buffer[position] != rune('r') {
												goto l514
											}
											position++
											if buffer[position] != rune('u') {
												goto l514
											}
											position++
											if buffer[position] != rune('e') {
												goto l514
											}
											position++
											if !_rules[rulesp]() {
												goto l514
											}
											{
												add(ruleAction121, position)
											}
											goto l513
										l514:
											position, tokenIndex = position513, tokenIndex513
											if buffer[position] != rune('f') {
												goto l516
											}
											position++
											if buffer[position] != rune('a') {
												goto l516
											}
											position++
											if buffer[position] != rune('l') {
												goto l516
											}
											position++
											if buffer[position] != rune('s') {
												goto l516
											}
											position++
											if buffer[position] != rune('e') {
												goto l516
											}
											position++
											if !_rules[rulesp]() {
												goto l516
											}
											{
												add(ruleAction122, position)
											}
											goto l513
										l516:
											position, tokenIndex = position513, tokenIndex513
											if buffer[position] != rune('u') {
												goto l518
											}
											position++
											if buffer[position] != rune('n') {
												goto l518
											}
											position++
											if buffer[position] != rune('d') {
												goto l518
											}
											position++
											if buffer[position] != rune('e') {
												goto l518
											}
											position++
											if buffer[position] != rune('f') {
												goto l518
											}
											position++
											if buffer[position] != rune('i') {
												goto l518
											}
											position++
											if buffer[position] != rune('n') {
												goto l518
											}
											position++
											if buffer[position] != rune('e') {
												goto l518
											}
											position++
											if buffer[position] != rune('d') {
												goto l518
											}
											position++
											if !_rules[rulesp]() {
												goto l518
											}
											{
												add(ruleAction123, position)
											}
											goto l513
										l518:
											position, tokenIndex = position513, tokenIndex513
											if buffer[position] != rune('t') {
												goto l520
											}
											position++
											if buffer[position] != rune('h') {
												goto l520
											}
											position++
											if buffer[position] != rune('i') {
												goto l520
											}
											position++
											if buffer[position] != rune('s') {
												goto l520
											}
											position++
											if !_rules[rulesp]() {
												goto l520
											}
											{
												add(ruleAction124, position)
											}
											if !_rules[ruleitem_get]() {
												goto l520
											}
											if !_rules[ruleattr_get]() {
												goto l520
											}
											goto l513
										l520:
											position, tokenIndex = position513, tokenIndex513
											if buffer[position] != rune('&') {
												goto l522
											}
											position++
											if !_rules[ruleidentifier]() {
												goto l522
											}
											if !_rules[rulesp]() {
												goto l522
											}
											{
												add(ruleAction125, position)
											}
											if !_rules[ruleattr_get]() {
												goto l522
											}
											goto l513
										l522:
											position, tokenIndex = position513, tokenIndex513
											_matched := false
											if !(_matched) {
												goto l524
											}
											if buffer[position] != rune('c') {
												goto l524
											}
											position++
											if buffer[position] != rune('a') {
												goto l524
											}
											position++
											if buffer[position] != rune('f') {
												goto l524
											}
											position++
											if buffer[position] != rune('e') {
												goto l524
											}
											position++
											if buffer[position] != rune('b') {
												goto l524
											}
											position++
											if buffer[position] != rune('a') {
												goto l524
											}
											position++
											if buffer[position] != rune('b') {
												goto l524
											}
											position++
											if buffer[position] != rune('e') {
												goto l524
											}
											position++
											goto l513
										l524:
											position, tokenIndex = position513, tokenIndex513
											if !_rules[rulefloat]() {
												goto l525
											}
											goto l513
										l525:
											position, tokenIndex = position513, tokenIndex513
											if !_rules[rulenumber]() {
												goto l526
											}
											goto l513
										l526:
											position, tokenIndex = position513, tokenIndex513
											{
												position528, tokenIndex528 := position, tokenIndex
												if !_rules[ruleidentifier]() {
													goto l527
												}
												if !_rules[rulesp]() {
													goto l527
												}
												position, tokenIndex = position528, tokenIndex528
											}
											if !_rules[ruledetailStart]() {
												goto l527
											}
											if !_rules[ruleidentifier]() {
												goto l527
											}
											if !_rules[ruledetailEnd]() {
												goto l527
											}
											if !_rules[rulespNoCR]() {
												goto l527
											}
											{
												add(ruleAction126, position)
											}
											{
												position530, tokenIndex530 := position, tokenIndex
												if !_rules[rulefunc_invoke]() {
													goto l530
												}
												goto l531
											l530:
												position, tokenIndex = position530, tokenIndex530
											}
										l531:
											if !_rules[ruleitem_get]() {
												goto l527
											}
											if !_rules[ruleattr_get]() {
												goto l527
											}
											goto l513
										l527:
											position, tokenIndex = position513, tokenIndex513
											if buffer[position] != rune('[') {
												goto l532
											}
											position++
											if !_rules[rulesp]() {
												goto l532
											}
											if buffer[position] != rune(']') {
												goto l532
											}
											position++
											if !_rules[rulesp]() {
												goto l532
											}
											{
												add(ruleAction127, position)
											}
											{
												position534, tokenIndex534 := position, tokenIndex
												if !_rules[rulearray_call]() {
													goto l534
												}
												goto l535
											l534:
												position, tokenIndex = position534, tokenIndex534
											}
										l535:
											if !_rules[ruleattr_get]() {
												goto l532
											}
											goto l513
										l532:
											position, tokenIndex = position513, tokenIndex513
											if buffer[position] != rune('[') {
												goto l536
											}
											position++
											if !_rules[rulesp]() {
												goto l536
											}
											if !_rules[ruleexprRoot]() {
												goto l536
											}
											if buffer[position] != rune('.') {
												goto l536
											}
											position++
											if buffer[position] != rune('.') {
												goto l536
											}
											position++
											if !_rules[rulesp]() {
												goto l536
											}
											if !_rules[ruleexprRoot]() {
												goto l536
											}
											if buffer[position] != rune(']') {
												goto l536
											}
											position++
											if !_rules[rulesp]() {
												goto l536
											}
											{
												add(ruleAction128, position)
											}
											{
												position538, tokenIndex538 := position, tokenIndex
												if !_rules[rulearray_call]() {
													goto l538
												}
												goto l539
											l538:
												position, tokenIndex = position538, tokenIndex538
											}
										l539:
											if !_rules[ruleattr_get]() {
												goto l536
											}
											goto l513
										l536:
											position, tokenIndex = position513, tokenIndex513
											if buffer[position] != rune('{') {
												goto l540
											}
											position++
											if !_rules[rulesp]() {
												goto l540
											}
											if buffer[position] != rune('}') {
												goto l540
											}
											position++
											if !_rules[rulesp]() {
												goto l540
											}
											{
												add(ruleAction132, position)
											}
											if !_rules[ruleitem_get]() {
												goto l540
											}
											if !_rules[ruleattr_get]() {
												goto l540
											}
											goto l513
										l540:
											position, tokenIndex = position513, tokenIndex513
											{
												switch buffer[position] {
												case 'f':
													if buffer[position] != rune('f') {
														goto l392
													}
													position++
													if buffer[position] != rune('u') {
														goto l392
													}
													position++
													if buffer[position] != rune('n') {
														goto l392
													}
													position++
													if buffer[position] != rune('c') {
														goto l392
													}
													position++
													if !_rules[rulesp]() {
														goto l392
													}
													if !_rules[rulefunc_def_params]() {
														goto l392
													}
													if buffer[position] != rune('{') {
														goto l392
													}
													position++
													if !_rules[rulesp]() {
														goto l392
													}
													{
														add(ruleAction135, position)
													}
													{
														position544 := position
														{
															position545, tokenIndex545 := position, tokenIndex
															if !_rules[rulestmtRoot]() {
																goto l545
															}
															goto l546
														l545:
															position, tokenIndex = position545, tokenIndex545
														}
													l546:
														add(rulePegText, position544)
													}
													if buffer[position] != rune('}') {
														goto l392
													}
													position++
													if !_rules[rulesp]() {
														goto l392
													}
													{
														add(ruleAction136, position)
													}
												case '{':
													if buffer[position] != rune('{') {
														goto l392
													}
													position++
													if !_rules[rulesp]() {
														goto l392
													}
													{
														add(ruleAction133, position)
													}
													if !_rules[ruledict_item]() {
														goto l392
													}
												l549:
													{
														position550, tokenIndex550 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l550
														}
														position++
														if !_rules[rulesp]() {
															goto l550
														}
														if !_rules[ruledict_item]() {
															goto l550
														}
														goto l549
													l550:
														position, tokenIndex = position550, tokenIndex550
													}
													{
														position551, tokenIndex551 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l551
														}
														position++
														goto l552
													l551:
														position, tokenIndex = position551, tokenIndex551
													}
												l552:
													if buffer[position] != rune('}') {
														goto l392
													}
													position++
													if !_rules[rulesp]() {
														goto l392
													}
													{
														add(ruleAction134, position)
													}
													if !_rules[ruleitem_get]() {
														goto l392
													}
													if !_rules[ruleattr_get]() {
														goto l392
													}
												case '[':
													if buffer[position] != rune('[') {
														goto l392
													}
													position++
													if !_rules[rulesp]() {
														goto l392
													}
													{
														add(ruleAction129, position)
													}
													if !_rules[ruleexprRoot]() {
														goto l392
													}
												l555:
													{
														position556, tokenIndex556 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l556
														}
														position++
														if !_rules[rulesp]() {
															goto l556
														}
														if !_rules[ruleexprRoot]() {
															goto l556
														}
														{
															add(ruleAction130, position)
														}
														goto l555
													l556:
														position, tokenIndex = position556, tokenIndex556
													}
													if buffer[position] != rune(']') {
														goto l392
													}
													position++
													if !_rules[rulesp]() {
														goto l392
													}
													{
														add(ruleAction131, position)
													}
													{
														position559, tokenIndex559 := position, tokenIndex
														if !_rules[rulearray_call]() {
															goto l559
														}
														goto l560
													l559:
														position, tokenIndex = position559, tokenIndex559
													}
												l560:
													if !_rules[ruleattr_get]() {
														goto l392
													}
												case '(':
													if !_rules[rulesub]() {
														goto l392
													}
													if !_rules[ruleitem_get]() {
														goto l392
													}
													if !_rules[ruleattr_get]() {
														goto l392
													}
												default:
													{
														position561 := position
														{
															position562, tokenIndex562 := position, tokenIndex
															if buffer[position] != rune('\'') {
																goto l563
															}
															position++
															if buffer[position] != rune('\'') {
																goto l563
															}
															position++
															{
																add(ruleAction143, position)
															}
															goto l562
														l563:
															position, tokenIndex = position562, tokenIndex562
															if buffer[position] != rune('\x1e') {
																goto l565
															}
															position++
															if buffer[position] != rune('\x1e') {
																goto l565
															}
															position++
															{
																add(ruleAction144, position)
															}
															goto l562
														l565:
															position, tokenIndex = position562, tokenIndex562
															if buffer[position] != rune('"') {
																goto l567
															}
															position++
															if buffer[position] != rune('"') {
																goto l567
															}
															position++
															{
																add(ruleAction145, position)
															}
															goto l562
														l567:
															position, tokenIndex = position562, tokenIndex562
															if buffer[position] != rune('`') {
																goto l569
															}
															position++
															if buffer[position] != rune('`') {
																goto l569
															}
															position++
															{
																add(ruleAction146, position)
															}
															goto l562
														l569:
															position, tokenIndex = position562, tokenIndex562
															{
																switch buffer[position] {
																case '\'':
																	if buffer[position] != rune('\'') {
																		goto l392
																	}
																	position++
																	{
																		add(ruleAction157, position)
																	}
																	{
																		position573 := position
																	l574:
																		{
																			position575, tokenIndex575 := position, tokenIndex
																			{
																				position576 := position
																				{
																					position577 := position
																					{
																						position580, tokenIndex580 := position, tokenIndex
																						if !_rules[ruleescape]() {
																							goto l581
																						}
																						goto l580
																					l581:
																						position, tokenIndex = position580, tokenIndex580
																						{
																							position582, tokenIndex582 := position, tokenIndex
																							{
																								switch buffer[position] {
																								case '\r':
																									if buffer[position] != rune('\r') {
																										goto l582
																									}
																									position++
																								case '\n':
																									if buffer[position] != rune('\n') {
																										goto l582
																									}
																									position++
																								case '\\':
																									if buffer[position] != rune('\\') {
																										goto l582
																									}
																									position++
																								case '\'':
																									if buffer[position] != rune('\'') {
																										goto l582
																									}
																									position++
																								default:
																									if buffer[position] != rune('{') {
																										goto l582
																									}
																									position++
																								}
																							}

																							goto l575
																						l582:
																							position, tokenIndex = position582, tokenIndex582
																						}
																						if !matchDot() {
																							goto l575
																						}
																					}
																				l580:
																				l578:
																					{
																						position579, tokenIndex579 := position, tokenIndex
																						{
																							position584, tokenIndex584 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l585
																							}
																							goto l584
																						l585:
																							position, tokenIndex = position584, tokenIndex584
																							{
																								position586, tokenIndex586 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\r':
																										if buffer[position] != rune('\r') {
																											goto l586
																										}
																										position++
																									case '\n':
																										if buffer[position] != rune('\n') {
																											goto l586
																										}
																										position++
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l586
																										}
																										position++
																									case '\'':
																										if buffer[position] != rune('\'') {
																											goto l586
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l586
																										}
																										position++
																									}
																								}

																								goto l579
																							l586:
																								position, tokenIndex = position586, tokenIndex586
																							}
																							if !matchDot() {
																								goto l579
																							}
																						}
																					l584:
																						goto l578
																					l579:
																						position, tokenIndex = position579, tokenIndex579
																					}
																					add(rulePegText, position577)
																				}
																				{
																					add(ruleAction142, position)
																				}
																				add(rulestrPart3, position576)
																			}
																			goto l574
																		l575:
																			position, tokenIndex = position575, tokenIndex575
																		}
																		add(rulePegText, position573)
																	}
																	if buffer[position] != rune('\'') {
																		goto l392
																	}
																	position++
																	{
																		add(ruleAction158, position)
																	}
																case '"':
																	if buffer[position] != rune('"') {
																		goto l392
																	}
																	position++
																	{
																		add(ruleAction155, position)
																	}
																	{
																		position591 := position
																	l592:
																		{
																			position593, tokenIndex593 := position, tokenIndex
																			{
																				position594 := position
																				{
																					position595 := position
																					{
																						position598, tokenIndex598 := position, tokenIndex
																						if !_rules[ruleescape]() {
																							goto l599
																						}
																						goto l598
																					l599:
																						position, tokenIndex = position598, tokenIndex598
																						{
																							position600, tokenIndex600 := position, tokenIndex
																							{
																								switch buffer[position] {
																								case '\r':
																									if buffer[position] != rune('\r') {
																										goto l600
																									}
																									position++
																								case '\n':
																									if buffer[position] != rune('\n') {
																										goto l600
																									}
																									position++
																								case '\\':
																									if buffer[position] != rune('\\') {
																										goto l600
																									}
																									position++
																								case '"':
																									if buffer[position] != rune('"') {
																										goto l600
																									}
																									position++
																								default:
																									if buffer[position] != rune('{') {
																										goto l600
																									}
																									position++
																								}
																							}

																							goto l593
																						l600:
																							position, tokenIndex = position600, tokenIndex600
																						}
																						if !matchDot() {
																							goto l593
																						}
																					}
																				l598:
																				l596:
																					{
																						position597, tokenIndex597 := position, tokenIndex
																						{
																							position602, tokenIndex602 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l603
																							}
																							goto l602
																						l603:
																							position, tokenIndex = position602, tokenIndex602
																							{
																								position604, tokenIndex604 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\r':
																										if buffer[position] != rune('\r') {
																											goto l604
																										}
																										position++
																									case '\n':
																										if buffer[position] != rune('\n') {
																											goto l604
																										}
																										position++
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l604
																										}
																										position++
																									case '"':
																										if buffer[position] != rune('"') {
																											goto l604
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l604
																										}
																										position++
																									}
																								}

																								goto l597
																							l604:
																								position, tokenIndex = position604, tokenIndex604
																							}
																							if !matchDot() {
																								goto l597
																							}
																						}
																					l602:
																						goto l596
																					l597:
																						position, tokenIndex = position597, tokenIndex597
																					}
																					add(rulePegText, position595)
																				}
																				{
																					add(ruleAction141, position)
																				}
																				add(rulestrPart2, position594)
																			}
																			goto l592
																		l593:
																			position, tokenIndex = position593, tokenIndex593
																		}
																		add(rulePegText, position591)
																	}
																	if buffer[position] != rune('"') {
																		goto l392
																	}
																	position++
																	{
																		add(ruleAction156, position)
																	}
																case '\x1e':
																	if buffer[position] != rune('\x1e') {
																		goto l392
																	}
																	position++
																	{
																		add(ruleAction151, position)
																	}
																	{
																		position609 := position
																	l610:
																		{
																			position611, tokenIndex611 := position, tokenIndex
																			{
																				position612, tokenIndex612 := position, tokenIndex
																				if buffer[position] != rune('{') {
																					goto l613
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l613
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l613
																				}
																				{
																					add(ruleAction152, position)
																				}
																				if buffer[position] != rune('}') {
																					goto l613
																				}
																				position++
																				goto l612
																			l613:
																				position, tokenIndex = position612, tokenIndex612
																				if buffer[position] != rune('{') {
																					goto l615
																				}
																				position++
																				if buffer[position] != rune('%') {
																					goto l615
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l615
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l615
																				}
																				{
																					add(ruleAction153, position)
																				}
																				if buffer[position] != rune('%') {
																					goto l615
																				}
																				position++
																				if buffer[position] != rune('}') {
																					goto l615
																				}
																				position++
																				goto l612
																			l615:
																				position, tokenIndex = position612, tokenIndex612
																				{
																					position617 := position
																					{
																						position618 := position
																						{
																							position621, tokenIndex621 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l622
																							}
																							goto l621
																						l622:
																							position, tokenIndex = position621, tokenIndex621
																							{
																								position623, tokenIndex623 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l623
																										}
																										position++
																									case '\x1e':
																										if buffer[position] != rune('\x1e') {
																											goto l623
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l623
																										}
																										position++
																									}
																								}

																								goto l611
																							l623:
																								position, tokenIndex = position623, tokenIndex623
																							}
																							if !matchDot() {
																								goto l611
																							}
																						}
																					l621:
																					l619:
																						{
																							position620, tokenIndex620 := position, tokenIndex
																							{
																								position625, tokenIndex625 := position, tokenIndex
																								if !_rules[ruleescape]() {
																									goto l626
																								}
																								goto l625
																							l626:
																								position, tokenIndex = position625, tokenIndex625
																								{
																									position627, tokenIndex627 := position, tokenIndex
																									{
																										switch buffer[position] {
																										case '\\':
																											if buffer[position] != rune('\\') {
																												goto l627
																											}
																											position++
																										case '\x1e':
																											if buffer[position] != rune('\x1e') {
																												goto l627
																											}
																											position++
																										default:
																											if buffer[position] != rune('{') {
																												goto l627
																											}
																											position++
																										}
																									}

																									goto l620
																								l627:
																									position, tokenIndex = position627, tokenIndex627
																								}
																								if !matchDot() {
																									goto l620
																								}
																							}
																						l625:
																							goto l619
																						l620:
																							position, tokenIndex = position620, tokenIndex620
																						}
																						add(rulePegText, position618)
																					}
																					{
																						add(ruleAction140, position)
																					}
																					add(rulestrPart1, position617)
																				}
																			}
																		l612:
																			goto l610
																		l611:
																			position, tokenIndex = position611, tokenIndex611
																		}
																		add(rulePegText, position609)
																	}
																	if buffer[position] != rune('\x1e') {
																		goto l392
																	}
																	position++
																	{
																		add(ruleAction154, position)
																	}
																default:
																	if buffer[position] != rune('`') {
																		goto l392
																	}
																	position++
																	{
																		add(ruleAction147, position)
																	}
																	{
																		position632 := position
																	l633:
																		{
																			position634, tokenIndex634 := position, tokenIndex
																			{
																				position635, tokenIndex635 := position, tokenIndex
																				if buffer[position] != rune('{') {
																					goto l636
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l636
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l636
																				}
																				{
																					add(ruleAction148, position)
																				}
																				if buffer[position] != rune('}') {
																					goto l636
																				}
																				position++
																				goto l635
																			l636:
																				position, tokenIndex = position635, tokenIndex635
																				if buffer[position] != rune('{') {
																					goto l638
																				}
																				position++
																				if buffer[position] != rune('%') {
																					goto l638
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l638
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l638
																				}
																				{
																					add(ruleAction149, position)
																				}
																				if buffer[position] != rune('%') {
																					goto l638
																				}
																				position++
																				if buffer[position] != rune('}') {
																					goto l638
																				}
																				position++
																				goto l635
																			l638:
																				position, tokenIndex = position635, tokenIndex635
																				{
																					position640 := position
																					{
																						position641 := position
																						{
																							position644, tokenIndex644 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l645
																							}
																							goto l644
																						l645:
																							position, tokenIndex = position644, tokenIndex644
																							{
																								position646, tokenIndex646 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l646
																										}
																										position++
																									case '`':
																										if buffer[position] != rune('`') {
																											goto l646
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l646
																										}
																										position++
																									}
																								}

																								goto l634
																							l646:
																								position, tokenIndex = position646, tokenIndex646
																							}
																							if !matchDot() {
																								goto l634
																							}
																						}
																					l644:
																					l642:
																						{
																							position643, tokenIndex643 := position, tokenIndex
																							{
																								position648, tokenIndex648 := position, tokenIndex
																								if !_rules[ruleescape]() {
																									goto l649
																								}
																								goto l648
																							l649:
																								position, tokenIndex = position648, tokenIndex648
																								{
																									position650, tokenIndex650 := position, tokenIndex
																									{
																										switch buffer[position] {
																										case '\\':
																											if buffer[position] != rune('\\') {
																												goto l650
																											}
																											position++
																										case '`':
																											if buffer[position] != rune('`') {
																												goto l650
																											}
																											position++
																										default:
																											if buffer[position] != rune('{') {
																												goto l650
																											}
																											position++
																										}
																									}

																									goto l643
																								l650:
																									position, tokenIndex = position650, tokenIndex650
																								}
																								if !matchDot() {
																									goto l643
																								}
																							}
																						l648:
																							goto l642
																						l643:
																							position, tokenIndex = position643, tokenIndex643
																						}
																						add(rulePegText, position641)
																					}
																					{
																						add(ruleAction139, position)
																					}
																					add(rulestrPart, position640)
																				}
																			}
																		l635:
																			goto l633
																		l634:
																			position, tokenIndex = position634, tokenIndex634
																		}
																		add(rulePegText, position632)
																	}
																	if buffer[position] != rune('`') {
																		goto l392
																	}
																	position++
																	{
																		add(ruleAction150, position)
																	}
																}
															}

														}
													l562:
														if !_rules[rulesp]() {
															goto l392
														}
														add(rulefstring, position561)
													}
												}
											}

										}
									l513:
										add(rulevalue, position512)
									}
								}
							l402:
								add(ruleexprDice, position401)
							}
						}
					l398:
						add(ruleexprUnaryPos, position397)
					}
				}
			l394:
				add(ruleexprUnaryNeg, position393)
			}
			return true
		l392:
			position, tokenIndex = position392, tokenIndex392
			return false
		},
		/* 37 exprUnaryPos <- <((add exprRoot Action67) / exprDice)> */
		nil,
		/* 38 nos <- <(number / sub)> */
		func() bool {
			position655, tokenIndex655 := position, tokenIndex
			{
				position656 := position
				{
					position657, tokenIndex657 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l658
					}
					goto l657
				l658:
					position, tokenIndex = position657, tokenIndex657
					if !_rules[rulesub]() {
						goto l655
					}
				}
			l657:
				add(rulenos, position656)
			}
			return true
		l655:
			position, tokenIndex = position655, tokenIndex655
			return false
		},
		/* 39 _diceMod <- <(((('k' 'l') / ('q' / 'Q')) nos Action68) / ((('k' 'l') / ('q' / 'Q')) Action69) / ((('k' 'h') / ('k' / 'K')) nos Action70) / ((('k' 'h') / ('k' / 'K')) Action71) / ('d' 'h' nos Action72) / ('d' 'h' Action73) / ('d' 'l' nos Action74) / ('d' 'l' Action75))> */
		func() bool {
			position659, tokenIndex659 := position, tokenIndex
			{
				position660 := position
				{
					position661, tokenIndex661 := position, tokenIndex
					{
						position663, tokenIndex663 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l664
						}
						position++
						if buffer[position] != rune('l') {
							goto l664
						}
						position++
						goto l663
					l664:
						position, tokenIndex = position663, tokenIndex663
						{
							position665, tokenIndex665 := position, tokenIndex
							if buffer[position] != rune('q') {
								goto l666
							}
							position++
							goto l665
						l666:
							position, tokenIndex = position665, tokenIndex665
							if buffer[position] != rune('Q') {
								goto l662
							}
							position++
						}
					l665:
					}
				l663:
					if !_rules[rulenos]() {
						goto l662
					}
					{
						add(ruleAction68, position)
					}
					goto l661
				l662:
					position, tokenIndex = position661, tokenIndex661
					{
						position669, tokenIndex669 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l670
						}
						position++
						if buffer[position] != rune('l') {
							goto l670
						}
						position++
						goto l669
					l670:
						position, tokenIndex = position669, tokenIndex669
						{
							position671, tokenIndex671 := position, tokenIndex
							if buffer[position] != rune('q') {
								goto l672
							}
							position++
							goto l671
						l672:
							position, tokenIndex = position671, tokenIndex671
							if buffer[position] != rune('Q') {
								goto l668
							}
							position++
						}
					l671:
					}
				l669:
					{
						add(ruleAction69, position)
					}
					goto l661
				l668:
					position, tokenIndex = position661, tokenIndex661
					{
						position675, tokenIndex675 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l676
						}
						position++
						if buffer[position] != rune('h') {
							goto l676
						}
						position++
						goto l675
					l676:
						position, tokenIndex = position675, tokenIndex675
						{
							position677, tokenIndex677 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l678
							}
							position++
							goto l677
						l678:
							position, tokenIndex = position677, tokenIndex677
							if buffer[position] != rune('K') {
								goto l674
							}
							position++
						}
					l677:
					}
				l675:
					if !_rules[rulenos]() {
						goto l674
					}
					{
						add(ruleAction70, position)
					}
					goto l661
				l674:
					position, tokenIndex = position661, tokenIndex661
					{
						position681, tokenIndex681 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l682
						}
						position++
						if buffer[position] != rune('h') {
							goto l682
						}
						position++
						goto l681
					l682:
						position, tokenIndex = position681, tokenIndex681
						{
							position683, tokenIndex683 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l684
							}
							position++
							goto l683
						l684:
							position, tokenIndex = position683, tokenIndex683
							if buffer[position] != rune('K') {
								goto l680
							}
							position++
						}
					l683:
					}
				l681:
					{
						add(ruleAction71, position)
					}
					goto l661
				l680:
					position, tokenIndex = position661, tokenIndex661
					if buffer[position] != rune('d') {
						goto l686
					}
					position++
					if buffer[position] != rune('h') {
						goto l686
					}
					position++
					if !_rules[rulenos]() {
						goto l686
					}
					{
						add(ruleAction72, position)
					}
					goto l661
				l686:
					position, tokenIndex = position661, tokenIndex661
					if buffer[position] != rune('d') {
						goto l688
					}
					position++
					if buffer[position] != rune('h') {
						goto l688
					}
					position++
					{
						add(ruleAction73, position)
					}
					goto l661
				l688:
					position, tokenIndex = position661, tokenIndex661
					if buffer[position] != rune('d') {
						goto l690
					}
					position++
					if buffer[position] != rune('l') {
						goto l690
					}
					position++
					if !_rules[rulenos]() {
						goto l690
					}
					{
						add(ruleAction74, position)
					}
					goto l661
				l690:
					position, tokenIndex = position661, tokenIndex661
					if buffer[position] != rune('d') {
						goto l659
					}
					position++
					if buffer[position] != rune('l') {
						goto l659
					}
					position++
					{
						add(ruleAction75, position)
					}
				}
			l661:
				add(rule_diceMod, position660)
			}
			return true
		l659:
			position, tokenIndex = position659, tokenIndex659
			return false
		},
		/* 40 _diceMod2 <- <(('m' 'i' 'n' nos Action76)? ('m' 'a' 'x' nos Action77)?)> */
		func() bool {
			{
				position694 := position
				{
					position695, tokenIndex695 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l695
					}
					position++
					if buffer[position] != rune('i') {
						goto l695
					}
					position++
					if buffer[position] != rune('n') {
						goto l695
					}
					position++
					if !_rules[rulenos]() {
						goto l695
					}
					{
						add(ruleAction76, position)
					}
					goto l696
				l695:
					position, tokenIndex = position695, tokenIndex695
				}
			l696:
				{
					position698, tokenIndex698 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l698
					}
					position++
					if buffer[position] != rune('a') {
						goto l698
					}
					position++
					if buffer[position] != rune('x') {
						goto l698
					}
					position++
					if !_rules[rulenos]() {
						goto l698
					}
					{
						add(ruleAction77, position)
					}
					goto l699
				l698:
					position, tokenIndex = position698, tokenIndex698
				}
			l699:
				add(rule_diceMod2, position694)
			}
			return true
		},
		/* 41 _dicePearMod <- <(('优' '势' Action78) / ('劣' '势' Action79))> */
		func() bool {
			position701, tokenIndex701 := position, tokenIndex
			{
				position702 := position
				{
					position703, tokenIndex703 := position, tokenIndex
					if buffer[position] != rune('优') {
						goto l704
					}
					position++
					if buffer[position] != rune('势') {
						goto l704
					}
					position++
					{
						add(ruleAction78, position)
					}
					goto l703
				l704:
					position, tokenIndex = position703, tokenIndex703
					if buffer[position] != rune('劣') {
						goto l701
					}
					position++
					if buffer[position] != rune('势') {
						goto l701
					}
					position++
					{
						add(ruleAction79, position)
					}
				}
			l703:
				add(rule_dicePearMod, position702)
			}
			return true
		l701:
			position, tokenIndex = position701, tokenIndex701
			return false
		},
		/* 42 detailStart <- <Action80> */
		func() bool {
			{
				position708 := position
				{
					add(ruleAction80, position)
				}
				add(ruledetailStart, position708)
			}
			return true
		},
		/* 43 detailEnd <- <Action81> */
		func() bool {
			{
				position711 := position
				{
					add(ruleAction81, position)
				}
				add(ruledetailEnd, position711)
			}
			return true
		},
		/* 44 _diceType1 <- <(nos ('d' / 'D') nos)> */
		nil,
		/* 45 _diceType2 <- <(('d' / 'D') nos)> */
		func() bool {
			position714, tokenIndex714 := position, tokenIndex
			{
				position715 := position
				{
					position716, tokenIndex716 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l717
					}
					position++
					goto l716
				l717:
					position, tokenIndex = position716, tokenIndex716
					if buffer[position] != rune('D') {
						goto l714
					}
					position++
				}
			l716:
				if !_rules[rulenos]() {
					goto l714
				}
				add(rule_diceType2, position715)
			}
			return true
		l714:
			position, tokenIndex = position714, tokenIndex714
			return false
		},
		/* 46 _diceType3 <- <(nos ('d' / 'D'))> */
		nil,
		/* 47 _diceType4 <- <('d' / 'D')> */
		nil,
		/* 48 _diceExpr1 <- <(('d' / 'D') Action82 nos _diceMod? _diceMod2?)> */
		func() bool {
			position720, tokenIndex720 := position, tokenIndex
			{
				position721 := position
				{
					position722, tokenIndex722 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l723
					}
					position++
					goto l722
				l723:
					position, tokenIndex = position722, tokenIndex722
					if buffer[position] != rune('D') {
						goto l720
					}
					position++
				}
			l722:
				{
					add(ruleAction82, position)
				}
				if !_rules[rulenos]() {
					goto l720
				}
				{
					position725, tokenIndex725 := position, tokenIndex
					if !_rules[rule_diceMod]() {
						goto l725
					}
					goto l726
				l725:
					position, tokenIndex = position725, tokenIndex725
				}
			l726:
				{
					position727, tokenIndex727 := position, tokenIndex
					if !_rules[rule_diceMod2]() {
						goto l727
					}
					goto l728
				l727:
					position, tokenIndex = position727, tokenIndex727
				}
			l728:
				add(rule_diceExpr1, position721)
			}
			return true
		l720:
			position, tokenIndex = position720, tokenIndex720
			return false
		},
		/* 49 _diceExpr2 <- <(('d' / 'D') Action83 nos (_dicePearMod / _diceMod)? _diceMod2?)> */
		nil,
		/* 50 _diceExpr3 <- <(('d' / 'D') Action84 (_dicePearMod / _diceMod)? _diceMod2?)> */
		func() bool {
			position730, tokenIndex730 := position, tokenIndex
			{
				position731 := position
				{
					position732, tokenIndex732 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l733
					}
					position++
					goto l732
				l733:
					position, tokenIndex = position732, tokenIndex732
					if buffer[position] != rune('D') {
						goto l730
					}
					position++
				}
			l732:
				{
					add(ruleAction84, position)
				}
				{
					position735, tokenIndex735 := position, tokenIndex
					{
						position737, tokenIndex737 := position, tokenIndex
						if !_rules[rule_dicePearMod]() {
							goto l738
						}
						goto l737
					l738:
						position, tokenIndex = position737, tokenIndex737
						if !_rules[rule_diceMod]() {
							goto l735
						}
					}
				l737:
					goto l736
				l735:
					position, tokenIndex = position735, tokenIndex735
				}
			l736:
				{
					position739, tokenIndex739 := position, tokenIndex
					if !_rules[rule_diceMod2]() {
						goto l739
					}
					goto l740
				l739:
					position, tokenIndex = position739, tokenIndex739
				}
			l740:
				add(rule_diceExpr3, position731)
			}
			return true
		l730:
			position, tokenIndex = position730, tokenIndex730
			return false
		},
		/* 51 _diceExprX <- <(&_diceType2 detailStart _diceExpr1 detailEnd Action85)> */
		func() bool {
			position741, tokenIndex741 := position, tokenIndex
			{
				position742 := position
				{
					position743, tokenIndex743 := position, tokenIndex
					if !_rules[rule_diceType2]() {
						goto l741
					}
					position, tokenIndex = position743, tokenIndex743
				}
				if !_rules[ruledetailStart]() {
					goto l741
				}
				if !_rules[rule_diceExpr1]() {
					goto l741
				}
				if !_rules[ruledetailEnd]() {
					goto l741
				}
				{
					add(ruleAction85, position)
				}
				add(rule_diceExprX, position742)
			}
			return true
		l741:
			position, tokenIndex = position741, tokenIndex741
			return false
		},
		/* 52 _wodTypeMain <- <(('a' / 'A') nos ((&('Q' | 'q') (('q' / 'Q') nos)) | (&('K' | 'k') (('k' / 'K') nos)) | (&('M' | 'm') (('m' / 'M') nos)))*)> */
		func() bool {
			position745, tokenIndex745 := position, tokenIndex
			{
				position746 := position
				{
					position747, tokenIndex747 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l748
					}
					position++
					goto l747
				l748:
					position, tokenIndex = position747, tokenIndex747
					if buffer[position] != rune('A') {
						goto l745
					}
					position++
				}
			l747:
				if !_rules[rulenos]() {
					goto l745
				}
			l749:
				{
					position750, tokenIndex750 := position, tokenIndex
					{
						switch buffer[position] {
						case 'Q', 'q':
							{
								position752, tokenIndex752 := position, tokenIndex
								if buffer[position] != rune('q') {
									goto l753
								}
								position++
								goto l752
							l753:
								position, tokenIndex = position752, tokenIndex752
								if buffer[position] != rune('Q') {
									goto l750
								}
								position++
							}
						l752:
							if !_rules[rulenos]() {
								goto l750
							}
						case 'K', 'k':
							{
								position754, tokenIndex754 := position, tokenIndex
								if buffer[position] != rune('k') {
									goto l755
								}
								position++
								goto l754
							l755:
								position, tokenIndex = position754, tokenIndex754
								if buffer[position] != rune('K') {
									goto l750
								}
								position++
							}
						l754:
							if !_rules[rulenos]() {
								goto l750
							}
						default:
							{
								position756, tokenIndex756 := position, tokenIndex
								if buffer[position] != rune('m') {
									goto l757
								}
								position++
								goto l756
							l757:
								position, tokenIndex = position756, tokenIndex756
								if buffer[position] != rune('M') {
									goto l750
								}
								position++
							}
						l756:
							if !_rules[rulenos]() {
								goto l750
							}
						}
					}

					goto l749
				l750:
					position, tokenIndex = position750, tokenIndex750
				}
				add(rule_wodTypeMain, position746)
			}
			return true
		l745:
			position, tokenIndex = position745, tokenIndex745
			return false
		},
		/* 53 _wodDiceType <- <((nos _wodTypeMain) / (_wodTypeMain !identifier_ch))> */
		nil,
		/* 54 _wodMain <- <(('a' / 'A') nos ((&('Q' | 'q') (('q' / 'Q') nos Action88)) | (&('K' | 'k') (('k' / 'K') nos Action87)) | (&('M' | 'm') (('m' / 'M') nos Action86)))*)> */
		func() bool {
			position759, tokenIndex759 := position, tokenIndex
			{
				position760 := position
				{
					position761, tokenIndex761 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l762
					}
					position++
					goto l761
				l762:
					position, tokenIndex = position761, tokenIndex761
					if buffer[position] != rune('A') {
						goto l759
					}
					position++
				}
			l761:
				if !_rules[rulenos]() {
					goto l759
				}
			l763:
				{
					position764, tokenIndex764 := position, tokenIndex
					{
						switch buffer[position] {
						case 'Q', 'q':
							{
								position766, tokenIndex766 := position, tokenIndex
								if buffer[position] != rune('q') {
									goto l767
								}
								position++
								goto l766
							l767:
								position, tokenIndex = position766, tokenIndex766
								if buffer[position] != rune('Q') {
									goto l764
								}
								position++
							}
						l766:
							if !_rules[rulenos]() {
								goto l764
							}
							{
								add(ruleAction88, position)
							}
						case 'K', 'k':
							{
								position769, tokenIndex769 := position, tokenIndex
								if buffer[position] != rune('k') {
									goto l770
								}
								position++
								goto l769
							l770:
								position, tokenIndex = position769, tokenIndex769
								if buffer[position] != rune('K') {
									goto l764
								}
								position++
							}
						l769:
							if !_rules[rulenos]() {
								goto l764
							}
							{
								add(ruleAction87, position)
							}
						default:
							{
								position772, tokenIndex772 := position, tokenIndex
								if buffer[position] != rune('m') {
									goto l773
								}
								position++
								goto l772
							l773:
								position, tokenIndex = position772, tokenIndex772
								if buffer[position] != rune('M') {
									goto l764
								}
								position++
							}
						l772:
							if !_rules[rulenos]() {
								goto l764
							}
							{
								add(ruleAction86, position)
							}
						}
					}

					goto l763
				l764:
					position, tokenIndex = position764, tokenIndex764
				}
				add(rule_wodMain, position760)
			}
			return true
		l759:
			position, tokenIndex = position759, tokenIndex759
			return false
		},
		/* 55 _cocDiceType <- <(((&('B') 'B') | (&('b') 'b') | (&('P') 'P') | (&('p') 'p')) ((nos !identifier_ch) / !identifier_ch))> */
		nil,
		/* 56 _diceCocBonus <- <(('b' / 'B') ((nos !identifier_ch) / (!identifier_ch Action89)) detailEnd Action90)> */
		nil,
		/* 57 _diceCocPenalty <- <(('p' / 'P') ((nos !identifier_ch) / (!identifier_ch Action91)) detailEnd Action92)> */
		nil,
		/* 58 _dcDiceType <- <(nos ('c' / 'C') nos (('m' / 'M') nos)*)> */
		nil,
		/* 59 _fateDiceType <- <(('f' / 'F') !identifier_ch)> */
		nil,
		/* 60 exprDice <- <((&_diceType1 detailStart nos _diceExpr1 detailEnd Action93 _diceExprX*) / (&_diceType2 detailStart _diceExpr2 detailEnd Action94 _diceExprX*) / (&{!p.Config.DisableNDice} &_diceType3 detailStart nos _diceExpr3 detailEnd Action95 _diceExprX*) / (&{!p.Config.DisableNDice} &_diceType4 detailStart Action96 _diceExpr3 detailEnd Action97 _diceExprX*) / (&{p.Config.EnableDiceCoC} &_cocDiceType detailStart (_diceCocBonus / _diceCocPenalty)) / (&{p.Config.EnableDiceWoD} &_wodDiceType detailStart Action98 ((nos Action99 _wodMain) / (_wodMain !identifier_ch)) detailEnd Action100) / (&{p.Config.EnableDiceDoubleCross} &_dcDiceType detailStart Action101 nos Action102 ('c' / 'C') nos (('m' / 'M') nos Action103)* detailEnd Action104) / (&{p.Config.EnableDiceFate} &_fateDiceType detailStart ('f' / 'F') !identifier_ch detailEnd Action105) / value)> */
		nil,
		/* 61 item_get <- <('[' sp exprRoot ']' sp !'=' Action106 func_invoke?)*> */
		func() bool {
			{
				position782 := position
			l783:
				{
					position784, tokenIndex784 := position, tokenIndex
					if buffer[position] != rune('[') {
						goto l784
					}
					position++
					if !_rules[rulesp]() {
						goto l784
					}
					if !_rules[ruleexprRoot]() {
						goto l784
					}
					if buffer[position] != rune(']') {
						goto l784
					}
					position++
					if !_rules[rulesp]() {
						goto l784
					}
					{
						position785, tokenIndex785 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l785
						}
						position++
						goto l784
					l785:
						position, tokenIndex = position785, tokenIndex785
					}
					{
						add(ruleAction106, position)
					}
					{
						position787, tokenIndex787 := position, tokenIndex
						if !_rules[rulefunc_invoke]() {
							goto l787
						}
						goto l788
					l787:
						position, tokenIndex = position787, tokenIndex787
					}
				l788:
					goto l783
				l784:
					position, tokenIndex = position784, tokenIndex784
				}
				add(ruleitem_get, position782)
			}
			return true
		},
		/* 62 array_call <- <(('k' 'h' Action107 ((number Action108) / Action109)) / ('k' 'l' Action110 ((number Action111) / Action112)) / ('[' sp exprRoot ']' sp Action113)+)> */
		func() bool {
			position789, tokenIndex789 := position, tokenIndex
			{
				position790 := position
				{
					position791, tokenIndex791 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l792
					}
					position++
					if buffer[position] != rune('h') {
						goto l792
					}
					position++
					{
						add(ruleAction107, position)
					}
					{
						position794, tokenIndex794 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l795
						}
						{
							add(ruleAction108, position)
						}
						goto l794
					l795:
						position, tokenIndex = position794, tokenIndex794
						{
							add(ruleAction109, position)
						}
					}
				l794:
					goto l791
				l792:
					position, tokenIndex = position791, tokenIndex791
					if buffer[position] != rune('k') {
						goto l798
					}
					position++
					if buffer[position] != rune('l') {
						goto l798
					}
					position++
					{
						add(ruleAction110, position)
					}
					{
						position800, tokenIndex800 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l801
						}
						{
							add(ruleAction111, position)
						}
						goto l800
					l801:
						position, tokenIndex = position800, tokenIndex800
						{
							add(ruleAction112, position)
						}
					}
				l800:
					goto l791
				l798:
					position, tokenIndex = position791, tokenIndex791
					if buffer[position] != rune('[') {
						goto l789
					}
					position++
					if !_rules[rulesp]() {
						goto l789
					}
					if !_rules[ruleexprRoot]() {
						goto l789
					}
					if buffer[position] != rune(']') {
						goto l789
					}
					position++
					if !_rules[rulesp]() {
						goto l789
					}
					{
						add(ruleAction113, position)
					}
				l804:
					{
						position805, tokenIndex805 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l805
						}
						position++
						if !_rules[rulesp]() {
							goto l805
						}
						if !_rules[ruleexprRoot]() {
							goto l805
						}
						if buffer[position] != rune(']') {
							goto l805
						}
						position++
						if !_rules[rulesp]() {
							goto l805
						}
						{
							add(ruleAction113, position)
						}
						goto l804
					l805:
						position, tokenIndex = position805, tokenIndex805
					}
				}
			l791:
				add(rulearray_call, position790)
			}
			return true
		l789:
			position, tokenIndex = position789, tokenIndex789
			return false
		},
		/* 63 attr_get <- <('.' sp identifier sp Action114 func_invoke?)*> */
		func() bool {
			{
				position809 := position
			l810:
				{
					position811, tokenIndex811 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l811
					}
					position++
					if !_rules[rulesp]() {
						goto l811
					}
					if !_rules[ruleidentifier]() {
						goto l811
					}
					if !_rules[rulesp]() {
						goto l811
					}
					{
						add(ruleAction114, position)
					}
					{
						position813, tokenIndex813 := position, tokenIndex
						if !_rules[rulefunc_invoke]() {
							goto l813
						}
						goto l814
					l813:
						position, tokenIndex = position813, tokenIndex813
					}
				l814:
					goto l810
				l811:
					position, tokenIndex = position811, tokenIndex811
				}
				add(ruleattr_get, position809)
			}
			return true
		},
		/* 64 func_invoke <- <(('(' sp ')' sp Action115) / ('(' sp Action116 exprRoot (',' sp exprRoot Action117)* ')' sp Action118))> */
		func() bool {
			position815, tokenIndex815 := position, tokenIndex
			{
				position816 := position
				{
					position817, tokenIndex817 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l818
					}
					position++
					if !_rules[rulesp]() {
						goto l818
					}
					if buffer[position] != rune(')') {
						goto l818
					}
					position++
					if !_rules[rulesp]() {
						goto l818
					}
					{
						add(ruleAction115, position)
					}
					goto l817
				l818:
					position, tokenIndex = position817, tokenIndex817
					if buffer[position] != rune('(') {
						goto l815
					}
					position++
					if !_rules[rulesp]() {
						goto l815
					}
					{
						add(ruleAction116, position)
					}
					if !_rules[ruleexprRoot]() {
						goto l815
					}
				l821:
					{
						position822, tokenIndex822 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l822
						}
						position++
						if !_rules[rulesp]() {
							goto l822
						}
						if !_rules[ruleexprRoot]() {
							goto l822
						}
						{
							add(ruleAction117, position)
						}
						goto l821
					l822:
						position, tokenIndex = position822, tokenIndex822
					}
					if buffer[position] != rune(')') {
						goto l815
					}
					position++
					if !_rules[rulesp]() {
						goto l815
					}
					{
						add(ruleAction118, position)
					}
				}
			l817:
				add(rulefunc_invoke, position816)
			}
			return true
		l815:
			position, tokenIndex = position815, tokenIndex815
			return false
		},
		/* 65 dict_item <- <(Action119 ((value_id_without_colon / exprRoot) sp ':' sp exprRoot) sp)> */
		func() bool {
			position825, tokenIndex825 := position, tokenIndex
			{
				position826 := position
				{
					add(ruleAction119, position)
				}
				{
					position828, tokenIndex828 := position, tokenIndex
					{
						position830 := position
						{
							position831 := position
							if !_rules[ruleno_keywords]() {
								goto l829
							}
							{
								position832 := position
								if !_rules[ruleidentifier_ch0]() {
									goto l829
								}
							l833:
								{
									position834, tokenIndex834 := position, tokenIndex
									{
										position835, tokenIndex835 := position, tokenIndex
										if !_rules[ruleidentifier_ch0]() {
											goto l836
										}
										goto l835
									l836:
										position, tokenIndex = position835, tokenIndex835
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l834
										}
										position++
									}
								l835:
									goto l833
								l834:
									position, tokenIndex = position834, tokenIndex834
								}
								add(rulePegText, position832)
							}
							add(ruleidentifierWithoutColon, position831)
						}
						if !_rules[rulesp]() {
							goto l829
						}
						{
							add(ruleAction120, position)
						}
						{
							position838, tokenIndex838 := position, tokenIndex
							if !_rules[rulefunc_invoke]() {
								goto l838
							}
							goto l839
						l838:
							position, tokenIndex = position838, tokenIndex838
						}
					l839:
						if !_rules[ruleitem_get]() {
							goto l829
						}
						if !_rules[ruleattr_get]() {
							goto l829
						}
						add(rulevalue_id_without_colon, position830)
					}
					goto l828
				l829:
					position, tokenIndex = position828, tokenIndex828
					if !_rules[ruleexprRoot]() {
						goto l825
					}
				}
			l828:
				if !_rules[rulesp]() {
					goto l825
				}
				if buffer[position] != rune(':') {
					goto l825
				}
				position++
				if !_rules[rulesp]() {
					goto l825
				}
				if !_rules[ruleexprRoot]() {
					goto l825
				}
				if !_rules[rulesp]() {
					goto l825
				}
				add(ruledict_item, position826)
			}
			return true
		l825:
			position, tokenIndex = position825, tokenIndex825
			return false
		},
		/* 66 value_id_without_colon <- <(identifierWithoutColon sp Action120 func_invoke? item_get attr_get)> */
		nil,
		/* 67 value <- <(('t' 'r' 'u' 'e' sp Action121) / ('f' 'a' 'l' 's' 'e' sp Action122) / ('u' 'n' 'd' 'e' 'f' 'i' 'n' 'e' 'd' sp Action123) / ('t' 'h' 'i' 's' sp Action124 item_get attr_get) / ('&' identifier sp Action125 attr_get) / (!{_matched := false} &{_matched} ('c' 'a' 'f' 'e' 'b' 'a' 'b' 'e')) / float / number / (&(identifier sp) detailStart identifier detailEnd spNoCR Action126 func_invoke? item_get attr_get) / ('[' sp ']' sp Action127 array_call? attr_get) / ('[' sp exprRoot ('.' '.') sp exprRoot ']' sp Action128 array_call? attr_get) / ('{' sp '}' sp Action132 item_get attr_get) / ((&('f') ('f' 'u' 'n' 'c' sp func_def_params '{' sp Action135 <stmtRoot?> '}' sp Action136)) | (&('{') ('{' sp Action133 dict_item (',' sp dict_item)* ','? '}' sp Action134 item_get attr_get)) | (&('[') ('[' sp Action129 exprRoot (',' sp exprRoot Action130)* ']' sp Action131 array_call? attr_get)) | (&('(') (sub item_get attr_get)) | (&('\x1e' | '"' | '\'' | '`') fstring)))> */
		nil,
		/* 68 number <- <(<[0-9]+> Action137)> */
		func() bool {
			position842, tokenIndex842 := position, tokenIndex
			{
				position843 := position
				{
					position844 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l842
					}
					position++
				l845:
					{
						position846, tokenIndex846 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l846
						}
						position++
						goto l845
					l846:
						position, tokenIndex = position846, tokenIndex846
					}
					add(rulePegText, position844)
				}
				{
					add(ruleAction137, position)
				}
				add(rulenumber, position843)
			}
			return true
		l842:
			position, tokenIndex = position842, tokenIndex842
			return false
		},
		/* 69 float <- <(<([0-9]* '.' [0-9]+)> Action138)> */
		func() bool {
			position848, tokenIndex848 := position, tokenIndex
			{
				position849 := position
				{
					position850 := position
				l851:
					{
						position852, tokenIndex852 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l852
						}
						position++
						goto l851
					l852:
						position, tokenIndex = position852, tokenIndex852
					}
					if buffer[position] != rune('.') {
						goto l848
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l848
					}
					position++
				l853:
					{
						position854, tokenIndex854 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l854
						}
						position++
						goto l853
					l854:
						position, tokenIndex = position854, tokenIndex854
					}
					add(rulePegText, position850)
				}
				{
					add(ruleAction138, position)
				}
				add(rulefloat, position849)
			}
			return true
		l848:
			position, tokenIndex = position848, tokenIndex848
			return false
		},
		/* 70 strPart <- <(<(escape / (!((&('\\') '\\') | (&('`') '`') | (&('{') '{')) .))+> Action139)> */
		nil,
		/* 71 strPart1 <- <(<(escape / (!((&('\\') '\\') | (&('\x1e') '\x1e') | (&('{') '{')) .))+> Action140)> */
		nil,
		/* 72 strPart2 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('"') '"') | (&('{') '{')) .))+> Action141)> */
		nil,
		/* 73 strPart3 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('\'') '\'') | (&('{') '{')) .))+> Action142)> */
		nil,
		/* 74 fstring <- <((('\'' '\'' Action143) / ('\x1e' '\x1e' Action144) / ('"' '"' Action145) / ('`' '`' Action146) / ((&('\'') ('\'' Action157 <strPart3*> '\'' Action158)) | (&('"') ('"' Action155 <strPart2*> '"' Action156)) | (&('\x1e') ('\x1e' Action151 <(('{' sp exprRoot Action152 '}') / ('{' '%' sp exprRoot Action153 ('%' '}')) / strPart1)*> '\x1e' Action154)) | (&('`') ('`' Action147 <(('{' sp exprRoot Action148 '}') / ('{' '%' sp exprRoot Action149 ('%' '}')) / strPart)*> '`' Action150)))) sp)> */
		nil,
		/* 75 keywords <- <((&('f') ('f' 'u' 'n' 'c')) | (&('r') ('r' 'e' 't' 'u' 'r' 'n')) | (&('b') ('b' 'r' 'e' 'a' 'k')) | (&('c') ('c' 'o' 'n' 't' 'i' 'n' 'u' 'e')) | (&('e') ('e' 'l' 's' 'e')) | (&('i') ('i' 'f')) | (&('w') ('w' 'h' 'i' 'l' 'e')))> */
		nil,
		/* 76 identifier_ch0 <- <(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) .)> */
		func() bool {
			position862, tokenIndex862 := position, tokenIndex
			{
				position863 := position
				{
					position864, tokenIndex864 := position, tokenIndex
					{
						switch buffer[position] {
						case '\x1e':
							if buffer[position] != rune('\x1e') {
								goto l864
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l864
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l864
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l864
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l864
							}
							position++
						case '~':
							if buffer[position] != rune('~') {
								goto l864
							}
							position++
						case '}':
							if buffer[position] != rune('}') {
								goto l864
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l864
							}
							position++
						case '{':
							if buffer[position] != rune('{') {
								goto l864
							}
							position++
						case '`':
							if buffer[position] != rune('`') {
								goto l864
							}
							position++
						case '^':
							if buffer[position] != rune('^') {
								goto l864
							}
							position++
						case ']':
							if buffer[position] != rune(']') {
								goto l864
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l864
							}
							position++
						case '[':
							if buffer[position] != rune('[') {
								goto l864
							}
							position++
						case '@':
							if buffer[position] != rune('@') {
								goto l864
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l864
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l864
							}
							position++
						case '=':
							if buffer[position] != rune('=') {
								goto l864
							}
							position++
						case '<':
							if buffer[position] != rune('<') {
								goto l864
							}
							position++
						case ';':
							if buffer[position] != rune(';') {
								goto l864
							}
							position++
						case ':':
							if buffer[position] != rune(':') {
								goto l864
							}
							position++
						case '/':
							if buffer[position] != rune('/') {
								goto l864
							}
							position++
						case '+':
							if buffer[position] != rune('+') {
								goto l864
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l864
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l864
							}
							position++
						case '(':
							if buffer[position] != rune('(') {
								goto l864
							}
							position++
						case '\'':
							if buffer[position] != rune('\'') {
								goto l864
							}
							position++
						case '&':
							if buffer[position] != rune('&') {
								goto l864
							}
							position++
						case '%':
							if buffer[position] != rune('%') {
								goto l864
							}
							position++
						case '#':
							if buffer[position] != rune('#') {
								goto l864
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l864
							}
							position++
						case '!':
							if buffer[position] != rune('!') {
								goto l864
							}
							position++
						case ',', '-', '.':
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l864
							}
							position++
						default:
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l864
							}
							position++
						}
					}

					goto l862
				l864:
					position, tokenIndex = position864, tokenIndex864
				}
				if !matchDot() {
					goto l862
				}
				add(ruleidentifier_ch0, position863)
			}
			return true
		l862:
			position, tokenIndex = position862, tokenIndex862
			return false
		},
		/* 77 identifier_ch <- <(identifier_ch0 / ([0-9] / ':'))> */
		func() bool {
			position866, tokenIndex866 := position, tokenIndex
			{
				position867 := position
				{
					position868, tokenIndex868 := position, tokenIndex
					if !_rules[ruleidentifier_ch0]() {
						goto l869
					}
					goto l868
				l869:
					position, tokenIndex = position868, tokenIndex868
					{
						position870, tokenIndex870 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l871
						}
						position++
						goto l870
					l871:
						position, tokenIndex = position870, tokenIndex870
						if buffer[position] != rune(':') {
							goto l866
						}
						position++
					}
				l870:
				}
			l868:
				add(ruleidentifier_ch, position867)
			}
			return true
		l866:
			position, tokenIndex = position866, tokenIndex866
			return false
		},
		/* 78 no_keywords <- <!(keywords (sp1 / (!(identifier_ch0 / [0-9]) .)))> */
		func() bool {
			position872, tokenIndex872 := position, tokenIndex
			{
				position873 := position
				{
					position874, tokenIndex874 := position, tokenIndex
					{
						position875 := position
						{
							switch buffer[position] {
							case 'f':
								if buffer[position] != rune('f') {
									goto l874
								}
								position++
								if buffer[position] != rune('u') {
									goto l874
								}
								position++
								if buffer[position] != rune('n') {
									goto l874
								}
								position++
								if buffer[position] != rune('c') {
									goto l874
								}
								position++
							case 'r':
								if buffer[position] != rune('r') {
									goto l874
								}
								position++
								if buffer[position] != rune('e') {
									goto l874
								}
								position++
								if buffer[position] != rune('t') {
									goto l874
								}
								position++
								if buffer[position] != rune('u') {
									goto l874
								}
								position++
								if buffer[position] != rune('r') {
									goto l874
								}
								position++
								if buffer[position] != rune('n') {
									goto l874
								}
								position++
							case 'b':
								if buffer[position] != rune('b') {
									goto l874
								}
								position++
								if buffer[position] != rune('r') {
									goto l874
								}
								position++
								if buffer[position] != rune('e') {
									goto l874
								}
								position++
								if buffer[position] != rune('a') {
									goto l874
								}
								position++
								if buffer[position] != rune('k') {
									goto l874
								}
								position++
							case 'c':
								if buffer[position] != rune('c') {
									goto l874
								}
								position++
								if buffer[position] != rune('o') {
									goto l874
								}
								position++
								if buffer[position] != rune('n') {
									goto l874
								}
								position++
								if buffer[position] != rune('t') {
									goto l874
								}
								position++
								if buffer[position] != rune('i') {
									goto l874
								}
								position++
								if buffer[position] != rune('n') {
									goto l874
								}
								position++
								if buffer[position] != rune('u') {
									goto l874
								}
								position++
								if buffer[position] != rune('e') {
									goto l874
								}
								position++
							case 'e':
								if buffer[position] != rune('e') {
									goto l874
								}
								position++
								if buffer[position] != rune('l') {
									goto l874
								}
								position++
								if buffer[position] != rune('s') {
									goto l874
								}
								position++
								if buffer[position] != rune('e') {
									goto l874
								}
								position++
							case 'i':
								if buffer[position] != rune('i') {
									goto l874
								}
								position++
								if buffer[position] != rune('f') {
									goto l874
								}
								position++
							default:
								if buffer[position] != rune('w') {
									goto l874
								}
								position++
								if buffer[position] != rune('h') {
									goto l874
								}
								position++
								if buffer[position] != rune('i') {
									goto l874
								}
								position++
								if buffer[position] != rune('l') {
									goto l874
								}
								position++
								if buffer[position] != rune('e') {
									goto l874
								}
								position++
							}
						}

						add(rulekeywords, position875)
					}
					{
						position877, tokenIndex877 := position, tokenIndex
						if !_rules[rulesp1]() {
							goto l878
						}
						goto l877
					l878:
						position, tokenIndex = position877, tokenIndex877
						{
							position879, tokenIndex879 := position, tokenIndex
							{
								position880, tokenIndex880 := position, tokenIndex
								if !_rules[ruleidentifier_ch0]() {
									goto l881
								}
								goto l880
							l881:
								position, tokenIndex = position880, tokenIndex880
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l879
								}
								position++
							}
						l880:
							goto l874
						l879:
							position, tokenIndex = position879, tokenIndex879
						}
						if !matchDot() {
							goto l874
						}
					}
				l877:
					goto l872
				l874:
					position, tokenIndex = position874, tokenIndex874
				}
				add(ruleno_keywords, position873)
			}
			return true
		l872:
			position, tokenIndex = position872, tokenIndex872
			return false
		},
		/* 79 identifier <- <(no_keywords <(identifier_ch0 identifier_ch*)>)> */
		func() bool {
			position882, tokenIndex882 := position, tokenIndex
			{
				position883 := position
				if !_rules[ruleno_keywords]() {
					goto l882
				}
				{
					position884 := position
					if !_rules[ruleidentifier_ch0]() {
						goto l882
					}
				l885:
					{
						position886, tokenIndex886 := position, tokenIndex
						if !_rules[ruleidentifier_ch]() {
							goto l886
						}
						goto l885
					l886:
						position, tokenIndex = position886, tokenIndex886
					}
					add(rulePegText, position884)
				}
				add(ruleidentifier, position883)
			}
			return true
		l882:
			position, tokenIndex = position882, tokenIndex882
			return false
		},
		/* 80 identifierWithoutColon <- <(no_keywords <(identifier_ch0 (identifier_ch0 / [0-9])*)>)> */
		nil,
		/* 81 sub <- <(parenOpen exprRoot parenClose)> */
		func() bool {
			position888, tokenIndex888 := position, tokenIndex
			{
				position889 := position
				{
					position890 := position
					if buffer[position] != rune('(') {
						goto l888
					}
					position++
					if !_rules[rulesp]() {
						goto l888
					}
					add(ruleparenOpen, position890)
				}
				if !_rules[ruleexprRoot]() {
					goto l888
				}
				{
					position891 := position
					if buffer[position] != rune(')') {
						goto l888
					}
					position++
					if !_rules[rulesp]() {
						goto l888
					}
					add(ruleparenClose, position891)
				}
				add(rulesub, position889)
			}
			return true
		l888:
			position, tokenIndex = position888, tokenIndex888
			return false
		},
		/* 82 parenOpen <- <('(' sp)> */
		nil,
		/* 83 parenClose <- <(')' sp)> */
		nil,
		/* 84 add <- <(('+' / '＋') sp)> */
		func() bool {
			position894, tokenIndex894 := position, tokenIndex
			{
				position895 := position
				{
					position896, tokenIndex896 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l897
					}
					position++
					goto l896
				l897:
					position, tokenIndex = position896, tokenIndex896
					if buffer[position] != rune('＋') {
						goto l894
					}
					position++
				}
			l896:
				if !_rules[rulesp]() {
					goto l894
				}
				add(ruleadd, position895)
			}
			return true
		l894:
			position, tokenIndex = position894, tokenIndex894
			return false
		},
		/* 85 minus <- <(('-' / '－') sp)> */
		func() bool {
			position898, tokenIndex898 := position, tokenIndex
			{
				position899 := position
				{
					position900, tokenIndex900 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l901
					}
					position++
					goto l900
				l901:
					position, tokenIndex = position900, tokenIndex900
					if buffer[position] != rune('－') {
						goto l898
					}
					position++
				}
			l900:
				if !_rules[rulesp]() {
					goto l898
				}
				add(ruleminus, position899)
			}
			return true
		l898:
			position, tokenIndex = position898, tokenIndex898
			return false
		},
		/* 86 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 87 divide <- <(('/' / '／') sp)> */
		nil,
		/* 88 modulus <- <('%' sp)> */
		nil,
		/* 89 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 90 nullCoalescing <- <('?' '?' sp)> */
		nil,
		/* 91 bitwiseOr <- <('|' sp)> */
		nil,
		/* 92 bitwiseAnd <- <('&' sp)> */
		nil,
		/* 93 logicOr <- <('|' '|' sp)> */
		nil,
		/* 94 logicAnd <- <('&' '&' sp)> */
		nil,
		/* 95 lt <- <('<' sp)> */
		nil,
		/* 96 gt <- <('>' sp)> */
		nil,
		/* 97 le <- <('<' '=' sp)> */
		nil,
		/* 98 ge <- <('>' '=' sp)> */
		nil,
		/* 99 eq <- <('=' '=' sp)> */
		nil,
		/* 100 ne <- <('!' '=' sp)> */
		nil,
		/* 101 sp <- <((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position918 := position
			l919:
				{
					position920, tokenIndex920 := position, tokenIndex
					{
						switch buffer[position] {
						case '\r':
							if buffer[position] != rune('\r') {
								goto l920
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l920
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l920
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l920
							}
							position++
						}
					}

					goto l919
				l920:
					position, tokenIndex = position920, tokenIndex920
				}
				add(rulesp, position918)
			}
			return true
		},
		/* 102 spNoCR <- <((&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position923 := position
			l924:
				{
					position925, tokenIndex925 := position, tokenIndex
					{
						switch buffer[position] {
						case '\r':
							if buffer[position] != rune('\r') {
								goto l925
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l925
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l925
							}
							position++
						}
					}

					goto l924
				l925:
					position, tokenIndex = position925, tokenIndex925
				}
				add(rulespNoCR, position923)
			}
			return true
		},
		/* 103 sp1 <- <((((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ')) sp) / !.)> */
		func() bool {
			position927, tokenIndex927 := position, tokenIndex
			{
				position928 := position
				{
					position929, tokenIndex929 := position, tokenIndex
					{
						switch buffer[position] {
						case '\r':
							if buffer[position] != rune('\r') {
								goto l930
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l930
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l930
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l930
							}
							position++
						}
					}

					if !_rules[rulesp]() {
						goto l930
					}
					goto l929
				l930:
					position, tokenIndex = position929, tokenIndex929
					{
						position932, tokenIndex932 := position, tokenIndex
						if !matchDot() {
							goto l932
						}
						goto l927
					l932:
						position, tokenIndex = position932, tokenIndex932
					}
				}
			l929:
				add(rulesp1, position928)
			}
			return true
		l927:
			position, tokenIndex = position927, tokenIndex927
			return false
		},
		/* 104 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		func() bool {
			position933, tokenIndex933 := position, tokenIndex
			{
				position934 := position
				if buffer[position] != rune('\\') {
					goto l933
				}
				position++
				{
					switch buffer[position] {
					case '\\':
						if buffer[position] != rune('\\') {
							goto l933
						}
						position++
					case '\'':
						if buffer[position] != rune('\'') {
							goto l933
						}
						position++
					case '"':
						if buffer[position] != rune('"') {
							goto l933
						}
						position++
					case 'r':
						if buffer[position] != rune('r') {
							goto l933
						}
						position++
					case 'f':
						if buffer[position] != rune('f') {
							goto l933
						}
						position++
					case 'n':
						if buffer[position] != rune('n') {
							goto l933
						}
						position++
					case 't':
						if buffer[position] != rune('t') {
							goto l933
						}
						position++
					default:
						if buffer[position] != rune('b') {
							goto l933
						}
						position++
					}
				}

				add(ruleescape, position934)
			}
			return true
		l933:
			position, tokenIndex = position933, tokenIndex933
			return false
		},
		/* 105 comment <- <(spNoCR ('/' '/') (!'\n' .)* ('\n' / !.))> */
		nil,
		/* 106 st_expr <- <(st_modify_multi_1 / st_assign_multi / st_modify_multi_2 / ('1' '2' '3'))> */
		nil,
		/* 107 e0 <- <stmtRoot> */
		func() bool {
			position938, tokenIndex938 := position, tokenIndex
			{
				position939 := position
				if !_rules[rulestmtRoot]() {
					goto l938
				}
				add(rulee0, position939)
			}
			return true
		l938:
			position, tokenIndex = position938, tokenIndex938
			return false
		},
		/* 108 est <- <((&'(' e0) / (!{p.FlagsPush() } !{p.Config.DisableStmts = true} !{p.Config.DisableNDice = true} e0 !{p.FlagsPop() }))> */
		func() bool {
			position940, tokenIndex940 := position, tokenIndex
			{
				position941 := position
				{
					position942, tokenIndex942 := position, tokenIndex
					{
						position944, tokenIndex944 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l943
						}
						position++
						position, tokenIndex = position944, tokenIndex944
					}
					if !_rules[rulee0]() {
						goto l943
					}
					goto l942
				l943:
					position, tokenIndex = position942, tokenIndex942
					p.FlagsPush()
					p.Config.DisableStmts = true
					p.Config.DisableNDice = true
					if !_rules[rulee0]() {
						goto l940
					}
					p.FlagsPop()
				}
			l942:
				add(ruleest, position941)
			}
			return true
		l940:
			position, tokenIndex = position940, tokenIndex940
			return false
		},
		/* 109 st_assign_multi <- <(st_assign sp ','? sp)+> */
		nil,
		/* 110 st_star <- <('*' sp (float / number / sub))> */
		nil,
		/* 111 st_assign <- <((st_name2 sp (':' / '=') sp est Action159) / (st_name1 est Action160) / (st_name2r sp st_star sp (':' / '=') sp est Action161) / (st_name2r sp '*' sp (':' / '=') sp est Action162) / (st_name2r sp (':' / '=') sp est Action163) / (st_name1r est Action164) / ('&' st_name2 sp (':' / '=') sp Action165 <est> Action166) / ('&' st_name2r sp (':' / '=') sp Action167 <est> Action168))> */
		nil,
		/* 112 st_modify_multi_1 <- <(((st_name2 st_modify_rest1) / (st_name2r st_modify_rest1) / (st_name1 st_modify_rest) / (st_name1r st_modify_rest)) sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 113 st_modify_rest1 <- <(sp (('+' '=' sp <e0> Action169) / ('-' '=' sp <e0> Action170)))> */
		func() bool {
			position949, tokenIndex949 := position, tokenIndex
			{
				position950 := position
				if !_rules[rulesp]() {
					goto l949
				}
				{
					position951, tokenIndex951 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l952
					}
					position++
					if buffer[position] != rune('=') {
						goto l952
					}
					position++
					if !_rules[rulesp]() {
						goto l952
					}
					{
						position953 := position
						if !_rules[rulee0]() {
							goto l952
						}
						add(rulePegText, position953)
					}
					{
						add(ruleAction169, position)
					}
					goto l951
				l952:
					position, tokenIndex = position951, tokenIndex951
					if buffer[position] != rune('-') {
						goto l949
					}
					position++
					if buffer[position] != rune('=') {
						goto l949
					}
					position++
					if !_rules[rulesp]() {
						goto l949
					}
					{
						position955 := position
						if !_rules[rulee0]() {
							goto l949
						}
						add(rulePegText, position955)
					}
					{
						add(ruleAction170, position)
					}
				}
			l951:
				add(rulest_modify_rest1, position950)
			}
			return true
		l949:
			position, tokenIndex = position949, tokenIndex949
			return false
		},
		/* 114 st_modify_multi_2 <- <(st_modify2 sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 115 st_modify_multi_rest <- <(st_modify2 sp ','? sp)*> */
		func() bool {
			{
				position959 := position
			l960:
				{
					position961, tokenIndex961 := position, tokenIndex
					if !_rules[rulest_modify2]() {
						goto l961
					}
					if !_rules[rulesp]() {
						goto l961
					}
					{
						position962, tokenIndex962 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l962
						}
						position++
						goto l963
					l962:
						position, tokenIndex = position962, tokenIndex962
					}
				l963:
					if !_rules[rulesp]() {
						goto l961
					}
					goto l960
				l961:
					position, tokenIndex = position961, tokenIndex961
				}
				add(rulest_modify_multi_rest, position959)
			}
			return true
		},
		/* 116 st_modify2 <- <((st_name2 st_modify_rest) / (st_name2r st_modify_rest))> */
		func() bool {
			position964, tokenIndex964 := position, tokenIndex
			{
				position965 := position
				{
					position966, tokenIndex966 := position, tokenIndex
					if !_rules[rulest_name2]() {
						goto l967
					}
					if !_rules[rulest_modify_rest]() {
						goto l967
					}
					goto l966
				l967:
					position, tokenIndex = position966, tokenIndex966
					if !_rules[rulest_name2r]() {
						goto l964
					}
					if !_rules[rulest_modify_rest]() {
						goto l964
					}
				}
			l966:
				add(rulest_modify2, position965)
			}
			return true
		l964:
			position, tokenIndex = position964, tokenIndex964
			return false
		},
		/* 117 st_modify_rest <- <(sp (('+' '='? sp <e0> Action171) / (&'-' sp <e0> Action172) / ('-' '='? sp <e0> Action173)))> */
		func() bool {
			position968, tokenIndex968 := position, tokenIndex
			{
				position969 := position
				if !_rules[rulesp]() {
					goto l968
				}
				{
					position970, tokenIndex970 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l971
					}
					position++
					{
						position972, tokenIndex972 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l972
						}
						position++
						goto l973
					l972:
						position, tokenIndex = position972, tokenIndex972
					}
				l973:
					if !_rules[rulesp]() {
						goto l971
					}
					{
						position974 := position
						if !_rules[rulee0]() {
							goto l971
						}
						add(rulePegText, position974)
					}
					{
						add(ruleAction171, position)
					}
					goto l970
				l971:
					position, tokenIndex = position970, tokenIndex970
					{
						position977, tokenIndex977 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l976
						}
						position++
						position, tokenIndex = position977, tokenIndex977
					}
					if !_rules[rulesp]() {
						goto l976
					}
					{
						position978 := position
						if !_rules[rulee0]() {
							goto l976
						}
						add(rulePegText, position978)
					}
					{
						add(ruleAction172, position)
					}
					goto l970
				l976:
					position, tokenIndex = position970, tokenIndex970
					if buffer[position] != rune('-') {
						goto l968
					}
					position++
					{
						position980, tokenIndex980 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l980
						}
						position++
						goto l981
					l980:
						position, tokenIndex = position980, tokenIndex980
					}
				l981:
					if !_rules[rulesp]() {
						goto l968
					}
					{
						position982 := position
						if !_rules[rulee0]() {
							goto l968
						}
						add(rulePegText, position982)
					}
					{
						add(ruleAction173, position)
					}
				}
			l970:
				add(rulest_modify_rest, position969)
			}
			return true
		l968:
			position, tokenIndex = position968, tokenIndex968
			return false
		},
		/* 118 st_name1 <- <(<(id_ch0+ ':' id_ch0+)> Action174)> */
		func() bool {
			position984, tokenIndex984 := position, tokenIndex
			{
				position985 := position
				{
					position986 := position
					if !_rules[ruleid_ch0]() {
						goto l984
					}
				l987:
					{
						position988, tokenIndex988 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l988
						}
						goto l987
					l988:
						position, tokenIndex = position988, tokenIndex988
					}
					if buffer[position] != rune(':') {
						goto l984
					}
					position++
					if !_rules[ruleid_ch0]() {
						goto l984
					}
				l989:
					{
						position990, tokenIndex990 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l990
						}
						goto l989
					l990:
						position, tokenIndex = position990, tokenIndex990
					}
					add(rulePegText, position986)
				}
				{
					add(ruleAction174, position)
				}
				add(rulest_name1, position985)
			}
			return true
		l984:
			position, tokenIndex = position984, tokenIndex984
			return false
		},
		/* 119 st_name1r <- <(<id_ch0+> Action175)> */
		func() bool {
			position992, tokenIndex992 := position, tokenIndex
			{
				position993 := position
				{
					position994 := position
					if !_rules[ruleid_ch0]() {
						goto l992
					}
				l995:
					{
						position996, tokenIndex996 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l996
						}
						goto l995
					l996:
						position, tokenIndex = position996, tokenIndex996
					}
					add(rulePegText, position994)
				}
				{
					add(ruleAction175, position)
				}
				add(rulest_name1r, position993)
			}
			return true
		l992:
			position, tokenIndex = position992, tokenIndex992
			return false
		},
		/* 120 st_name2 <- <(<(id_ch0 id_ch* (':' id_ch+))> Action176)> */
		func() bool {
			position998, tokenIndex998 := position, tokenIndex
			{
				position999 := position
				{
					position1000 := position
					if !_rules[ruleid_ch0]() {
						goto l998
					}
				l1001:
					{
						position1002, tokenIndex1002 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l1002
						}
						goto l1001
					l1002:
						position, tokenIndex = position1002, tokenIndex1002
					}
					if buffer[position] != rune(':') {
						goto l998
					}
					position++
					if !_rules[ruleid_ch]() {
						goto l998
					}
				l1003:
					{
						position1004, tokenIndex1004 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l1004
						}
						goto l1003
					l1004:
						position, tokenIndex = position1004, tokenIndex1004
					}
					add(rulePegText, position1000)
				}
				{
					add(ruleAction176, position)
				}
				add(rulest_name2, position999)
			}
			return true
		l998:
			position, tokenIndex = position998, tokenIndex998
			return false
		},
		/* 121 st_name2r <- <((<(id_ch0 id_ch*)> Action177) / ('\'' <(id_ch0 / ((&(':') ':') | (&(' ') ' ') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])))+> '\'' Action178))> */
		func() bool {
			position1006, tokenIndex1006 := position, tokenIndex
			{
				position1007 := position
				{
					position1008, tokenIndex1008 := position, tokenIndex
					{
						position1010 := position
						if !_rules[ruleid_ch0]() {
							goto l1009
						}
					l1011:
						{
							position1012, tokenIndex1012 := position, tokenIndex
							if !_rules[ruleid_ch]() {
								goto l1012
							}
							goto l1011
						l1012:
							position, tokenIndex = position1012, tokenIndex1012
						}
						add(rulePegText, position1010)
					}
					{
						add(ruleAction177, position)
					}
					goto l1008
				l1009:
					position, tokenIndex = position1008, tokenIndex1008
					if buffer[position] != rune('\'') {
						goto l1006
					}
					position++
					{
						position1014 := position
						{
							position1017, tokenIndex1017 := position, tokenIndex
							if !_rules[ruleid_ch0]() {
								goto l1018
							}
							goto l1017
						l1018:
							position, tokenIndex = position1017, tokenIndex1017
							{
								switch buffer[position] {
								case ':':
									if buffer[position] != rune(':') {
										goto l1006
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l1006
									}
									position++
								default:
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l1006
									}
									position++
								}
							}

						}
					l1017:
					l1015:
						{
							position1016, tokenIndex1016 := position, tokenIndex
							{
								position1020, tokenIndex1020 := position, tokenIndex
								if !_rules[ruleid_ch0]() {
									goto l1021
								}
								goto l1020
							l1021:
								position, tokenIndex = position1020, tokenIndex1020
								{
									switch buffer[position] {
									case ':':
										if buffer[position] != rune(':') {
											goto l1016
										}
										position++
									case ' ':
										if buffer[position] != rune(' ') {
											goto l1016
										}
										position++
									default:
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l1016
										}
										position++
									}
								}

							}
						l1020:
							goto l1015
						l1016:
							position, tokenIndex = position1016, tokenIndex1016
						}
						add(rulePegText, position1014)
					}
					if buffer[position] != rune('\'') {
						goto l1006
					}
					position++
					{
						add(ruleAction178, position)
					}
				}
			l1008:
				add(rulest_name2r, position1007)
			}
			return true
		l1006:
			position, tokenIndex = position1006, tokenIndex1006
			return false
		},
		/* 122 id_ch0 <- <(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) .)> */
		func() bool {
			position1024, tokenIndex1024 := position, tokenIndex
			{
				position1025 := position
				{
					position1026, tokenIndex1026 := position, tokenIndex
					{
						switch buffer[position] {
						case '\x1e':
							if buffer[position] != rune('\x1e') {
								goto l1026
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l1026
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l1026
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l1026
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l1026
							}
							position++
						case '~':
							if buffer[position] != rune('~') {
								goto l1026
							}
							position++
						case '}':
							if buffer[position] != rune('}') {
								goto l1026
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l1026
							}
							position++
						case '{':
							if buffer[position] != rune('{') {
								goto l1026
							}
							position++
						case '`':
							if buffer[position] != rune('`') {
								goto l1026
							}
							position++
						case '^':
							if buffer[position] != rune('^') {
								goto l1026
							}
							position++
						case ']':
							if buffer[position] != rune(']') {
								goto l1026
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l1026
							}
							position++
						case '[':
							if buffer[position] != rune('[') {
								goto l1026
							}
							position++
						case '@':
							if buffer[position] != rune('@') {
								goto l1026
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l1026
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l1026
							}
							position++
						case '=':
							if buffer[position] != rune('=') {
								goto l1026
							}
							position++
						case '<':
							if buffer[position] != rune('<') {
								goto l1026
							}
							position++
						case ';':
							if buffer[position] != rune(';') {
								goto l1026
							}
							position++
						case ':':
							if buffer[position] != rune(':') {
								goto l1026
							}
							position++
						case '+':
							if buffer[position] != rune('+') {
								goto l1026
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l1026
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l1026
							}
							position++
						case '(':
							if buffer[position] != rune('(') {
								goto l1026
							}
							position++
						case '\'':
							if buffer[position] != rune('\'') {
								goto l1026
							}
							position++
						case '&':
							if buffer[position] != rune('&') {
								goto l1026
							}
							position++
						case '%':
							if buffer[position] != rune('%') {
								goto l1026
							}
							position++
						case '$':
							if buffer[position] != rune('$') {
								goto l1026
							}
							position++
						case '#':
							if buffer[position] != rune('#') {
								goto l1026
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l1026
							}
							position++
						case '!':
							if buffer[position] != rune('!') {
								goto l1026
							}
							position++
						case ',', '-', '.':
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l1026
							}
							position++
						default:
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l1026
							}
							position++
						}
					}

					goto l1024
				l1026:
					position, tokenIndex = position1026, tokenIndex1026
				}
				if !matchDot() {
					goto l1024
				}
				add(ruleid_ch0, position1025)
			}
			return true
		l1024:
			position, tokenIndex = position1024, tokenIndex1024
			return false
		},
		/* 123 id_ch <- <id_ch0> */
		func() bool {
			position1028, tokenIndex1028 := position, tokenIndex
			{
				position1029 := position
				if !_rules[ruleid_ch0]() {
					goto l1028
				}
				add(ruleid_ch, position1029)
			}
			return true
		l1028:
			position, tokenIndex = position1028, tokenIndex1028
			return false
		},
		/* 125 Action0 <- <{ p.AddOp(TypeHalt) }> */
		nil,
		/* 126 Action1 <- <{ p.BreakPush() }> */
		nil,
		/* 127 Action2 <- <{ p.ContinuePush() }> */
		nil,
		/* 128 Action3 <- <{ p.AddOp(TypeReturn); }> */
		nil,
		/* 129 Action4 <- <{ p.PushUndefined(); p.AddOp(TypeReturn); }> */
		nil,
		/* 130 Action5 <- <{ p.LoopBegin(); p.OffsetPush() }> */
		nil,
		/* 131 Action6 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 132 Action7 <- <{ p.AddOp(TypeJmp); p.OffsetPush(); p.OffsetJmpSetX(0, 2, true); p.OffsetJmpSetX(1, 1, false); p.ContinueSet(2); p.BreakSet(); p.OffsetPopN(3);p.LoopEnd(); }> */
		nil,
		/* 133 Action8 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 134 Action9 <- <{ p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush(); }> */
		nil,
		/* 135 Action10 <- <{ p.OffsetPopAndSet() }> */
		nil,
		/* 136 Action11 <- <{ p.CounterPush() }> */
		nil,
		/* 137 Action12 <- <{ p.CounterPush(); p.CounterAdd(1) }> */
		nil,
		/* 138 Action13 <- <{ p.NamePush(text) }> */
		nil,
		/* 139 Action14 <- <{ p.NamePush(text) }> */
		nil,
		/* 140 Action15 <- <{p.CounterAdd(1)}> */
		nil,
		/* 141 Action16 <- <{ p.NamePush(text) }> */
		nil,
		/* 142 Action17 <- <{ p.CodePush() }> */
		nil,
		nil,
		/* 144 Action18 <- <{  num := p.CounterPop(); arr := []string{}; for i:=IntType(0); i<num; i++ { arr = append(arr, p.NamePop()) }; p.AddStoreFunction(p.NamePop(), arr, string(text)) }> */
		nil,
		/* 145 Action19 <- <{ p.NamePush(text) }> */
		nil,
		/* 146 Action20 <- <{ p.AddStore(p.NamePop()) }> */
		nil,
		/* 147 Action21 <- <{ p.NamePush(text) }> */
		nil,
		/* 148 Action22 <- <{ p.CodePush() }> */
		nil,
		/* 149 Action23 <- <{ p.AddStoreComputed(p.NamePop(), string(text)) }> */
		nil,
		/* 150 Action24 <- <{ p.NamePush(text) }> */
		nil,
		/* 151 Action25 <- <{ p.NamePush(text) }> */
		nil,
		/* 152 Action26 <- <{ attr, objName := p.NamePop(), p.NamePop(); p.AddAttrSet(objName, attr, true) }> */
		nil,
		/* 153 Action27 <- <{ p.NamePush(text) }> */
		nil,
		/* 154 Action28 <- <{ p.AddStoreLocal(p.NamePop()) }> */
		nil,
		/* 155 Action29 <- <{ p.NamePush(text) }> */
		nil,
		/* 156 Action30 <- <{ p.NamePush(text) }> */
		nil,
		/* 157 Action31 <- <{ attr, objName := p.NamePop(), p.NamePop(); p.AddAttrSet(objName, attr, false) }> */
		nil,
		/* 158 Action32 <- <{ p.AddOp(TypeItemSet) }> */
		nil,
		/* 159 Action33 <- <{ p.AddOp(TypeSliceSet) }> */
		nil,
		/* 160 Action34 <- <{ p.PushUndefined() }> */
		nil,
		/* 161 Action35 <- <{ p.PushUndefined() }> */
		nil,
		/* 162 Action36 <- <{ p.PushUndefined() }> */
		nil,
		/* 163 Action37 <- <{ p.PushUndefined() }> */
		nil,
		/* 164 Action38 <- <{ p.AddOp(TypeSliceGet) }> */
		nil,
		/* 165 Action39 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 166 Action40 <- <{ p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush(); }> */
		nil,
		/* 167 Action41 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 168 Action42 <- <{ p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush() }> */
		nil,
		/* 169 Action43 <- <{ p.OffsetPopAndSet() }> */
		nil,
		/* 170 Action44 <- <{ p.CounterPush() }> */
		nil,
		/* 171 Action45 <- <{p.CounterAdd(1)}> */
		nil,
		/* 172 Action46 <- <{ p.PushStr(""); limit:=p.CounterPop()+1; for i:=IntType(0); i<limit; i++ { p.OffsetPopAndSet() } }> */
		nil,
		/* 173 Action47 <- <{p.AddOp(TypeJeDup); p.OffsetPush()}> */
		nil,
		/* 174 Action48 <- <{ p.AddOp(TypeJeDup); p.OffsetPush()}> */
		nil,
		/* 175 Action49 <- <{ p.AddOp(TypePushLast); p.OffsetPopAndSet(); p.OffsetPopAndSet();  }> */
		nil,
		/* 176 Action50 <- <{ p.AddOp(TypeLogicAnd) }> */
		nil,
		/* 177 Action51 <- <{ p.AddOp(TypeBitwiseOr) }> */
		nil,
		/* 178 Action52 <- <{ p.AddOp(TypeBitwiseAnd) }> */
		nil,
		/* 179 Action53 <- <{ p.AddOp(TypeCompLT) }> */
		nil,
		/* 180 Action54 <- <{ p.AddOp(TypeCompLE) }> */
		nil,
		/* 181 Action55 <- <{ p.AddOp(TypeCompEQ) }> */
		nil,
		/* 182 Action56 <- <{ p.AddOp(TypeCompNE) }> */
		nil,
		/* 183 Action57 <- <{ p.AddOp(TypeCompGE) }> */
		nil,
		/* 184 Action58 <- <{ p.AddOp(TypeCompGT) }> */
		nil,
		/* 185 Action59 <- <{ p.AddOp(TypeAdd) }> */
		nil,
		/* 186 Action60 <- <{ p.AddOp(TypeSubtract) }> */
		nil,
		/* 187 Action61 <- <{ p.AddOp(TypeMultiply) }> */
		nil,
		/* 188 Action62 <- <{ p.AddOp(TypeDivide) }> */
		nil,
		/* 189 Action63 <- <{ p.AddOp(TypeModulus) }> */
		nil,
		/* 190 Action64 <- <{ p.AddOp(TypeNullCoalescing) }> */
		nil,
		/* 191 Action65 <- <{ p.AddOp(TypeExponentiation) }> */
		nil,
		/* 192 Action66 <- <{ p.AddOp(TypeNegation) }> */
		nil,
		/* 193 Action67 <- <{ p.AddOp(TypePositive) }> */
		nil,
		/* 194 Action68 <- <{ p.AddOp(TypeDiceSetKeepLowNum) }> */
		nil,
		/* 195 Action69 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepLowNum) }> */
		nil,
		/* 196 Action70 <- <{ p.AddOp(TypeDiceSetKeepHighNum) }> */
		nil,
		/* 197 Action71 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepHighNum) }> */
		nil,
		/* 198 Action72 <- <{ p.AddOp(TypeDiceSetDropHighNum) }> */
		nil,
		/* 199 Action73 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetDropHighNum) }> */
		nil,
		/* 200 Action74 <- <{ p.AddOp(TypeDiceSetDropLowNum) }> */
		nil,
		/* 201 Action75 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetDropLowNum) }> */
		nil,
		/* 202 Action76 <- <{ p.AddOp(TypeDiceSetMin) }> */
		nil,
		/* 203 Action77 <- <{ p.AddOp(TypeDiceSetMax) }> */
		nil,
		/* 204 Action78 <- <{ p.PushIntNumber("2"); p.AddOp(TypeDiceSetTimes); p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepHighNum) }> */
		nil,
		/* 205 Action79 <- <{ p.PushIntNumber("2"); p.AddOp(TypeDiceSetTimes); p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepLowNum) }> */
		nil,
		/* 206 Action80 <- <{ p.CounterPush(); p.CounterAdd(IntType(token.begin)) }> */
		nil,
		/* 207 Action81 <- <{ p.AddDiceDetail(p.CounterPop(), IntType(token.end)) }> */
		nil,
		/* 208 Action82 <- <{ p.AddOp(TypeDiceInit); p.AddOp(TypeDiceSetTimes); }> */
		nil,
		/* 209 Action83 <- <{ p.AddOp(TypeDiceInit); }> */
		nil,
		/* 210 Action84 <- <{ p.AddOp(TypeDiceInit); p.AddOp(TypeDiceSetTimes); }> */
		nil,
		/* 211 Action85 <- <{ p.AddOp(TypeDice) }> */
		nil,
		/* 212 Action86 <- <{ p.AddOp(TypeWodSetPoints) }> */
		nil,
		/* 213 Action87 <- <{ p.AddOp(TypeWodSetThreshold) }> */
		nil,
		/* 214 Action88 <- <{ p.AddOp(TypeWodSetThresholdQ) }> */
		nil,
		/* 215 Action89 <- <{p.PushIntNumber("1")}> */
		nil,
		/* 216 Action90 <- <{ p.AddOp(TypeDiceCocBonus) }> */
		nil,
		/* 217 Action91 <- <{p.PushIntNumber("1")}> */
		nil,
		/* 218 Action92 <- <{ p.AddOp(TypeDiceCocPenalty) }> */
		nil,
		/* 219 Action93 <- <{ p.AddOp(TypeDice) }> */
		nil,
		/* 220 Action94 <- <{ p.AddOp(TypeDice) }> */
		nil,
		/* 221 Action95 <- <{ p.AddOp(TypePushDefaultExpr); p.AddOp(TypeDice) }> */
		nil,
		/* 222 Action96 <- <{ p.PushIntNumber("1") }> */
		nil,
		/* 223 Action97 <- <{ p.AddOp(TypePushDefaultExpr); p.AddOp(TypeDice) }> */
		nil,
		/* 224 Action98 <- <{ p.AddOp(TypeWodSetInit) }> */
		nil,
		/* 225 Action99 <- <{ p.AddOp(TypeWodSetPool) }> */
		nil,
		/* 226 Action100 <- <{ p.AddOp(TypeDiceWod) }> */
		nil,
		/* 227 Action101 <- <{ p.AddOp(TypeDCSetInit) }> */
		nil,
		/* 228 Action102 <- <{ p.AddOp(TypeDCSetPool) }> */
		nil,
		/* 229 Action103 <- <{ p.AddOp(TypeDCSetPoints) }> */
		nil,
		/* 230 Action104 <- <{ p.AddOp(TypeDiceDC) }> */
		nil,
		/* 231 Action105 <- <{ p.AddOp(TypeDiceFate) }> */
		nil,
		/* 232 Action106 <- <{ p.AddOp(TypeItemGet) }> */
		nil,
		/* 233 Action107 <- <{ p.WriteCode(TypeGetAttr, string("kh")) }> */
		nil,
		/* 234 Action108 <- <{ p.AddInvoke(1) }> */
		nil,
		/* 235 Action109 <- <{p.AddInvoke(0)}> */
		nil,
		/* 236 Action110 <- <{ p.WriteCode(TypeGetAttr, string("kl")) }> */
		nil,
		/* 237 Action111 <- <{ p.AddInvoke(1) }> */
		nil,
		/* 238 Action112 <- <{p.AddInvoke(0)}> */
		nil,
		/* 239 Action113 <- <{ p.AddOp(TypeItemGet) }> */
		nil,
		/* 240 Action114 <- <{ p.WriteCode(TypeGetAttr, string(text)) }> */
		nil,
		/* 241 Action115 <- <{ p.AddInvoke(0) }> */
		nil,
		/* 242 Action116 <- <{ p.CounterPush(); p.CounterAdd(1) }> */
		nil,
		/* 243 Action117 <- <{p.CounterAdd(1)}> */
		nil,
		/* 244 Action118 <- <{ p.AddInvoke(p.CounterPop()) }> */
		nil,
		/* 245 Action119 <- <{ p.CounterAdd(1) }> */
		nil,
		/* 246 Action120 <- <{ p.WriteCode(TypeLoadName, string(text)) }> */
		nil,
		/* 247 Action121 <- <{ p.PushIntNumber("1") }> */
		nil,
		/* 248 Action122 <- <{ p.PushIntNumber("0") }> */
		nil,
		/* 249 Action123 <- <{ p.PushUndefined() }> */
		nil,
		/* 250 Action124 <- <{ p.PushThis() }> */
		nil,
		/* 251 Action125 <- <{ p.WriteCode(TypeLoadNameRaw, string(text)) }> */
		nil,
		/* 252 Action126 <- <{ p.WriteCode(TypeLoadNameWithDetail, string(text)) }> */
		nil,
		/* 253 Action127 <- <{ p.PushArray(0) }> */
		nil,
		/* 254 Action128 <- <{ p.AddOp(TypePushRange) }> */
		nil,
		/* 255 Action129 <- <{ p.CounterPush(); p.CounterAdd(1) }> */
		nil,
		/* 256 Action130 <- <{p.CounterAdd(1)}> */
		nil,
		/* 257 Action131 <- <{ p.PushArray(p.CounterPop()) }> */
		nil,
		/* 258 Action132 <- <{ p.PushDict(0) }> */
		nil,
		/* 259 Action133 <- <{ p.CounterPush() }> */
		nil,
		/* 260 Action134 <- <{ p.PushDict(p.CounterPop()) }> */
		nil,
		/* 261 Action135 <- <{ p.CodePush() }> */
		nil,
		/* 262 Action136 <- <{  num := p.CounterPop(); arr := []string{}; for i:=IntType(0); i<num; i++ { arr = append(arr, p.NamePop()) }; p.AddStoreFunction("", arr, string(text)) }> */
		nil,
		/* 263 Action137 <- <{ p.PushIntNumber(string(text)) }> */
		nil,
		/* 264 Action138 <- <{ p.PushFloatNumber(string(text)) }> */
		nil,
		/* 265 Action139 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 266 Action140 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 267 Action141 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 268 Action142 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 269 Action143 <- <{ p.PushStr("") }> */
		nil,
		/* 270 Action144 <- <{ p.PushStr("") }> */
		nil,
		/* 271 Action145 <- <{ p.PushStr("") }> */
		nil,
		/* 272 Action146 <- <{ p.PushStr("") }> */
		nil,
		/* 273 Action147 <- <{ p.CounterPush() }> */
		nil,
		/* 274 Action148 <- <{p.CounterAdd(1)}> */
		nil,
		/* 275 Action149 <- <{p.CounterAdd(1)}> */
		nil,
		/* 276 Action150 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 277 Action151 <- <{ p.CounterPush() }> */
		nil,
		/* 278 Action152 <- <{p.CounterAdd(1)}> */
		nil,
		/* 279 Action153 <- <{p.CounterAdd(1)}> */
		nil,
		/* 280 Action154 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 281 Action155 <- <{ p.CounterPush() }> */
		nil,
		/* 282 Action156 <- <{ p.CounterPop() }> */
		nil,
		/* 283 Action157 <- <{ p.CounterPush() }> */
		nil,
		/* 284 Action158 <- <{ p.CounterPop() }> */
		nil,
		/* 285 Action159 <- <{ p.AddStName() }> */
		nil,
		/* 286 Action160 <- <{ p.AddStName() }> */
		nil,
		/* 287 Action161 <- <{ p.AddOp(TypeStX1) }> */
		nil,
		/* 288 Action162 <- <{ p.AddOp(TypeStX0) }> */
		nil,
		/* 289 Action163 <- <{ p.AddStName() }> */
		nil,
		/* 290 Action164 <- <{ p.AddStName() }> */
		nil,
		/* 291 Action165 <- <{ p.CodePush() }> */
		nil,
		/* 292 Action166 <- <{ p.CodePop(); p.AddStoreComputedOnStack(text); p.AddStName() }> */
		nil,
		/* 293 Action167 <- <{ p.CodePush() }> */
		nil,
		/* 294 Action168 <- <{ p.CodePop(); p.AddStoreComputedOnStack(text); p.AddStName() }> */
		nil,
		/* 295 Action169 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 296 Action170 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 297 Action171 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 298 Action172 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 299 Action173 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 300 Action174 <- <{ p.PushStr(text) }> */
		nil,
		/* 301 Action175 <- <{ p.PushStr(text) }> */
		nil,
		/* 302 Action176 <- <{ p.PushStr(text) }> */
		nil,
		/* 303 Action177 <- <{ p.PushStr(text) }> */
		nil,
		/* 304 Action178 <- <{ p.PushStr(text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
