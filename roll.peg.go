package dicescript

// Code generated by peg -switch -inline roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint16

const (
	ruleUnknown pegRule = iota
	ruledicescript
	rulestmtUnderground
	rulestmtRoot
	rulestmtLines
	rulenextLine
	rule_switchEnablePrefix
	rule_switchTrue
	rule_switchFalse
	ruleflagsSwitch
	rulestmtWithSemicolon
	rulestmtWithBlock
	rulestmtBreak
	rulestmtContinue
	rulestmtReturn
	rulestmtWhile
	ruleblock
	rulestmtElse
	rulestmtIf
	rulefunc_def_params
	rulestmtFunc
	rulestmtAssign
	ruleexprRoot
	rule_step
	rule_sliceSuffix
	ruleexprSlice
	ruleexprValueIfExists
	ruleexprTernary
	ruleexprLogicOr
	ruleexprLogicAnd
	ruleexprBitwiseOr
	ruleexprBitwiseAnd
	ruleexprCompare
	ruleexprAdditive
	ruleexprMultiplicative
	ruleexprNullCoalescing
	ruleexprExp
	ruleexprUnaryNeg
	ruleexprUnaryPos
	rulenos
	rule_diceMod
	rule_diceMod2
	rule_dicePearMod
	ruledetailStart
	ruledetailEnd
	rule_diceType1
	rule_diceType2
	rule_diceExpr1
	rule_diceExpr2
	rule_diceExprX
	rule_wodTypeMain
	rule_wodDiceType
	rule_wodMain
	rule_cocDiceType
	rule_diceCocBonus
	rule_diceCocPenalty
	rule_dcDiceType
	rule_fateDiceType
	ruleexprDice
	ruleitem_get
	rulearray_call
	ruleattr_get
	rulefunc_invoke
	ruledict_item
	rulevalue_id_without_colon
	rulevalue
	rulenumber
	rulefloat
	rulestrPart
	rulestrPart1
	rulestrPart2
	rulestrPart3
	rulefstring
	rulekeywords
	ruleidentifier_ch0
	ruleidentifier_ch
	ruleno_keywords
	ruleidentifier
	ruleidentifierWithoutColon
	rulesub
	ruleparenOpen
	ruleparenClose
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	rulenullCoalescing
	rulebitwiseOr
	rulebitwiseAnd
	rulelogicOr
	rulelogicAnd
	rulelt
	rulegt
	rulele
	rulege
	ruleeq
	rulene
	rulesp
	rulespNoCR
	rulesp1
	ruleescape
	rulecomment
	rulest_expr
	rulee0
	ruleest
	rulest_assign_multi
	rulest_assign
	rulest_modify_multi_1
	rulest_modify_rest1
	rulest_modify_multi_2
	rulest_modify_multi_rest
	rulest_modify2
	rulest_modify_rest
	rulest_name1
	rulest_name1r
	rulest_name2
	rulest_name2r
	ruleid_ch0
	ruleid_ch
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	rulePegText
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
	ruleAction75
	ruleAction76
	ruleAction77
	ruleAction78
	ruleAction79
	ruleAction80
	ruleAction81
	ruleAction82
	ruleAction83
	ruleAction84
	ruleAction85
	ruleAction86
	ruleAction87
	ruleAction88
	ruleAction89
	ruleAction90
	ruleAction91
	ruleAction92
	ruleAction93
	ruleAction94
	ruleAction95
	ruleAction96
	ruleAction97
	ruleAction98
	ruleAction99
	ruleAction100
	ruleAction101
	ruleAction102
	ruleAction103
	ruleAction104
	ruleAction105
	ruleAction106
	ruleAction107
	ruleAction108
	ruleAction109
	ruleAction110
	ruleAction111
	ruleAction112
	ruleAction113
	ruleAction114
	ruleAction115
	ruleAction116
	ruleAction117
	ruleAction118
	ruleAction119
	ruleAction120
	ruleAction121
	ruleAction122
	ruleAction123
	ruleAction124
	ruleAction125
	ruleAction126
	ruleAction127
	ruleAction128
	ruleAction129
	ruleAction130
	ruleAction131
	ruleAction132
	ruleAction133
	ruleAction134
	ruleAction135
	ruleAction136
	ruleAction137
	ruleAction138
	ruleAction139
	ruleAction140
	ruleAction141
	ruleAction142
	ruleAction143
	ruleAction144
	ruleAction145
	ruleAction146
	ruleAction147
	ruleAction148
	ruleAction149
	ruleAction150
	ruleAction151
	ruleAction152
	ruleAction153
	ruleAction154
	ruleAction155
	ruleAction156
	ruleAction157
	ruleAction158
	ruleAction159
	ruleAction160
	ruleAction161
	ruleAction162
	ruleAction163
	ruleAction164
	ruleAction165
	ruleAction166
	ruleAction167
	ruleAction168
	ruleAction169
	ruleAction170
	ruleAction171
	ruleAction172
)

var rul3s = [...]string{
	"Unknown",
	"dicescript",
	"stmtUnderground",
	"stmtRoot",
	"stmtLines",
	"nextLine",
	"_switchEnablePrefix",
	"_switchTrue",
	"_switchFalse",
	"flagsSwitch",
	"stmtWithSemicolon",
	"stmtWithBlock",
	"stmtBreak",
	"stmtContinue",
	"stmtReturn",
	"stmtWhile",
	"block",
	"stmtElse",
	"stmtIf",
	"func_def_params",
	"stmtFunc",
	"stmtAssign",
	"exprRoot",
	"_step",
	"_sliceSuffix",
	"exprSlice",
	"exprValueIfExists",
	"exprTernary",
	"exprLogicOr",
	"exprLogicAnd",
	"exprBitwiseOr",
	"exprBitwiseAnd",
	"exprCompare",
	"exprAdditive",
	"exprMultiplicative",
	"exprNullCoalescing",
	"exprExp",
	"exprUnaryNeg",
	"exprUnaryPos",
	"nos",
	"_diceMod",
	"_diceMod2",
	"_dicePearMod",
	"detailStart",
	"detailEnd",
	"_diceType1",
	"_diceType2",
	"_diceExpr1",
	"_diceExpr2",
	"_diceExprX",
	"_wodTypeMain",
	"_wodDiceType",
	"_wodMain",
	"_cocDiceType",
	"_diceCocBonus",
	"_diceCocPenalty",
	"_dcDiceType",
	"_fateDiceType",
	"exprDice",
	"item_get",
	"array_call",
	"attr_get",
	"func_invoke",
	"dict_item",
	"value_id_without_colon",
	"value",
	"number",
	"float",
	"strPart",
	"strPart1",
	"strPart2",
	"strPart3",
	"fstring",
	"keywords",
	"identifier_ch0",
	"identifier_ch",
	"no_keywords",
	"identifier",
	"identifierWithoutColon",
	"sub",
	"parenOpen",
	"parenClose",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"nullCoalescing",
	"bitwiseOr",
	"bitwiseAnd",
	"logicOr",
	"logicAnd",
	"lt",
	"gt",
	"le",
	"ge",
	"eq",
	"ne",
	"sp",
	"spNoCR",
	"sp1",
	"escape",
	"comment",
	"st_expr",
	"e0",
	"est",
	"st_assign_multi",
	"st_assign",
	"st_modify_multi_1",
	"st_modify_rest1",
	"st_modify_multi_2",
	"st_modify_multi_rest",
	"st_modify2",
	"st_modify_rest",
	"st_name1",
	"st_name1r",
	"st_name2",
	"st_name2r",
	"id_ch0",
	"id_ch",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"PegText",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
	"Action75",
	"Action76",
	"Action77",
	"Action78",
	"Action79",
	"Action80",
	"Action81",
	"Action82",
	"Action83",
	"Action84",
	"Action85",
	"Action86",
	"Action87",
	"Action88",
	"Action89",
	"Action90",
	"Action91",
	"Action92",
	"Action93",
	"Action94",
	"Action95",
	"Action96",
	"Action97",
	"Action98",
	"Action99",
	"Action100",
	"Action101",
	"Action102",
	"Action103",
	"Action104",
	"Action105",
	"Action106",
	"Action107",
	"Action108",
	"Action109",
	"Action110",
	"Action111",
	"Action112",
	"Action113",
	"Action114",
	"Action115",
	"Action116",
	"Action117",
	"Action118",
	"Action119",
	"Action120",
	"Action121",
	"Action122",
	"Action123",
	"Action124",
	"Action125",
	"Action126",
	"Action127",
	"Action128",
	"Action129",
	"Action130",
	"Action131",
	"Action132",
	"Action133",
	"Action134",
	"Action135",
	"Action136",
	"Action137",
	"Action138",
	"Action139",
	"Action140",
	"Action141",
	"Action142",
	"Action143",
	"Action144",
	"Action145",
	"Action146",
	"Action147",
	"Action148",
	"Action149",
	"Action150",
	"Action151",
	"Action152",
	"Action153",
	"Action154",
	"Action155",
	"Action156",
	"Action157",
	"Action158",
	"Action159",
	"Action160",
	"Action161",
	"Action162",
	"Action163",
	"Action164",
	"Action165",
	"Action166",
	"Action167",
	"Action168",
	"Action169",
	"Action170",
	"Action171",
	"Action172",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	ParserData
	Context

	Buffer string
	buffer []rune
	rules  [295]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOp(TypeHalt)
		case ruleAction1:
			p.BreakPush()
		case ruleAction2:
			p.ContinuePush()
		case ruleAction3:
			p.AddOp(TypeReturn)
		case ruleAction4:
			p.PushUndefined()
			p.AddOp(TypeReturn)
		case ruleAction5:
			p.LoopBegin()
			p.OffsetPush()
		case ruleAction6:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction7:
			p.AddOp(TypeJmp)
			p.OffsetPush()
			p.OffsetJmpSetX(0, 2, true)
			p.OffsetJmpSetX(1, 1, false)
			p.ContinueSet(2)
			p.BreakSet()
			p.OffsetPopN(3)
			p.LoopEnd()
		case ruleAction8:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction9:
			p.AddOp(TypeJmp)
			p.OffsetPopAndSet()
			p.OffsetPush()
		case ruleAction10:
			p.OffsetPopAndSet()
		case ruleAction11:
			p.CounterPush()
		case ruleAction12:
			p.CounterPush()
			p.CounterAdd(1)
		case ruleAction13:
			p.NamePush(text)
		case ruleAction14:
			p.NamePush(text)
		case ruleAction15:
			p.CounterAdd(1)
		case ruleAction16:
			p.NamePush(text)
		case ruleAction17:
			p.CodePush()
		case ruleAction18:
			num := p.CounterPop()
			arr := []string{}
			for i := int64(0); i < num; i++ {
				arr = append(arr, p.NamePop())
			}
			p.AddStoreFunction(p.NamePop(), arr, string(text))
		case ruleAction19:
			p.NamePush(text)
		case ruleAction20:
			p.AddStore(p.NamePop())
		case ruleAction21:
			p.NamePush(text)
		case ruleAction22:
			p.CodePush()
		case ruleAction23:
			p.AddStoreComputed(p.NamePop(), string(text))
		case ruleAction24:
			p.NamePush(text)
		case ruleAction25:
			p.NamePush(text)
		case ruleAction26:
			attr, objName := p.NamePop(), p.NamePop()
			p.AddAttrSet(objName, attr, true)
		case ruleAction27:
			p.NamePush(text)
		case ruleAction28:
			p.AddStoreLocal(p.NamePop())
		case ruleAction29:
			p.NamePush(text)
		case ruleAction30:
			p.NamePush(text)
		case ruleAction31:
			attr, objName := p.NamePop(), p.NamePop()
			p.AddAttrSet(objName, attr, false)
		case ruleAction32:
			p.AddOp(TypeItemSet)
		case ruleAction33:
			p.AddOp(TypeSliceSet)
		case ruleAction34:
			p.PushUndefined()
		case ruleAction35:
			p.PushUndefined()
		case ruleAction36:
			p.PushUndefined()
		case ruleAction37:
			p.PushUndefined()
		case ruleAction38:
			p.AddOp(TypeSliceGet)
		case ruleAction39:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction40:
			p.AddOp(TypeJmp)
			p.OffsetPopAndSet()
			p.OffsetPush()
		case ruleAction41:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction42:
			p.AddOp(TypeJmp)
			p.OffsetPopAndSet()
			p.OffsetPush()
		case ruleAction43:
			p.OffsetPopAndSet()
		case ruleAction44:
			p.CounterPush()
		case ruleAction45:
			p.CounterAdd(1)
		case ruleAction46:
			p.PushStr("")
			limit := p.CounterPop() + 1
			for i := int64(0); i < limit; i++ {
				p.OffsetPopAndSet()
			}
		case ruleAction47:
			p.AddOp(TypeJeDup)
			p.OffsetPush()
		case ruleAction48:
			p.AddOp(TypeJeDup)
			p.OffsetPush()
		case ruleAction49:
			p.AddOp(TypePushLast)
			p.OffsetPopAndSet()
			p.OffsetPopAndSet()
		case ruleAction50:
			p.AddOp(TypeLogicAnd)
		case ruleAction51:
			p.AddOp(TypeBitwiseOr)
		case ruleAction52:
			p.AddOp(TypeBitwiseAnd)
		case ruleAction53:
			p.AddOp(TypeCompLT)
		case ruleAction54:
			p.AddOp(TypeCompLE)
		case ruleAction55:
			p.AddOp(TypeCompEQ)
		case ruleAction56:
			p.AddOp(TypeCompNE)
		case ruleAction57:
			p.AddOp(TypeCompGE)
		case ruleAction58:
			p.AddOp(TypeCompGT)
		case ruleAction59:
			p.AddOp(TypeAdd)
		case ruleAction60:
			p.AddOp(TypeSubtract)
		case ruleAction61:
			p.AddOp(TypeMultiply)
		case ruleAction62:
			p.AddOp(TypeDivide)
		case ruleAction63:
			p.AddOp(TypeModulus)
		case ruleAction64:
			p.AddOp(TypeNullCoalescing)
		case ruleAction65:
			p.AddOp(TypeExponentiation)
		case ruleAction66:
			p.AddOp(TypeNegation)
		case ruleAction67:
			p.AddOp(TypePositive)
		case ruleAction68:
			p.AddOp(TypeDiceSetKeepLowNum)
		case ruleAction69:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepLowNum)
		case ruleAction70:
			p.AddOp(TypeDiceSetKeepHighNum)
		case ruleAction71:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepHighNum)
		case ruleAction72:
			p.AddOp(TypeDiceSetDropHighNum)
		case ruleAction73:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetDropHighNum)
		case ruleAction74:
			p.AddOp(TypeDiceSetDropLowNum)
		case ruleAction75:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetDropLowNum)
		case ruleAction76:
			p.AddOp(TypeDiceSetMin)
		case ruleAction77:
			p.AddOp(TypeDiceSetMax)
		case ruleAction78:
			p.PushIntNumber("2")
			p.AddOp(TypeDiceSetTimes)
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepHighNum)
		case ruleAction79:
			p.PushIntNumber("2")
			p.AddOp(TypeDiceSetTimes)
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepLowNum)
		case ruleAction80:
			p.CounterPush()
			p.CounterAdd(int64(token.begin))
		case ruleAction81:
			p.AddDiceDetail(p.CounterPop(), int64(token.end))
		case ruleAction82:
			p.AddOp(TypeDiceInit)
			p.AddOp(TypeDiceSetTimes)
		case ruleAction83:
			p.AddOp(TypeDiceInit)
		case ruleAction84:
			p.AddOp(TypeDice)
		case ruleAction85:
			p.AddOp(TypeWodSetPoints)
		case ruleAction86:
			p.AddOp(TypeWodSetThreshold)
		case ruleAction87:
			p.AddOp(TypeWodSetThresholdQ)
		case ruleAction88:
			p.PushIntNumber("1")
		case ruleAction89:
			p.AddOp(TypeDiceCocBonus)
		case ruleAction90:
			p.PushIntNumber("1")
		case ruleAction91:
			p.AddOp(TypeDiceCocPenalty)
		case ruleAction92:
			p.AddOp(TypeDice)
		case ruleAction93:
			p.AddOp(TypeDice)
		case ruleAction94:
			p.AddOp(TypeWodSetInit)
		case ruleAction95:
			p.AddOp(TypeWodSetPool)
		case ruleAction96:
			p.AddOp(TypeDiceWod)
		case ruleAction97:
			p.AddOp(TypeDCSetInit)
		case ruleAction98:
			p.AddOp(TypeDCSetPool)
		case ruleAction99:
			p.AddOp(TypeDCSetPoints)
		case ruleAction100:
			p.AddOp(TypeDiceDC)
		case ruleAction101:
			p.AddOp(TypeDiceFate)
		case ruleAction102:
			p.AddOp(TypeItemGet)
		case ruleAction103:
			p.WriteCode(TypeGetAttr, string("kh"))
		case ruleAction104:
			p.AddInvoke(1)
		case ruleAction105:
			p.AddInvoke(0)
		case ruleAction106:
			p.WriteCode(TypeGetAttr, string("kl"))
		case ruleAction107:
			p.AddInvoke(1)
		case ruleAction108:
			p.AddInvoke(0)
		case ruleAction109:
			p.AddOp(TypeItemGet)
		case ruleAction110:
			p.WriteCode(TypeGetAttr, string(text))
		case ruleAction111:
			p.AddInvoke(0)
		case ruleAction112:
			p.CounterPush()
			p.CounterAdd(1)
		case ruleAction113:
			p.CounterAdd(1)
		case ruleAction114:
			p.AddInvoke(p.CounterPop())
		case ruleAction115:
			p.CounterAdd(1)
		case ruleAction116:
			p.WriteCode(TypeLoadName, string(text))
		case ruleAction117:
			p.PushIntNumber("1")
		case ruleAction118:
			p.PushIntNumber("0")
		case ruleAction119:
			p.PushUndefined()
		case ruleAction120:
			p.PushThis()
		case ruleAction121:
			p.WriteCode(TypeLoadNameRaw, string(text))
		case ruleAction122:
			p.WriteCode(TypeLoadNameWithDetail, string(text))
		case ruleAction123:
			p.PushArray(0)
		case ruleAction124:
			p.AddOp(TypePushRange)
		case ruleAction125:
			p.CounterPush()
			p.CounterAdd(1)
		case ruleAction126:
			p.CounterAdd(1)
		case ruleAction127:
			p.PushArray(p.CounterPop())
		case ruleAction128:
			p.PushDict(0)
		case ruleAction129:
			p.CounterPush()
		case ruleAction130:
			p.PushDict(p.CounterPop())
		case ruleAction131:
			p.CodePush()
		case ruleAction132:
			num := p.CounterPop()
			arr := []string{}
			for i := int64(0); i < num; i++ {
				arr = append(arr, p.NamePop())
			}
			p.AddStoreFunction("", arr, string(text))
		case ruleAction133:
			p.PushIntNumber(string(text))
		case ruleAction134:
			p.PushFloatNumber(string(text))
		case ruleAction135:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction136:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction137:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction138:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction139:
			p.PushStr("")
		case ruleAction140:
			p.PushStr("")
		case ruleAction141:
			p.PushStr("")
		case ruleAction142:
			p.PushStr("")
		case ruleAction143:
			p.CounterPush()
		case ruleAction144:
			p.CounterAdd(1)
		case ruleAction145:
			p.CounterAdd(1)
		case ruleAction146:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction147:
			p.CounterPush()
		case ruleAction148:
			p.CounterAdd(1)
		case ruleAction149:
			p.CounterAdd(1)
		case ruleAction150:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction151:
			p.CounterPush()
		case ruleAction152:
			p.CounterPop()
		case ruleAction153:
			p.CounterPush()
		case ruleAction154:
			p.CounterPop()
		case ruleAction155:
			p.AddStName()
		case ruleAction156:
			p.AddStName()
		case ruleAction157:
			p.AddStName()
		case ruleAction158:
			p.AddStName()
		case ruleAction159:
			p.CodePush()
		case ruleAction160:
			p.CodePop()
			p.AddStoreComputedOnStack(text)
			p.AddStName()
		case ruleAction161:
			p.CodePush()
		case ruleAction162:
			p.CodePop()
			p.AddStoreComputedOnStack(text)
			p.AddStName()
		case ruleAction163:
			p.AddStModify("+", text)
		case ruleAction164:
			p.AddStModify("-", text)
		case ruleAction165:
			p.AddStModify("+", text)
		case ruleAction166:
			p.AddStModify("-", text)
		case ruleAction167:
			p.AddStModify("-", text)
		case ruleAction168:
			p.PushStr(text)
		case ruleAction169:
			p.PushStr(text)
		case ruleAction170:
			p.PushStr(text)
		case ruleAction171:
			p.PushStr(text)
		case ruleAction172:
			p.PushStr(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 dicescript <- <(sp stmtUnderground Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				{
					position2 := position
					{
						position3, tokenIndex3 := position, tokenIndex
						if buffer[position] != rune('^') {
							goto l4
						}
						position++
						if buffer[position] != rune('s') {
							goto l4
						}
						position++
						if buffer[position] != rune('t') {
							goto l4
						}
						position++
						{
							position5 := position
							{
								position6, tokenIndex6 := position, tokenIndex
								{
									position8 := position
									{
										position9, tokenIndex9 := position, tokenIndex
										if !_rules[rulest_name2]() {
											goto l10
										}
										if !_rules[rulest_modify_rest1]() {
											goto l10
										}
										goto l9
									l10:
										position, tokenIndex = position9, tokenIndex9
										if !_rules[rulest_name2r]() {
											goto l11
										}
										if !_rules[rulest_modify_rest1]() {
											goto l11
										}
										goto l9
									l11:
										position, tokenIndex = position9, tokenIndex9
										if !_rules[rulest_name1]() {
											goto l12
										}
										if !_rules[rulest_modify_rest]() {
											goto l12
										}
										goto l9
									l12:
										position, tokenIndex = position9, tokenIndex9
										if !_rules[rulest_name1r]() {
											goto l7
										}
										if !_rules[rulest_modify_rest]() {
											goto l7
										}
									}
								l9:
									if !_rules[rulesp]() {
										goto l7
									}
									{
										position13, tokenIndex13 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l13
										}
										position++
										goto l14
									l13:
										position, tokenIndex = position13, tokenIndex13
									}
								l14:
									if !_rules[rulesp]() {
										goto l7
									}
									if !_rules[rulest_modify_multi_rest]() {
										goto l7
									}
									add(rulest_modify_multi_1, position8)
								}
								goto l6
							l7:
								position, tokenIndex = position6, tokenIndex6
								{
									position16 := position
									{
										position19 := position
										{
											position20, tokenIndex20 := position, tokenIndex
											if !_rules[rulest_name2]() {
												goto l21
											}
											if !_rules[rulesp]() {
												goto l21
											}
											{
												position22, tokenIndex22 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l23
												}
												position++
												goto l22
											l23:
												position, tokenIndex = position22, tokenIndex22
												if buffer[position] != rune('=') {
													goto l21
												}
												position++
											}
										l22:
											if !_rules[rulesp]() {
												goto l21
											}
											if !_rules[ruleest]() {
												goto l21
											}
											{
												add(ruleAction155, position)
											}
											goto l20
										l21:
											position, tokenIndex = position20, tokenIndex20
											if !_rules[rulest_name1]() {
												goto l25
											}
											if !_rules[ruleest]() {
												goto l25
											}
											{
												add(ruleAction156, position)
											}
											goto l20
										l25:
											position, tokenIndex = position20, tokenIndex20
											if !_rules[rulest_name2r]() {
												goto l27
											}
											if !_rules[rulesp]() {
												goto l27
											}
											{
												position28, tokenIndex28 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l29
												}
												position++
												goto l28
											l29:
												position, tokenIndex = position28, tokenIndex28
												if buffer[position] != rune('=') {
													goto l27
												}
												position++
											}
										l28:
											if !_rules[rulesp]() {
												goto l27
											}
											if !_rules[ruleest]() {
												goto l27
											}
											{
												add(ruleAction157, position)
											}
											goto l20
										l27:
											position, tokenIndex = position20, tokenIndex20
											if !_rules[rulest_name1r]() {
												goto l31
											}
											if !_rules[ruleest]() {
												goto l31
											}
											{
												add(ruleAction158, position)
											}
											goto l20
										l31:
											position, tokenIndex = position20, tokenIndex20
											if buffer[position] != rune('&') {
												goto l33
											}
											position++
											if !_rules[rulest_name2]() {
												goto l33
											}
											if !_rules[rulesp]() {
												goto l33
											}
											{
												position34, tokenIndex34 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l35
												}
												position++
												goto l34
											l35:
												position, tokenIndex = position34, tokenIndex34
												if buffer[position] != rune('=') {
													goto l33
												}
												position++
											}
										l34:
											if !_rules[rulesp]() {
												goto l33
											}
											{
												add(ruleAction159, position)
											}
											{
												position37 := position
												if !_rules[ruleest]() {
													goto l33
												}
												add(rulePegText, position37)
											}
											{
												add(ruleAction160, position)
											}
											goto l20
										l33:
											position, tokenIndex = position20, tokenIndex20
											if buffer[position] != rune('&') {
												goto l15
											}
											position++
											if !_rules[rulest_name2r]() {
												goto l15
											}
											if !_rules[rulesp]() {
												goto l15
											}
											{
												position39, tokenIndex39 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l40
												}
												position++
												goto l39
											l40:
												position, tokenIndex = position39, tokenIndex39
												if buffer[position] != rune('=') {
													goto l15
												}
												position++
											}
										l39:
											if !_rules[rulesp]() {
												goto l15
											}
											{
												add(ruleAction161, position)
											}
											{
												position42 := position
												if !_rules[ruleest]() {
													goto l15
												}
												add(rulePegText, position42)
											}
											{
												add(ruleAction162, position)
											}
										}
									l20:
										add(rulest_assign, position19)
									}
									if !_rules[rulesp]() {
										goto l15
									}
									{
										position44, tokenIndex44 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l44
										}
										position++
										goto l45
									l44:
										position, tokenIndex = position44, tokenIndex44
									}
								l45:
									if !_rules[rulesp]() {
										goto l15
									}
								l17:
									{
										position18, tokenIndex18 := position, tokenIndex
										{
											position46 := position
											{
												position47, tokenIndex47 := position, tokenIndex
												if !_rules[rulest_name2]() {
													goto l48
												}
												if !_rules[rulesp]() {
													goto l48
												}
												{
													position49, tokenIndex49 := position, tokenIndex
													if buffer[position] != rune(':') {
														goto l50
													}
													position++
													goto l49
												l50:
													position, tokenIndex = position49, tokenIndex49
													if buffer[position] != rune('=') {
														goto l48
													}
													position++
												}
											l49:
												if !_rules[rulesp]() {
													goto l48
												}
												if !_rules[ruleest]() {
													goto l48
												}
												{
													add(ruleAction155, position)
												}
												goto l47
											l48:
												position, tokenIndex = position47, tokenIndex47
												if !_rules[rulest_name1]() {
													goto l52
												}
												if !_rules[ruleest]() {
													goto l52
												}
												{
													add(ruleAction156, position)
												}
												goto l47
											l52:
												position, tokenIndex = position47, tokenIndex47
												if !_rules[rulest_name2r]() {
													goto l54
												}
												if !_rules[rulesp]() {
													goto l54
												}
												{
													position55, tokenIndex55 := position, tokenIndex
													if buffer[position] != rune(':') {
														goto l56
													}
													position++
													goto l55
												l56:
													position, tokenIndex = position55, tokenIndex55
													if buffer[position] != rune('=') {
														goto l54
													}
													position++
												}
											l55:
												if !_rules[rulesp]() {
													goto l54
												}
												if !_rules[ruleest]() {
													goto l54
												}
												{
													add(ruleAction157, position)
												}
												goto l47
											l54:
												position, tokenIndex = position47, tokenIndex47
												if !_rules[rulest_name1r]() {
													goto l58
												}
												if !_rules[ruleest]() {
													goto l58
												}
												{
													add(ruleAction158, position)
												}
												goto l47
											l58:
												position, tokenIndex = position47, tokenIndex47
												if buffer[position] != rune('&') {
													goto l60
												}
												position++
												if !_rules[rulest_name2]() {
													goto l60
												}
												if !_rules[rulesp]() {
													goto l60
												}
												{
													position61, tokenIndex61 := position, tokenIndex
													if buffer[position] != rune(':') {
														goto l62
													}
													position++
													goto l61
												l62:
													position, tokenIndex = position61, tokenIndex61
													if buffer[position] != rune('=') {
														goto l60
													}
													position++
												}
											l61:
												if !_rules[rulesp]() {
													goto l60
												}
												{
													add(ruleAction159, position)
												}
												{
													position64 := position
													if !_rules[ruleest]() {
														goto l60
													}
													add(rulePegText, position64)
												}
												{
													add(ruleAction160, position)
												}
												goto l47
											l60:
												position, tokenIndex = position47, tokenIndex47
												if buffer[position] != rune('&') {
													goto l18
												}
												position++
												if !_rules[rulest_name2r]() {
													goto l18
												}
												if !_rules[rulesp]() {
													goto l18
												}
												{
													position66, tokenIndex66 := position, tokenIndex
													if buffer[position] != rune(':') {
														goto l67
													}
													position++
													goto l66
												l67:
													position, tokenIndex = position66, tokenIndex66
													if buffer[position] != rune('=') {
														goto l18
													}
													position++
												}
											l66:
												if !_rules[rulesp]() {
													goto l18
												}
												{
													add(ruleAction161, position)
												}
												{
													position69 := position
													if !_rules[ruleest]() {
														goto l18
													}
													add(rulePegText, position69)
												}
												{
													add(ruleAction162, position)
												}
											}
										l47:
											add(rulest_assign, position46)
										}
										if !_rules[rulesp]() {
											goto l18
										}
										{
											position71, tokenIndex71 := position, tokenIndex
											if buffer[position] != rune(',') {
												goto l71
											}
											position++
											goto l72
										l71:
											position, tokenIndex = position71, tokenIndex71
										}
									l72:
										if !_rules[rulesp]() {
											goto l18
										}
										goto l17
									l18:
										position, tokenIndex = position18, tokenIndex18
									}
									add(rulest_assign_multi, position16)
								}
								goto l6
							l15:
								position, tokenIndex = position6, tokenIndex6
								{
									position74 := position
									if !_rules[rulest_modify2]() {
										goto l73
									}
									if !_rules[rulesp]() {
										goto l73
									}
									{
										position75, tokenIndex75 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l75
										}
										position++
										goto l76
									l75:
										position, tokenIndex = position75, tokenIndex75
									}
								l76:
									if !_rules[rulesp]() {
										goto l73
									}
									if !_rules[rulest_modify_multi_rest]() {
										goto l73
									}
									add(rulest_modify_multi_2, position74)
								}
								goto l6
							l73:
								position, tokenIndex = position6, tokenIndex6
								if buffer[position] != rune('1') {
									goto l4
								}
								position++
								if buffer[position] != rune('2') {
									goto l4
								}
								position++
								if buffer[position] != rune('3') {
									goto l4
								}
								position++
							}
						l6:
							add(rulest_expr, position5)
						}
						goto l3
					l4:
						position, tokenIndex = position3, tokenIndex3
						if !_rules[rulestmtRoot]() {
							goto l0
						}
					}
				l3:
					add(rulestmtUnderground, position2)
				}
				{
					add(ruleAction0, position)
				}
				add(ruledicescript, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 stmtUnderground <- <(('^' 's' 't' st_expr) / stmtRoot)> */
		nil,
		/* 2 stmtRoot <- <(stmtLines sp)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				if !_rules[rulestmtLines]() {
					goto l79
				}
				if !_rules[rulesp]() {
					goto l79
				}
				add(rulestmtRoot, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 3 stmtLines <- <((stmtWithBlock stmtLines?) / (flagsSwitch stmtLines?) / (comment stmtLines?) / (stmtWithSemicolon nextLine?) / ((';' sp)+ stmtLines?))> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				{
					position83, tokenIndex83 := position, tokenIndex
					{
						position85 := position
						{
							switch buffer[position] {
							case 'r':
								{
									position87 := position
									{
										position88, tokenIndex88 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l89
										}
										position++
										if buffer[position] != rune('e') {
											goto l89
										}
										position++
										if buffer[position] != rune('t') {
											goto l89
										}
										position++
										if buffer[position] != rune('u') {
											goto l89
										}
										position++
										if buffer[position] != rune('r') {
											goto l89
										}
										position++
										if buffer[position] != rune('n') {
											goto l89
										}
										position++
										if !_rules[rulesp1]() {
											goto l89
										}
										if !_rules[ruleexprRoot]() {
											goto l89
										}
										{
											add(ruleAction3, position)
										}
										goto l88
									l89:
										position, tokenIndex = position88, tokenIndex88
										if buffer[position] != rune('r') {
											goto l84
										}
										position++
										if buffer[position] != rune('e') {
											goto l84
										}
										position++
										if buffer[position] != rune('t') {
											goto l84
										}
										position++
										if buffer[position] != rune('u') {
											goto l84
										}
										position++
										if buffer[position] != rune('r') {
											goto l84
										}
										position++
										if buffer[position] != rune('n') {
											goto l84
										}
										position++
										if !_rules[rulesp]() {
											goto l84
										}
										{
											add(ruleAction4, position)
										}
									}
								l88:
									add(rulestmtReturn, position87)
								}
							case 'w':
								{
									position92 := position
									if buffer[position] != rune('w') {
										goto l84
									}
									position++
									if buffer[position] != rune('h') {
										goto l84
									}
									position++
									if buffer[position] != rune('i') {
										goto l84
									}
									position++
									if buffer[position] != rune('l') {
										goto l84
									}
									position++
									if buffer[position] != rune('e') {
										goto l84
									}
									position++
									{
										add(ruleAction5, position)
									}
									if !_rules[rulesp1]() {
										goto l84
									}
									if !_rules[ruleexprRoot]() {
										goto l84
									}
									{
										add(ruleAction6, position)
									}
									if !_rules[ruleblock]() {
										goto l84
									}
									{
										add(ruleAction7, position)
									}
									add(rulestmtWhile, position92)
								}
							case 'f':
								{
									position96 := position
									if buffer[position] != rune('f') {
										goto l84
									}
									position++
									if buffer[position] != rune('u') {
										goto l84
									}
									position++
									if buffer[position] != rune('n') {
										goto l84
									}
									position++
									if buffer[position] != rune('c') {
										goto l84
									}
									position++
									if !_rules[rulesp1]() {
										goto l84
									}
									if !_rules[ruleidentifier]() {
										goto l84
									}
									if !_rules[rulesp]() {
										goto l84
									}
									{
										add(ruleAction16, position)
									}
									if !_rules[rulefunc_def_params]() {
										goto l84
									}
									if buffer[position] != rune('{') {
										goto l84
									}
									position++
									if !_rules[rulesp]() {
										goto l84
									}
									{
										add(ruleAction17, position)
									}
									{
										position99 := position
										{
											position100, tokenIndex100 := position, tokenIndex
											if !_rules[rulestmtRoot]() {
												goto l100
											}
											goto l101
										l100:
											position, tokenIndex = position100, tokenIndex100
										}
									l101:
										add(rulePegText, position99)
									}
									if buffer[position] != rune('}') {
										goto l84
									}
									position++
									if !_rules[rulesp]() {
										goto l84
									}
									{
										add(ruleAction18, position)
									}
									add(rulestmtFunc, position96)
								}
							default:
								if !_rules[rulestmtIf]() {
									goto l84
								}
							}
						}

						add(rulestmtWithBlock, position85)
					}
					{
						position103, tokenIndex103 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l103
						}
						goto l104
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
				l104:
					goto l83
				l84:
					position, tokenIndex = position83, tokenIndex83
					{
						position106 := position
						{
							position107, tokenIndex107 := position, tokenIndex
							if buffer[position] != rune('/') {
								goto l108
							}
							position++
							if buffer[position] != rune('/') {
								goto l108
							}
							position++
							{
								position109, tokenIndex109 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l109
								}
								goto l110
							l109:
								position, tokenIndex = position109, tokenIndex109
							}
						l110:
							if !_rules[rule_switchEnablePrefix]() {
								goto l108
							}
							if buffer[position] != rune('W') {
								goto l108
							}
							position++
							if buffer[position] != rune('o') {
								goto l108
							}
							position++
							if buffer[position] != rune('D') {
								goto l108
							}
							position++
							if !_rules[rulesp1]() {
								goto l108
							}
							{
								position111, tokenIndex111 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l112
								}
								if !_rules[rulesp1]() {
									goto l112
								}
								p.Flags.EnableDiceWoD = true
								goto l111
							l112:
								position, tokenIndex = position111, tokenIndex111
								if !_rules[rule_switchFalse]() {
									goto l108
								}
								if !_rules[rulesp1]() {
									goto l108
								}
								p.Flags.EnableDiceWoD = false
							}
						l111:
						l113:
							{
								position114, tokenIndex114 := position, tokenIndex
								{
									position115, tokenIndex115 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l115
									}
									position++
									goto l114
								l115:
									position, tokenIndex = position115, tokenIndex115
								}
								if !matchDot() {
									goto l114
								}
								goto l113
							l114:
								position, tokenIndex = position114, tokenIndex114
							}
							goto l107
						l108:
							position, tokenIndex = position107, tokenIndex107
							if buffer[position] != rune('/') {
								goto l116
							}
							position++
							if buffer[position] != rune('/') {
								goto l116
							}
							position++
							{
								position117, tokenIndex117 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l117
								}
								goto l118
							l117:
								position, tokenIndex = position117, tokenIndex117
							}
						l118:
							if !_rules[rule_switchEnablePrefix]() {
								goto l116
							}
							if buffer[position] != rune('C') {
								goto l116
							}
							position++
							if buffer[position] != rune('o') {
								goto l116
							}
							position++
							if buffer[position] != rune('C') {
								goto l116
							}
							position++
							if !_rules[rulesp1]() {
								goto l116
							}
							{
								position119, tokenIndex119 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l120
								}
								if !_rules[rulesp1]() {
									goto l120
								}
								p.Flags.EnableDiceCoC = true
								goto l119
							l120:
								position, tokenIndex = position119, tokenIndex119
								if !_rules[rule_switchFalse]() {
									goto l116
								}
								if !_rules[rulesp1]() {
									goto l116
								}
								p.Flags.EnableDiceCoC = false
							}
						l119:
						l121:
							{
								position122, tokenIndex122 := position, tokenIndex
								{
									position123, tokenIndex123 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l123
									}
									position++
									goto l122
								l123:
									position, tokenIndex = position123, tokenIndex123
								}
								if !matchDot() {
									goto l122
								}
								goto l121
							l122:
								position, tokenIndex = position122, tokenIndex122
							}
							goto l107
						l116:
							position, tokenIndex = position107, tokenIndex107
							if buffer[position] != rune('/') {
								goto l124
							}
							position++
							if buffer[position] != rune('/') {
								goto l124
							}
							position++
							{
								position125, tokenIndex125 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l125
								}
								goto l126
							l125:
								position, tokenIndex = position125, tokenIndex125
							}
						l126:
							if !_rules[rule_switchEnablePrefix]() {
								goto l124
							}
							if buffer[position] != rune('F') {
								goto l124
							}
							position++
							if buffer[position] != rune('a') {
								goto l124
							}
							position++
							if buffer[position] != rune('t') {
								goto l124
							}
							position++
							if buffer[position] != rune('e') {
								goto l124
							}
							position++
							if !_rules[rulesp1]() {
								goto l124
							}
							{
								position127, tokenIndex127 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l128
								}
								if !_rules[rulesp1]() {
									goto l128
								}
								p.Flags.EnableDiceFate = true
								goto l127
							l128:
								position, tokenIndex = position127, tokenIndex127
								if !_rules[rule_switchFalse]() {
									goto l124
								}
								if !_rules[rulesp1]() {
									goto l124
								}
								p.Flags.EnableDiceFate = false
							}
						l127:
						l129:
							{
								position130, tokenIndex130 := position, tokenIndex
								{
									position131, tokenIndex131 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l131
									}
									position++
									goto l130
								l131:
									position, tokenIndex = position131, tokenIndex131
								}
								if !matchDot() {
									goto l130
								}
								goto l129
							l130:
								position, tokenIndex = position130, tokenIndex130
							}
							goto l107
						l124:
							position, tokenIndex = position107, tokenIndex107
							if buffer[position] != rune('/') {
								goto l105
							}
							position++
							if buffer[position] != rune('/') {
								goto l105
							}
							position++
							{
								position132, tokenIndex132 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l132
								}
								goto l133
							l132:
								position, tokenIndex = position132, tokenIndex132
							}
						l133:
							if !_rules[rule_switchEnablePrefix]() {
								goto l105
							}
							if buffer[position] != rune('D') {
								goto l105
							}
							position++
							if buffer[position] != rune('o') {
								goto l105
							}
							position++
							if buffer[position] != rune('u') {
								goto l105
							}
							position++
							if buffer[position] != rune('b') {
								goto l105
							}
							position++
							if buffer[position] != rune('l') {
								goto l105
							}
							position++
							if buffer[position] != rune('e') {
								goto l105
							}
							position++
							if buffer[position] != rune('C') {
								goto l105
							}
							position++
							if buffer[position] != rune('r') {
								goto l105
							}
							position++
							if buffer[position] != rune('o') {
								goto l105
							}
							position++
							if buffer[position] != rune('s') {
								goto l105
							}
							position++
							if buffer[position] != rune('s') {
								goto l105
							}
							position++
							if !_rules[rulesp1]() {
								goto l105
							}
							{
								position134, tokenIndex134 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l135
								}
								if !_rules[rulesp1]() {
									goto l135
								}
								p.Flags.EnableDiceDoubleCross = true
								goto l134
							l135:
								position, tokenIndex = position134, tokenIndex134
								if !_rules[rule_switchFalse]() {
									goto l105
								}
								if !_rules[rulesp1]() {
									goto l105
								}
								p.Flags.EnableDiceDoubleCross = false
							}
						l134:
						l136:
							{
								position137, tokenIndex137 := position, tokenIndex
								{
									position138, tokenIndex138 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l138
									}
									position++
									goto l137
								l138:
									position, tokenIndex = position138, tokenIndex138
								}
								if !matchDot() {
									goto l137
								}
								goto l136
							l137:
								position, tokenIndex = position137, tokenIndex137
							}
						}
					l107:
						add(ruleflagsSwitch, position106)
					}
					{
						position139, tokenIndex139 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l139
						}
						goto l140
					l139:
						position, tokenIndex = position139, tokenIndex139
					}
				l140:
					goto l83
				l105:
					position, tokenIndex = position83, tokenIndex83
					{
						position142 := position
						if !_rules[rulespNoCR]() {
							goto l141
						}
						if buffer[position] != rune('/') {
							goto l141
						}
						position++
						if buffer[position] != rune('/') {
							goto l141
						}
						position++
					l143:
						{
							position144, tokenIndex144 := position, tokenIndex
							{
								position145, tokenIndex145 := position, tokenIndex
								if buffer[position] != rune('\n') {
									goto l145
								}
								position++
								goto l144
							l145:
								position, tokenIndex = position145, tokenIndex145
							}
							if !matchDot() {
								goto l144
							}
							goto l143
						l144:
							position, tokenIndex = position144, tokenIndex144
						}
						{
							position146, tokenIndex146 := position, tokenIndex
							if buffer[position] != rune('\n') {
								goto l147
							}
							position++
							goto l146
						l147:
							position, tokenIndex = position146, tokenIndex146
							{
								position148, tokenIndex148 := position, tokenIndex
								if !matchDot() {
									goto l148
								}
								goto l141
							l148:
								position, tokenIndex = position148, tokenIndex148
							}
						}
					l146:
						add(rulecomment, position142)
					}
					{
						position149, tokenIndex149 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l149
						}
						goto l150
					l149:
						position, tokenIndex = position149, tokenIndex149
					}
				l150:
					goto l83
				l141:
					position, tokenIndex = position83, tokenIndex83
					{
						position152 := position
						{
							position153, tokenIndex153 := position, tokenIndex
							{
								position155 := position
								{
									position156, tokenIndex156 := position, tokenIndex
									if !_rules[ruleidentifier]() {
										goto l157
									}
									if !_rules[rulesp]() {
										goto l157
									}
									{
										add(ruleAction19, position)
									}
									if buffer[position] != rune('=') {
										goto l157
									}
									position++
									if !_rules[rulesp]() {
										goto l157
									}
									if !_rules[ruleexprRoot]() {
										goto l157
									}
									{
										add(ruleAction20, position)
									}
									goto l156
								l157:
									position, tokenIndex = position156, tokenIndex156
									if buffer[position] != rune('&') {
										goto l160
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l160
									}
									if !_rules[rulesp]() {
										goto l160
									}
									{
										add(ruleAction21, position)
									}
									if buffer[position] != rune('=') {
										goto l160
									}
									position++
									if !_rules[rulesp]() {
										goto l160
									}
									{
										add(ruleAction22, position)
									}
									{
										position163 := position
										if !_rules[ruleexprRoot]() {
											goto l160
										}
										add(rulePegText, position163)
									}
									{
										add(ruleAction23, position)
									}
									goto l156
								l160:
									position, tokenIndex = position156, tokenIndex156
									if buffer[position] != rune('&') {
										goto l165
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l165
									}
									if !_rules[rulesp]() {
										goto l165
									}
									{
										add(ruleAction24, position)
									}
									if buffer[position] != rune('.') {
										goto l165
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l165
									}
									if !_rules[rulesp]() {
										goto l165
									}
									{
										add(ruleAction25, position)
									}
									if !_rules[rulesp]() {
										goto l165
									}
									if buffer[position] != rune('=') {
										goto l165
									}
									position++
									if !_rules[rulesp]() {
										goto l165
									}
									if !_rules[ruleexprRoot]() {
										goto l165
									}
									{
										add(ruleAction26, position)
									}
									goto l156
								l165:
									position, tokenIndex = position156, tokenIndex156
									if buffer[position] != rune('t') {
										goto l169
									}
									position++
									if buffer[position] != rune('h') {
										goto l169
									}
									position++
									if buffer[position] != rune('i') {
										goto l169
									}
									position++
									if buffer[position] != rune('s') {
										goto l169
									}
									position++
									if !_rules[rulesp]() {
										goto l169
									}
									if buffer[position] != rune('.') {
										goto l169
									}
									position++
									if !_rules[rulesp]() {
										goto l169
									}
									if !_rules[ruleidentifier]() {
										goto l169
									}
									if !_rules[rulesp]() {
										goto l169
									}
									{
										add(ruleAction27, position)
									}
									if buffer[position] != rune('=') {
										goto l169
									}
									position++
									if !_rules[rulesp]() {
										goto l169
									}
									if !_rules[ruleexprRoot]() {
										goto l169
									}
									{
										add(ruleAction28, position)
									}
									goto l156
								l169:
									position, tokenIndex = position156, tokenIndex156
									if !_rules[ruleidentifier]() {
										goto l172
									}
									if !_rules[rulesp]() {
										goto l172
									}
									{
										add(ruleAction29, position)
									}
									if buffer[position] != rune('.') {
										goto l172
									}
									position++
									if !_rules[rulesp]() {
										goto l172
									}
									if !_rules[ruleidentifier]() {
										goto l172
									}
									if !_rules[rulesp]() {
										goto l172
									}
									{
										add(ruleAction30, position)
									}
									if buffer[position] != rune('=') {
										goto l172
									}
									position++
									if !_rules[rulesp]() {
										goto l172
									}
									if !_rules[ruleexprRoot]() {
										goto l172
									}
									{
										add(ruleAction31, position)
									}
									goto l156
								l172:
									position, tokenIndex = position156, tokenIndex156
									if !_rules[ruleexprRoot]() {
										goto l176
									}
									if buffer[position] != rune('[') {
										goto l176
									}
									position++
									if !_rules[rulesp]() {
										goto l176
									}
									if !_rules[ruleexprRoot]() {
										goto l176
									}
									if buffer[position] != rune(']') {
										goto l176
									}
									position++
									if !_rules[rulesp]() {
										goto l176
									}
									if buffer[position] != rune('=') {
										goto l176
									}
									position++
									if !_rules[rulesp]() {
										goto l176
									}
									if !_rules[ruleexprRoot]() {
										goto l176
									}
									{
										add(ruleAction32, position)
									}
									goto l156
								l176:
									position, tokenIndex = position156, tokenIndex156
									if !_rules[ruleexprRoot]() {
										goto l154
									}
									if !_rules[rule_sliceSuffix]() {
										goto l154
									}
									if buffer[position] != rune('=') {
										goto l154
									}
									position++
									if !_rules[rulesp]() {
										goto l154
									}
									if !_rules[ruleexprRoot]() {
										goto l154
									}
									{
										add(ruleAction33, position)
									}
								}
							l156:
								add(rulestmtAssign, position155)
							}
							goto l153
						l154:
							position, tokenIndex = position153, tokenIndex153
							{
								position180 := position
								if buffer[position] != rune('b') {
									goto l179
								}
								position++
								if buffer[position] != rune('r') {
									goto l179
								}
								position++
								if buffer[position] != rune('e') {
									goto l179
								}
								position++
								if buffer[position] != rune('a') {
									goto l179
								}
								position++
								if buffer[position] != rune('k') {
									goto l179
								}
								position++
								if !_rules[rulesp]() {
									goto l179
								}
								{
									add(ruleAction1, position)
								}
								add(rulestmtBreak, position180)
							}
							goto l153
						l179:
							position, tokenIndex = position153, tokenIndex153
							{
								position183 := position
								if buffer[position] != rune('c') {
									goto l182
								}
								position++
								if buffer[position] != rune('o') {
									goto l182
								}
								position++
								if buffer[position] != rune('n') {
									goto l182
								}
								position++
								if buffer[position] != rune('t') {
									goto l182
								}
								position++
								if buffer[position] != rune('i') {
									goto l182
								}
								position++
								if buffer[position] != rune('n') {
									goto l182
								}
								position++
								if buffer[position] != rune('u') {
									goto l182
								}
								position++
								if buffer[position] != rune('e') {
									goto l182
								}
								position++
								if !_rules[rulesp]() {
									goto l182
								}
								{
									add(ruleAction2, position)
								}
								add(rulestmtContinue, position183)
							}
							goto l153
						l182:
							position, tokenIndex = position153, tokenIndex153
							if !_rules[ruleexprRoot]() {
								goto l151
							}
						}
					l153:
						add(rulestmtWithSemicolon, position152)
					}
					{
						position185, tokenIndex185 := position, tokenIndex
						{
							position187 := position
							{
								position190, tokenIndex190 := position, tokenIndex
								if !_rules[rulespNoCR]() {
									goto l191
								}
								if buffer[position] != rune('\n') {
									goto l191
								}
								position++
								goto l190
							l191:
								position, tokenIndex = position190, tokenIndex190
								if !_rules[rulesp]() {
									goto l185
								}
								if buffer[position] != rune(';') {
									goto l185
								}
								position++
							}
						l190:
							if !_rules[rulesp]() {
								goto l185
							}
						l188:
							{
								position189, tokenIndex189 := position, tokenIndex
								{
									position192, tokenIndex192 := position, tokenIndex
									if !_rules[rulespNoCR]() {
										goto l193
									}
									if buffer[position] != rune('\n') {
										goto l193
									}
									position++
									goto l192
								l193:
									position, tokenIndex = position192, tokenIndex192
									if !_rules[rulesp]() {
										goto l189
									}
									if buffer[position] != rune(';') {
										goto l189
									}
									position++
								}
							l192:
								if !_rules[rulesp]() {
									goto l189
								}
								goto l188
							l189:
								position, tokenIndex = position189, tokenIndex189
							}
							{
								position194, tokenIndex194 := position, tokenIndex
								if !_rules[rulestmtLines]() {
									goto l194
								}
								goto l195
							l194:
								position, tokenIndex = position194, tokenIndex194
							}
						l195:
							add(rulenextLine, position187)
						}
						goto l186
					l185:
						position, tokenIndex = position185, tokenIndex185
					}
				l186:
					goto l83
				l151:
					position, tokenIndex = position83, tokenIndex83
					if buffer[position] != rune(';') {
						goto l81
					}
					position++
					if !_rules[rulesp]() {
						goto l81
					}
				l196:
					{
						position197, tokenIndex197 := position, tokenIndex
						if buffer[position] != rune(';') {
							goto l197
						}
						position++
						if !_rules[rulesp]() {
							goto l197
						}
						goto l196
					l197:
						position, tokenIndex = position197, tokenIndex197
					}
					{
						position198, tokenIndex198 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l198
						}
						goto l199
					l198:
						position, tokenIndex = position198, tokenIndex198
					}
				l199:
				}
			l83:
				add(rulestmtLines, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 4 nextLine <- <((((spNoCR '\n') / (sp ';')) sp)+ stmtLines?)> */
		nil,
		/* 5 _switchEnablePrefix <- <('#' 'E' 'n' 'a' 'b' 'l' 'e' 'D' 'i' 'c' 'e')> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if buffer[position] != rune('#') {
					goto l201
				}
				position++
				if buffer[position] != rune('E') {
					goto l201
				}
				position++
				if buffer[position] != rune('n') {
					goto l201
				}
				position++
				if buffer[position] != rune('a') {
					goto l201
				}
				position++
				if buffer[position] != rune('b') {
					goto l201
				}
				position++
				if buffer[position] != rune('l') {
					goto l201
				}
				position++
				if buffer[position] != rune('e') {
					goto l201
				}
				position++
				if buffer[position] != rune('D') {
					goto l201
				}
				position++
				if buffer[position] != rune('i') {
					goto l201
				}
				position++
				if buffer[position] != rune('c') {
					goto l201
				}
				position++
				if buffer[position] != rune('e') {
					goto l201
				}
				position++
				add(rule_switchEnablePrefix, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 6 _switchTrue <- <('t' 'r' 'u' 'e')> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if buffer[position] != rune('t') {
					goto l203
				}
				position++
				if buffer[position] != rune('r') {
					goto l203
				}
				position++
				if buffer[position] != rune('u') {
					goto l203
				}
				position++
				if buffer[position] != rune('e') {
					goto l203
				}
				position++
				add(rule_switchTrue, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 7 _switchFalse <- <('f' 'a' 'l' 's' 'e')> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				if buffer[position] != rune('f') {
					goto l205
				}
				position++
				if buffer[position] != rune('a') {
					goto l205
				}
				position++
				if buffer[position] != rune('l') {
					goto l205
				}
				position++
				if buffer[position] != rune('s') {
					goto l205
				}
				position++
				if buffer[position] != rune('e') {
					goto l205
				}
				position++
				add(rule_switchFalse, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 8 flagsSwitch <- <(('/' '/' sp? _switchEnablePrefix ('W' 'o' 'D') sp1 ((_switchTrue sp1 !{p.Flags.EnableDiceWoD = true}) / (_switchFalse sp1 !{p.Flags.EnableDiceWoD = false})) (!'\n' .)*) / ('/' '/' sp? _switchEnablePrefix ('C' 'o' 'C') sp1 ((_switchTrue sp1 !{p.Flags.EnableDiceCoC = true}) / (_switchFalse sp1 !{p.Flags.EnableDiceCoC = false})) (!'\n' .)*) / ('/' '/' sp? _switchEnablePrefix ('F' 'a' 't' 'e') sp1 ((_switchTrue sp1 !{p.Flags.EnableDiceFate = true}) / (_switchFalse sp1 !{p.Flags.EnableDiceFate = false})) (!'\n' .)*) / ('/' '/' sp? _switchEnablePrefix ('D' 'o' 'u' 'b' 'l' 'e' 'C' 'r' 'o' 's' 's') sp1 ((_switchTrue sp1 !{p.Flags.EnableDiceDoubleCross = true}) / (_switchFalse sp1 !{p.Flags.EnableDiceDoubleCross = false})) (!'\n' .)*))> */
		nil,
		/* 9 stmtWithSemicolon <- <(stmtAssign / stmtBreak / stmtContinue / exprRoot)> */
		nil,
		/* 10 stmtWithBlock <- <((&('r') stmtReturn) | (&('w') stmtWhile) | (&('f') stmtFunc) | (&('i') stmtIf))> */
		nil,
		/* 11 stmtBreak <- <('b' 'r' 'e' 'a' 'k' sp Action1)> */
		nil,
		/* 12 stmtContinue <- <('c' 'o' 'n' 't' 'i' 'n' 'u' 'e' sp Action2)> */
		nil,
		/* 13 stmtReturn <- <(('r' 'e' 't' 'u' 'r' 'n' sp1 exprRoot Action3) / ('r' 'e' 't' 'u' 'r' 'n' sp Action4))> */
		nil,
		/* 14 stmtWhile <- <('w' 'h' 'i' 'l' 'e' Action5 sp1 exprRoot Action6 block Action7)> */
		nil,
		/* 15 block <- <((('{' sp '}') / ('{' sp stmtRoot '}')) sp)> */
		func() bool {
			position214, tokenIndex214 := position, tokenIndex
			{
				position215 := position
				{
					position216, tokenIndex216 := position, tokenIndex
					if buffer[position] != rune('{') {
						goto l217
					}
					position++
					if !_rules[rulesp]() {
						goto l217
					}
					if buffer[position] != rune('}') {
						goto l217
					}
					position++
					goto l216
				l217:
					position, tokenIndex = position216, tokenIndex216
					if buffer[position] != rune('{') {
						goto l214
					}
					position++
					if !_rules[rulesp]() {
						goto l214
					}
					if !_rules[rulestmtRoot]() {
						goto l214
					}
					if buffer[position] != rune('}') {
						goto l214
					}
					position++
				}
			l216:
				if !_rules[rulesp]() {
					goto l214
				}
				add(ruleblock, position215)
			}
			return true
		l214:
			position, tokenIndex = position214, tokenIndex214
			return false
		},
		/* 16 stmtElse <- <('e' 'l' 's' 'e' ((sp block) / (sp1 stmtIf)))> */
		nil,
		/* 17 stmtIf <- <('i' 'f' sp1 exprRoot Action8 block Action9 stmtElse? Action10)> */
		func() bool {
			position219, tokenIndex219 := position, tokenIndex
			{
				position220 := position
				if buffer[position] != rune('i') {
					goto l219
				}
				position++
				if buffer[position] != rune('f') {
					goto l219
				}
				position++
				if !_rules[rulesp1]() {
					goto l219
				}
				if !_rules[ruleexprRoot]() {
					goto l219
				}
				{
					add(ruleAction8, position)
				}
				if !_rules[ruleblock]() {
					goto l219
				}
				{
					add(ruleAction9, position)
				}
				{
					position223, tokenIndex223 := position, tokenIndex
					{
						position225 := position
						if buffer[position] != rune('e') {
							goto l223
						}
						position++
						if buffer[position] != rune('l') {
							goto l223
						}
						position++
						if buffer[position] != rune('s') {
							goto l223
						}
						position++
						if buffer[position] != rune('e') {
							goto l223
						}
						position++
						{
							position226, tokenIndex226 := position, tokenIndex
							if !_rules[rulesp]() {
								goto l227
							}
							if !_rules[ruleblock]() {
								goto l227
							}
							goto l226
						l227:
							position, tokenIndex = position226, tokenIndex226
							if !_rules[rulesp1]() {
								goto l223
							}
							if !_rules[rulestmtIf]() {
								goto l223
							}
						}
					l226:
						add(rulestmtElse, position225)
					}
					goto l224
				l223:
					position, tokenIndex = position223, tokenIndex223
				}
			l224:
				{
					add(ruleAction10, position)
				}
				add(rulestmtIf, position220)
			}
			return true
		l219:
			position, tokenIndex = position219, tokenIndex219
			return false
		},
		/* 18 func_def_params <- <(('(' sp ')' sp Action11) / ('(' sp Action12 identifier sp Action13 (',' sp identifier sp Action14 Action15)* ')' sp))> */
		func() bool {
			position229, tokenIndex229 := position, tokenIndex
			{
				position230 := position
				{
					position231, tokenIndex231 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l232
					}
					position++
					if !_rules[rulesp]() {
						goto l232
					}
					if buffer[position] != rune(')') {
						goto l232
					}
					position++
					if !_rules[rulesp]() {
						goto l232
					}
					{
						add(ruleAction11, position)
					}
					goto l231
				l232:
					position, tokenIndex = position231, tokenIndex231
					if buffer[position] != rune('(') {
						goto l229
					}
					position++
					if !_rules[rulesp]() {
						goto l229
					}
					{
						add(ruleAction12, position)
					}
					if !_rules[ruleidentifier]() {
						goto l229
					}
					if !_rules[rulesp]() {
						goto l229
					}
					{
						add(ruleAction13, position)
					}
				l236:
					{
						position237, tokenIndex237 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l237
						}
						position++
						if !_rules[rulesp]() {
							goto l237
						}
						if !_rules[ruleidentifier]() {
							goto l237
						}
						if !_rules[rulesp]() {
							goto l237
						}
						{
							add(ruleAction14, position)
						}
						{
							add(ruleAction15, position)
						}
						goto l236
					l237:
						position, tokenIndex = position237, tokenIndex237
					}
					if buffer[position] != rune(')') {
						goto l229
					}
					position++
					if !_rules[rulesp]() {
						goto l229
					}
				}
			l231:
				add(rulefunc_def_params, position230)
			}
			return true
		l229:
			position, tokenIndex = position229, tokenIndex229
			return false
		},
		/* 19 stmtFunc <- <('f' 'u' 'n' 'c' sp1 identifier sp Action16 func_def_params '{' sp Action17 <stmtRoot?> '}' sp Action18)> */
		nil,
		/* 20 stmtAssign <- <((identifier sp Action19 '=' sp exprRoot Action20) / ('&' identifier sp Action21 '=' sp Action22 <exprRoot> Action23) / ('&' identifier sp Action24 '.' identifier sp Action25 sp '=' sp exprRoot Action26) / ('t' 'h' 'i' 's' sp '.' sp identifier sp Action27 '=' sp exprRoot Action28) / (identifier sp Action29 '.' sp identifier sp Action30 '=' sp exprRoot Action31) / (exprRoot '[' sp exprRoot ']' sp '=' sp exprRoot Action32) / (exprRoot _sliceSuffix '=' sp exprRoot Action33))> */
		nil,
		/* 21 exprRoot <- <(exprSlice sp)> */
		func() bool {
			position242, tokenIndex242 := position, tokenIndex
			{
				position243 := position
				{
					position244 := position
					{
						position245, tokenIndex245 := position, tokenIndex
						if !_rules[ruleexprTernary]() {
							goto l246
						}
						if !_rules[rule_sliceSuffix]() {
							goto l246
						}
						{
							position247, tokenIndex247 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l247
							}
							position++
							goto l246
						l247:
							position, tokenIndex = position247, tokenIndex247
						}
						{
							add(ruleAction38, position)
						}
						goto l245
					l246:
						position, tokenIndex = position245, tokenIndex245
						if !_rules[ruleexprTernary]() {
							goto l242
						}
					}
				l245:
					add(ruleexprSlice, position244)
				}
				if !_rules[rulesp]() {
					goto l242
				}
				add(ruleexprRoot, position243)
			}
			return true
		l242:
			position, tokenIndex = position242, tokenIndex242
			return false
		},
		/* 22 _step <- <((':' sp (exprRoot / (sp Action34))) / (sp Action35))> */
		nil,
		/* 23 _sliceSuffix <- <('[' sp (exprRoot / (sp Action36)) ':' sp (exprRoot / (sp Action37)) _step ']' sp)> */
		func() bool {
			position250, tokenIndex250 := position, tokenIndex
			{
				position251 := position
				if buffer[position] != rune('[') {
					goto l250
				}
				position++
				if !_rules[rulesp]() {
					goto l250
				}
				{
					position252, tokenIndex252 := position, tokenIndex
					if !_rules[ruleexprRoot]() {
						goto l253
					}
					goto l252
				l253:
					position, tokenIndex = position252, tokenIndex252
					if !_rules[rulesp]() {
						goto l250
					}
					{
						add(ruleAction36, position)
					}
				}
			l252:
				if buffer[position] != rune(':') {
					goto l250
				}
				position++
				if !_rules[rulesp]() {
					goto l250
				}
				{
					position255, tokenIndex255 := position, tokenIndex
					if !_rules[ruleexprRoot]() {
						goto l256
					}
					goto l255
				l256:
					position, tokenIndex = position255, tokenIndex255
					if !_rules[rulesp]() {
						goto l250
					}
					{
						add(ruleAction37, position)
					}
				}
			l255:
				{
					position258 := position
					{
						position259, tokenIndex259 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l260
						}
						position++
						if !_rules[rulesp]() {
							goto l260
						}
						{
							position261, tokenIndex261 := position, tokenIndex
							if !_rules[ruleexprRoot]() {
								goto l262
							}
							goto l261
						l262:
							position, tokenIndex = position261, tokenIndex261
							if !_rules[rulesp]() {
								goto l260
							}
							{
								add(ruleAction34, position)
							}
						}
					l261:
						goto l259
					l260:
						position, tokenIndex = position259, tokenIndex259
						if !_rules[rulesp]() {
							goto l250
						}
						{
							add(ruleAction35, position)
						}
					}
				l259:
					add(rule_step, position258)
				}
				if buffer[position] != rune(']') {
					goto l250
				}
				position++
				if !_rules[rulesp]() {
					goto l250
				}
				add(rule_sliceSuffix, position251)
			}
			return true
		l250:
			position, tokenIndex = position250, tokenIndex250
			return false
		},
		/* 24 exprSlice <- <((exprTernary _sliceSuffix !'=' Action38) / exprTernary)> */
		nil,
		/* 25 exprValueIfExists <- <(exprLogicOr sp '?' sp Action39 exprLogicOr sp Action40)> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				if !_rules[ruleexprLogicOr]() {
					goto l266
				}
				if !_rules[rulesp]() {
					goto l266
				}
				if buffer[position] != rune('?') {
					goto l266
				}
				position++
				if !_rules[rulesp]() {
					goto l266
				}
				{
					add(ruleAction39, position)
				}
				if !_rules[ruleexprLogicOr]() {
					goto l266
				}
				if !_rules[rulesp]() {
					goto l266
				}
				{
					add(ruleAction40, position)
				}
				add(ruleexprValueIfExists, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 26 exprTernary <- <((exprLogicOr sp '?' sp Action41 exprLogicOr sp ':' sp Action42 exprLogicOr sp Action43) / (exprValueIfExists Action44 (',' sp exprValueIfExists Action45)* Action46) / exprLogicOr)> */
		func() bool {
			position270, tokenIndex270 := position, tokenIndex
			{
				position271 := position
				{
					position272, tokenIndex272 := position, tokenIndex
					if !_rules[ruleexprLogicOr]() {
						goto l273
					}
					if !_rules[rulesp]() {
						goto l273
					}
					if buffer[position] != rune('?') {
						goto l273
					}
					position++
					if !_rules[rulesp]() {
						goto l273
					}
					{
						add(ruleAction41, position)
					}
					if !_rules[ruleexprLogicOr]() {
						goto l273
					}
					if !_rules[rulesp]() {
						goto l273
					}
					if buffer[position] != rune(':') {
						goto l273
					}
					position++
					if !_rules[rulesp]() {
						goto l273
					}
					{
						add(ruleAction42, position)
					}
					if !_rules[ruleexprLogicOr]() {
						goto l273
					}
					if !_rules[rulesp]() {
						goto l273
					}
					{
						add(ruleAction43, position)
					}
					goto l272
				l273:
					position, tokenIndex = position272, tokenIndex272
					if !_rules[ruleexprValueIfExists]() {
						goto l277
					}
					{
						add(ruleAction44, position)
					}
				l279:
					{
						position280, tokenIndex280 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l280
						}
						position++
						if !_rules[rulesp]() {
							goto l280
						}
						if !_rules[ruleexprValueIfExists]() {
							goto l280
						}
						{
							add(ruleAction45, position)
						}
						goto l279
					l280:
						position, tokenIndex = position280, tokenIndex280
					}
					{
						add(ruleAction46, position)
					}
					goto l272
				l277:
					position, tokenIndex = position272, tokenIndex272
					if !_rules[ruleexprLogicOr]() {
						goto l270
					}
				}
			l272:
				add(ruleexprTernary, position271)
			}
			return true
		l270:
			position, tokenIndex = position270, tokenIndex270
			return false
		},
		/* 27 exprLogicOr <- <(exprLogicAnd sp (logicOr Action47 exprLogicAnd Action48 Action49)*)> */
		func() bool {
			position283, tokenIndex283 := position, tokenIndex
			{
				position284 := position
				if !_rules[ruleexprLogicAnd]() {
					goto l283
				}
				if !_rules[rulesp]() {
					goto l283
				}
			l285:
				{
					position286, tokenIndex286 := position, tokenIndex
					{
						position287 := position
						if buffer[position] != rune('|') {
							goto l286
						}
						position++
						if buffer[position] != rune('|') {
							goto l286
						}
						position++
						if !_rules[rulesp]() {
							goto l286
						}
						add(rulelogicOr, position287)
					}
					{
						add(ruleAction47, position)
					}
					if !_rules[ruleexprLogicAnd]() {
						goto l286
					}
					{
						add(ruleAction48, position)
					}
					{
						add(ruleAction49, position)
					}
					goto l285
				l286:
					position, tokenIndex = position286, tokenIndex286
				}
				add(ruleexprLogicOr, position284)
			}
			return true
		l283:
			position, tokenIndex = position283, tokenIndex283
			return false
		},
		/* 28 exprLogicAnd <- <(exprBitwiseOr sp (logicAnd exprBitwiseOr Action50)*)> */
		func() bool {
			position291, tokenIndex291 := position, tokenIndex
			{
				position292 := position
				if !_rules[ruleexprBitwiseOr]() {
					goto l291
				}
				if !_rules[rulesp]() {
					goto l291
				}
			l293:
				{
					position294, tokenIndex294 := position, tokenIndex
					{
						position295 := position
						if buffer[position] != rune('&') {
							goto l294
						}
						position++
						if buffer[position] != rune('&') {
							goto l294
						}
						position++
						if !_rules[rulesp]() {
							goto l294
						}
						add(rulelogicAnd, position295)
					}
					if !_rules[ruleexprBitwiseOr]() {
						goto l294
					}
					{
						add(ruleAction50, position)
					}
					goto l293
				l294:
					position, tokenIndex = position294, tokenIndex294
				}
				add(ruleexprLogicAnd, position292)
			}
			return true
		l291:
			position, tokenIndex = position291, tokenIndex291
			return false
		},
		/* 29 exprBitwiseOr <- <(exprBitwiseAnd sp (bitwiseOr exprBitwiseAnd Action51)*)> */
		func() bool {
			position297, tokenIndex297 := position, tokenIndex
			{
				position298 := position
				if !_rules[ruleexprBitwiseAnd]() {
					goto l297
				}
				if !_rules[rulesp]() {
					goto l297
				}
			l299:
				{
					position300, tokenIndex300 := position, tokenIndex
					{
						position301 := position
						if buffer[position] != rune('|') {
							goto l300
						}
						position++
						if !_rules[rulesp]() {
							goto l300
						}
						add(rulebitwiseOr, position301)
					}
					if !_rules[ruleexprBitwiseAnd]() {
						goto l300
					}
					{
						add(ruleAction51, position)
					}
					goto l299
				l300:
					position, tokenIndex = position300, tokenIndex300
				}
				add(ruleexprBitwiseOr, position298)
			}
			return true
		l297:
			position, tokenIndex = position297, tokenIndex297
			return false
		},
		/* 30 exprBitwiseAnd <- <(exprCompare sp (bitwiseAnd exprCompare Action52)*)> */
		func() bool {
			position303, tokenIndex303 := position, tokenIndex
			{
				position304 := position
				if !_rules[ruleexprCompare]() {
					goto l303
				}
				if !_rules[rulesp]() {
					goto l303
				}
			l305:
				{
					position306, tokenIndex306 := position, tokenIndex
					{
						position307 := position
						if buffer[position] != rune('&') {
							goto l306
						}
						position++
						if !_rules[rulesp]() {
							goto l306
						}
						add(rulebitwiseAnd, position307)
					}
					if !_rules[ruleexprCompare]() {
						goto l306
					}
					{
						add(ruleAction52, position)
					}
					goto l305
				l306:
					position, tokenIndex = position306, tokenIndex306
				}
				add(ruleexprBitwiseAnd, position304)
			}
			return true
		l303:
			position, tokenIndex = position303, tokenIndex303
			return false
		},
		/* 31 exprCompare <- <(exprAdditive sp ((lt exprAdditive Action53) / (ge exprAdditive Action57) / ((&('>') (gt exprAdditive Action58)) | (&('!') (ne exprAdditive Action56)) | (&('=') (eq exprAdditive Action55)) | (&('<') (le exprAdditive Action54))))*)> */
		func() bool {
			position309, tokenIndex309 := position, tokenIndex
			{
				position310 := position
				if !_rules[ruleexprAdditive]() {
					goto l309
				}
				if !_rules[rulesp]() {
					goto l309
				}
			l311:
				{
					position312, tokenIndex312 := position, tokenIndex
					{
						position313, tokenIndex313 := position, tokenIndex
						{
							position315 := position
							if buffer[position] != rune('<') {
								goto l314
							}
							position++
							if !_rules[rulesp]() {
								goto l314
							}
							add(rulelt, position315)
						}
						if !_rules[ruleexprAdditive]() {
							goto l314
						}
						{
							add(ruleAction53, position)
						}
						goto l313
					l314:
						position, tokenIndex = position313, tokenIndex313
						{
							position318 := position
							if buffer[position] != rune('>') {
								goto l317
							}
							position++
							if buffer[position] != rune('=') {
								goto l317
							}
							position++
							if !_rules[rulesp]() {
								goto l317
							}
							add(rulege, position318)
						}
						if !_rules[ruleexprAdditive]() {
							goto l317
						}
						{
							add(ruleAction57, position)
						}
						goto l313
					l317:
						position, tokenIndex = position313, tokenIndex313
						{
							switch buffer[position] {
							case '>':
								{
									position321 := position
									if buffer[position] != rune('>') {
										goto l312
									}
									position++
									if !_rules[rulesp]() {
										goto l312
									}
									add(rulegt, position321)
								}
								if !_rules[ruleexprAdditive]() {
									goto l312
								}
								{
									add(ruleAction58, position)
								}
							case '!':
								{
									position323 := position
									if buffer[position] != rune('!') {
										goto l312
									}
									position++
									if buffer[position] != rune('=') {
										goto l312
									}
									position++
									if !_rules[rulesp]() {
										goto l312
									}
									add(rulene, position323)
								}
								if !_rules[ruleexprAdditive]() {
									goto l312
								}
								{
									add(ruleAction56, position)
								}
							case '=':
								{
									position325 := position
									if buffer[position] != rune('=') {
										goto l312
									}
									position++
									if buffer[position] != rune('=') {
										goto l312
									}
									position++
									if !_rules[rulesp]() {
										goto l312
									}
									add(ruleeq, position325)
								}
								if !_rules[ruleexprAdditive]() {
									goto l312
								}
								{
									add(ruleAction55, position)
								}
							default:
								{
									position327 := position
									if buffer[position] != rune('<') {
										goto l312
									}
									position++
									if buffer[position] != rune('=') {
										goto l312
									}
									position++
									if !_rules[rulesp]() {
										goto l312
									}
									add(rulele, position327)
								}
								if !_rules[ruleexprAdditive]() {
									goto l312
								}
								{
									add(ruleAction54, position)
								}
							}
						}

					}
				l313:
					goto l311
				l312:
					position, tokenIndex = position312, tokenIndex312
				}
				add(ruleexprCompare, position310)
			}
			return true
		l309:
			position, tokenIndex = position309, tokenIndex309
			return false
		},
		/* 32 exprAdditive <- <(exprMultiplicative sp ((add exprMultiplicative Action59) / (minus exprMultiplicative Action60))*)> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				if !_rules[ruleexprMultiplicative]() {
					goto l329
				}
				if !_rules[rulesp]() {
					goto l329
				}
			l331:
				{
					position332, tokenIndex332 := position, tokenIndex
					{
						position333, tokenIndex333 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l334
						}
						if !_rules[ruleexprMultiplicative]() {
							goto l334
						}
						{
							add(ruleAction59, position)
						}
						goto l333
					l334:
						position, tokenIndex = position333, tokenIndex333
						if !_rules[ruleminus]() {
							goto l332
						}
						if !_rules[ruleexprMultiplicative]() {
							goto l332
						}
						{
							add(ruleAction60, position)
						}
					}
				l333:
					goto l331
				l332:
					position, tokenIndex = position332, tokenIndex332
				}
				add(ruleexprAdditive, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 33 exprMultiplicative <- <(exprNullCoalescing sp ((&('%') (modulus exprExp Action63)) | (&('/') (divide exprExp Action62)) | (&('*') (multiply exprExp Action61)))*)> */
		func() bool {
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				{
					position339 := position
					if !_rules[ruleexprExp]() {
						goto l337
					}
					if !_rules[rulesp]() {
						goto l337
					}
				l340:
					{
						position341, tokenIndex341 := position, tokenIndex
						{
							position342 := position
							if buffer[position] != rune('?') {
								goto l341
							}
							position++
							if buffer[position] != rune('?') {
								goto l341
							}
							position++
							if !_rules[rulesp]() {
								goto l341
							}
							add(rulenullCoalescing, position342)
						}
						if !_rules[ruleexprExp]() {
							goto l341
						}
						{
							add(ruleAction64, position)
						}
						goto l340
					l341:
						position, tokenIndex = position341, tokenIndex341
					}
					add(ruleexprNullCoalescing, position339)
				}
				if !_rules[rulesp]() {
					goto l337
				}
			l344:
				{
					position345, tokenIndex345 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position347 := position
								if buffer[position] != rune('%') {
									goto l345
								}
								position++
								if !_rules[rulesp]() {
									goto l345
								}
								add(rulemodulus, position347)
							}
							if !_rules[ruleexprExp]() {
								goto l345
							}
							{
								add(ruleAction63, position)
							}
						case '/':
							{
								position349 := position
								{
									position350, tokenIndex350 := position, tokenIndex
									if buffer[position] != rune('/') {
										goto l351
									}
									position++
									goto l350
								l351:
									position, tokenIndex = position350, tokenIndex350
									if buffer[position] != rune('／') {
										goto l345
									}
									position++
								}
							l350:
								if !_rules[rulesp]() {
									goto l345
								}
								add(ruledivide, position349)
							}
							if !_rules[ruleexprExp]() {
								goto l345
							}
							{
								add(ruleAction62, position)
							}
						default:
							{
								position353 := position
								{
									position354, tokenIndex354 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l355
									}
									position++
									goto l354
								l355:
									position, tokenIndex = position354, tokenIndex354
									if buffer[position] != rune('＊') {
										goto l345
									}
									position++
								}
							l354:
								if !_rules[rulesp]() {
									goto l345
								}
								add(rulemultiply, position353)
							}
							if !_rules[ruleexprExp]() {
								goto l345
							}
							{
								add(ruleAction61, position)
							}
						}
					}

					goto l344
				l345:
					position, tokenIndex = position345, tokenIndex345
				}
				add(ruleexprMultiplicative, position338)
			}
			return true
		l337:
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 34 exprNullCoalescing <- <(exprExp sp (nullCoalescing exprExp Action64)*)> */
		nil,
		/* 35 exprExp <- <(exprUnaryNeg sp (exponentiation exprUnaryNeg Action65)*)> */
		func() bool {
			position358, tokenIndex358 := position, tokenIndex
			{
				position359 := position
				if !_rules[ruleexprUnaryNeg]() {
					goto l358
				}
				if !_rules[rulesp]() {
					goto l358
				}
			l360:
				{
					position361, tokenIndex361 := position, tokenIndex
					{
						position362 := position
						{
							position363, tokenIndex363 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l364
							}
							position++
							if !_rules[rulesp]() {
								goto l364
							}
							goto l363
						l364:
							position, tokenIndex = position363, tokenIndex363
							if buffer[position] != rune('*') {
								goto l361
							}
							position++
							if buffer[position] != rune('*') {
								goto l361
							}
							position++
							if !_rules[rulesp]() {
								goto l361
							}
						}
					l363:
						add(ruleexponentiation, position362)
					}
					if !_rules[ruleexprUnaryNeg]() {
						goto l361
					}
					{
						add(ruleAction65, position)
					}
					goto l360
				l361:
					position, tokenIndex = position361, tokenIndex361
				}
				add(ruleexprExp, position359)
			}
			return true
		l358:
			position, tokenIndex = position358, tokenIndex358
			return false
		},
		/* 36 exprUnaryNeg <- <((minus exprRoot Action66) / exprUnaryPos)> */
		func() bool {
			position366, tokenIndex366 := position, tokenIndex
			{
				position367 := position
				{
					position368, tokenIndex368 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l369
					}
					if !_rules[ruleexprRoot]() {
						goto l369
					}
					{
						add(ruleAction66, position)
					}
					goto l368
				l369:
					position, tokenIndex = position368, tokenIndex368
					{
						position371 := position
						{
							position372, tokenIndex372 := position, tokenIndex
							if !_rules[ruleadd]() {
								goto l373
							}
							if !_rules[ruleexprRoot]() {
								goto l373
							}
							{
								add(ruleAction67, position)
							}
							goto l372
						l373:
							position, tokenIndex = position372, tokenIndex372
							{
								position375 := position
								{
									position376, tokenIndex376 := position, tokenIndex
									{
										position378, tokenIndex378 := position, tokenIndex
										{
											position379 := position
											if !_rules[rulenos]() {
												goto l377
											}
											{
												position380, tokenIndex380 := position, tokenIndex
												if buffer[position] != rune('d') {
													goto l381
												}
												position++
												goto l380
											l381:
												position, tokenIndex = position380, tokenIndex380
												if buffer[position] != rune('D') {
													goto l377
												}
												position++
											}
										l380:
											if !_rules[rulenos]() {
												goto l377
											}
											add(rule_diceType1, position379)
										}
										position, tokenIndex = position378, tokenIndex378
									}
									if !_rules[ruledetailStart]() {
										goto l377
									}
									if !_rules[rulenos]() {
										goto l377
									}
									if !_rules[rule_diceExpr1]() {
										goto l377
									}
									if !_rules[ruledetailEnd]() {
										goto l377
									}
									{
										add(ruleAction92, position)
									}
								l383:
									{
										position384, tokenIndex384 := position, tokenIndex
										if !_rules[rule_diceExprX]() {
											goto l384
										}
										goto l383
									l384:
										position, tokenIndex = position384, tokenIndex384
									}
									goto l376
								l377:
									position, tokenIndex = position376, tokenIndex376
									{
										position386, tokenIndex386 := position, tokenIndex
										if !_rules[rule_diceType2]() {
											goto l385
										}
										position, tokenIndex = position386, tokenIndex386
									}
									if !_rules[ruledetailStart]() {
										goto l385
									}
									{
										position387 := position
										{
											position388, tokenIndex388 := position, tokenIndex
											if buffer[position] != rune('d') {
												goto l389
											}
											position++
											goto l388
										l389:
											position, tokenIndex = position388, tokenIndex388
											if buffer[position] != rune('D') {
												goto l385
											}
											position++
										}
									l388:
										{
											add(ruleAction83, position)
										}
										if !_rules[rulenos]() {
											goto l385
										}
										{
											position391, tokenIndex391 := position, tokenIndex
											{
												position393, tokenIndex393 := position, tokenIndex
												{
													position395 := position
													{
														position396, tokenIndex396 := position, tokenIndex
														if buffer[position] != rune('优') {
															goto l397
														}
														position++
														if buffer[position] != rune('势') {
															goto l397
														}
														position++
														{
															add(ruleAction78, position)
														}
														goto l396
													l397:
														position, tokenIndex = position396, tokenIndex396
														if buffer[position] != rune('劣') {
															goto l394
														}
														position++
														if buffer[position] != rune('势') {
															goto l394
														}
														position++
														{
															add(ruleAction79, position)
														}
													}
												l396:
													add(rule_dicePearMod, position395)
												}
												goto l393
											l394:
												position, tokenIndex = position393, tokenIndex393
												if !_rules[rule_diceMod]() {
													goto l391
												}
											}
										l393:
											goto l392
										l391:
											position, tokenIndex = position391, tokenIndex391
										}
									l392:
										{
											position400, tokenIndex400 := position, tokenIndex
											if !_rules[rule_diceMod2]() {
												goto l400
											}
											goto l401
										l400:
											position, tokenIndex = position400, tokenIndex400
										}
									l401:
										add(rule_diceExpr2, position387)
									}
									if !_rules[ruledetailEnd]() {
										goto l385
									}
									{
										add(ruleAction93, position)
									}
								l403:
									{
										position404, tokenIndex404 := position, tokenIndex
										if !_rules[rule_diceExprX]() {
											goto l404
										}
										goto l403
									l404:
										position, tokenIndex = position404, tokenIndex404
									}
									goto l376
								l385:
									position, tokenIndex = position376, tokenIndex376
									if !(p.Flags.EnableDiceCoC) {
										goto l405
									}
									{
										position406, tokenIndex406 := position, tokenIndex
										{
											position407 := position
											{
												switch buffer[position] {
												case 'B':
													if buffer[position] != rune('B') {
														goto l405
													}
													position++
												case 'b':
													if buffer[position] != rune('b') {
														goto l405
													}
													position++
												case 'P':
													if buffer[position] != rune('P') {
														goto l405
													}
													position++
												default:
													if buffer[position] != rune('p') {
														goto l405
													}
													position++
												}
											}

											{
												position409, tokenIndex409 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l410
												}
												{
													position411, tokenIndex411 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l411
													}
													goto l410
												l411:
													position, tokenIndex = position411, tokenIndex411
												}
												goto l409
											l410:
												position, tokenIndex = position409, tokenIndex409
												{
													position412, tokenIndex412 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l412
													}
													goto l405
												l412:
													position, tokenIndex = position412, tokenIndex412
												}
											}
										l409:
											add(rule_cocDiceType, position407)
										}
										position, tokenIndex = position406, tokenIndex406
									}
									if !_rules[ruledetailStart]() {
										goto l405
									}
									{
										position413, tokenIndex413 := position, tokenIndex
										{
											position415 := position
											{
												position416, tokenIndex416 := position, tokenIndex
												if buffer[position] != rune('b') {
													goto l417
												}
												position++
												goto l416
											l417:
												position, tokenIndex = position416, tokenIndex416
												if buffer[position] != rune('B') {
													goto l414
												}
												position++
											}
										l416:
											{
												position418, tokenIndex418 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l419
												}
												{
													position420, tokenIndex420 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l420
													}
													goto l419
												l420:
													position, tokenIndex = position420, tokenIndex420
												}
												goto l418
											l419:
												position, tokenIndex = position418, tokenIndex418
												{
													position421, tokenIndex421 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l421
													}
													goto l414
												l421:
													position, tokenIndex = position421, tokenIndex421
												}
												{
													add(ruleAction88, position)
												}
											}
										l418:
											if !_rules[ruledetailEnd]() {
												goto l414
											}
											{
												add(ruleAction89, position)
											}
											add(rule_diceCocBonus, position415)
										}
										goto l413
									l414:
										position, tokenIndex = position413, tokenIndex413
										{
											position424 := position
											{
												position425, tokenIndex425 := position, tokenIndex
												if buffer[position] != rune('p') {
													goto l426
												}
												position++
												goto l425
											l426:
												position, tokenIndex = position425, tokenIndex425
												if buffer[position] != rune('P') {
													goto l405
												}
												position++
											}
										l425:
											{
												position427, tokenIndex427 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l428
												}
												{
													position429, tokenIndex429 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l429
													}
													goto l428
												l429:
													position, tokenIndex = position429, tokenIndex429
												}
												goto l427
											l428:
												position, tokenIndex = position427, tokenIndex427
												{
													position430, tokenIndex430 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l430
													}
													goto l405
												l430:
													position, tokenIndex = position430, tokenIndex430
												}
												{
													add(ruleAction90, position)
												}
											}
										l427:
											if !_rules[ruledetailEnd]() {
												goto l405
											}
											{
												add(ruleAction91, position)
											}
											add(rule_diceCocPenalty, position424)
										}
									}
								l413:
									goto l376
								l405:
									position, tokenIndex = position376, tokenIndex376
									if !(p.Flags.EnableDiceWoD) {
										goto l433
									}
									{
										position434, tokenIndex434 := position, tokenIndex
										{
											position435 := position
											{
												position436, tokenIndex436 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l437
												}
												if !_rules[rule_wodTypeMain]() {
													goto l437
												}
												goto l436
											l437:
												position, tokenIndex = position436, tokenIndex436
												if !_rules[rule_wodTypeMain]() {
													goto l433
												}
												{
													position438, tokenIndex438 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l438
													}
													goto l433
												l438:
													position, tokenIndex = position438, tokenIndex438
												}
											}
										l436:
											add(rule_wodDiceType, position435)
										}
										position, tokenIndex = position434, tokenIndex434
									}
									if !_rules[ruledetailStart]() {
										goto l433
									}
									{
										add(ruleAction94, position)
									}
									{
										position440, tokenIndex440 := position, tokenIndex
										if !_rules[rulenos]() {
											goto l441
										}
										{
											add(ruleAction95, position)
										}
										if !_rules[rule_wodMain]() {
											goto l441
										}
										goto l440
									l441:
										position, tokenIndex = position440, tokenIndex440
										if !_rules[rule_wodMain]() {
											goto l433
										}
										{
											position443, tokenIndex443 := position, tokenIndex
											if !_rules[ruleidentifier_ch]() {
												goto l443
											}
											goto l433
										l443:
											position, tokenIndex = position443, tokenIndex443
										}
									}
								l440:
									if !_rules[ruledetailEnd]() {
										goto l433
									}
									{
										add(ruleAction96, position)
									}
									goto l376
								l433:
									position, tokenIndex = position376, tokenIndex376
									if !(p.Flags.EnableDiceDoubleCross) {
										goto l445
									}
									{
										position446, tokenIndex446 := position, tokenIndex
										{
											position447 := position
											if !_rules[rulenos]() {
												goto l445
											}
											{
												position448, tokenIndex448 := position, tokenIndex
												if buffer[position] != rune('c') {
													goto l449
												}
												position++
												goto l448
											l449:
												position, tokenIndex = position448, tokenIndex448
												if buffer[position] != rune('C') {
													goto l445
												}
												position++
											}
										l448:
											if !_rules[rulenos]() {
												goto l445
											}
										l450:
											{
												position451, tokenIndex451 := position, tokenIndex
												{
													position452, tokenIndex452 := position, tokenIndex
													if buffer[position] != rune('m') {
														goto l453
													}
													position++
													goto l452
												l453:
													position, tokenIndex = position452, tokenIndex452
													if buffer[position] != rune('M') {
														goto l451
													}
													position++
												}
											l452:
												if !_rules[rulenos]() {
													goto l451
												}
												goto l450
											l451:
												position, tokenIndex = position451, tokenIndex451
											}
											add(rule_dcDiceType, position447)
										}
										position, tokenIndex = position446, tokenIndex446
									}
									if !_rules[ruledetailStart]() {
										goto l445
									}
									{
										add(ruleAction97, position)
									}
									if !_rules[rulenos]() {
										goto l445
									}
									{
										add(ruleAction98, position)
									}
									{
										position456, tokenIndex456 := position, tokenIndex
										if buffer[position] != rune('c') {
											goto l457
										}
										position++
										goto l456
									l457:
										position, tokenIndex = position456, tokenIndex456
										if buffer[position] != rune('C') {
											goto l445
										}
										position++
									}
								l456:
									if !_rules[rulenos]() {
										goto l445
									}
								l458:
									{
										position459, tokenIndex459 := position, tokenIndex
										{
											position460, tokenIndex460 := position, tokenIndex
											if buffer[position] != rune('m') {
												goto l461
											}
											position++
											goto l460
										l461:
											position, tokenIndex = position460, tokenIndex460
											if buffer[position] != rune('M') {
												goto l459
											}
											position++
										}
									l460:
										if !_rules[rulenos]() {
											goto l459
										}
										{
											add(ruleAction99, position)
										}
										goto l458
									l459:
										position, tokenIndex = position459, tokenIndex459
									}
									if !_rules[ruledetailEnd]() {
										goto l445
									}
									{
										add(ruleAction100, position)
									}
									goto l376
								l445:
									position, tokenIndex = position376, tokenIndex376
									if !(p.Flags.EnableDiceFate) {
										goto l464
									}
									{
										position465, tokenIndex465 := position, tokenIndex
										{
											position466 := position
											{
												position467, tokenIndex467 := position, tokenIndex
												if buffer[position] != rune('f') {
													goto l468
												}
												position++
												goto l467
											l468:
												position, tokenIndex = position467, tokenIndex467
												if buffer[position] != rune('F') {
													goto l464
												}
												position++
											}
										l467:
											{
												position469, tokenIndex469 := position, tokenIndex
												if !_rules[ruleidentifier_ch]() {
													goto l469
												}
												goto l464
											l469:
												position, tokenIndex = position469, tokenIndex469
											}
											add(rule_fateDiceType, position466)
										}
										position, tokenIndex = position465, tokenIndex465
									}
									if !_rules[ruledetailStart]() {
										goto l464
									}
									{
										position470, tokenIndex470 := position, tokenIndex
										if buffer[position] != rune('f') {
											goto l471
										}
										position++
										goto l470
									l471:
										position, tokenIndex = position470, tokenIndex470
										if buffer[position] != rune('F') {
											goto l464
										}
										position++
									}
								l470:
									{
										position472, tokenIndex472 := position, tokenIndex
										if !_rules[ruleidentifier_ch]() {
											goto l472
										}
										goto l464
									l472:
										position, tokenIndex = position472, tokenIndex472
									}
									if !_rules[ruledetailEnd]() {
										goto l464
									}
									{
										add(ruleAction101, position)
									}
									goto l376
								l464:
									position, tokenIndex = position376, tokenIndex376
									{
										position474 := position
										{
											position475, tokenIndex475 := position, tokenIndex
											if buffer[position] != rune('t') {
												goto l476
											}
											position++
											if buffer[position] != rune('r') {
												goto l476
											}
											position++
											if buffer[position] != rune('u') {
												goto l476
											}
											position++
											if buffer[position] != rune('e') {
												goto l476
											}
											position++
											if !_rules[rulesp]() {
												goto l476
											}
											{
												add(ruleAction117, position)
											}
											goto l475
										l476:
											position, tokenIndex = position475, tokenIndex475
											if buffer[position] != rune('f') {
												goto l478
											}
											position++
											if buffer[position] != rune('a') {
												goto l478
											}
											position++
											if buffer[position] != rune('l') {
												goto l478
											}
											position++
											if buffer[position] != rune('s') {
												goto l478
											}
											position++
											if buffer[position] != rune('e') {
												goto l478
											}
											position++
											if !_rules[rulesp]() {
												goto l478
											}
											{
												add(ruleAction118, position)
											}
											goto l475
										l478:
											position, tokenIndex = position475, tokenIndex475
											if buffer[position] != rune('u') {
												goto l480
											}
											position++
											if buffer[position] != rune('n') {
												goto l480
											}
											position++
											if buffer[position] != rune('d') {
												goto l480
											}
											position++
											if buffer[position] != rune('e') {
												goto l480
											}
											position++
											if buffer[position] != rune('f') {
												goto l480
											}
											position++
											if buffer[position] != rune('i') {
												goto l480
											}
											position++
											if buffer[position] != rune('n') {
												goto l480
											}
											position++
											if buffer[position] != rune('e') {
												goto l480
											}
											position++
											if buffer[position] != rune('d') {
												goto l480
											}
											position++
											if !_rules[rulesp]() {
												goto l480
											}
											{
												add(ruleAction119, position)
											}
											goto l475
										l480:
											position, tokenIndex = position475, tokenIndex475
											if buffer[position] != rune('t') {
												goto l482
											}
											position++
											if buffer[position] != rune('h') {
												goto l482
											}
											position++
											if buffer[position] != rune('i') {
												goto l482
											}
											position++
											if buffer[position] != rune('s') {
												goto l482
											}
											position++
											if !_rules[rulesp]() {
												goto l482
											}
											{
												add(ruleAction120, position)
											}
											if !_rules[ruleitem_get]() {
												goto l482
											}
											if !_rules[ruleattr_get]() {
												goto l482
											}
											goto l475
										l482:
											position, tokenIndex = position475, tokenIndex475
											if buffer[position] != rune('&') {
												goto l484
											}
											position++
											if !_rules[ruleidentifier]() {
												goto l484
											}
											if !_rules[rulesp]() {
												goto l484
											}
											{
												add(ruleAction121, position)
											}
											if !_rules[ruleattr_get]() {
												goto l484
											}
											goto l475
										l484:
											position, tokenIndex = position475, tokenIndex475
											_matched := false
											if !(_matched) {
												goto l486
											}
											if buffer[position] != rune('c') {
												goto l486
											}
											position++
											if buffer[position] != rune('a') {
												goto l486
											}
											position++
											if buffer[position] != rune('f') {
												goto l486
											}
											position++
											if buffer[position] != rune('e') {
												goto l486
											}
											position++
											if buffer[position] != rune('b') {
												goto l486
											}
											position++
											if buffer[position] != rune('a') {
												goto l486
											}
											position++
											if buffer[position] != rune('b') {
												goto l486
											}
											position++
											if buffer[position] != rune('e') {
												goto l486
											}
											position++
											goto l475
										l486:
											position, tokenIndex = position475, tokenIndex475
											{
												position488 := position
												{
													position489 := position
												l490:
													{
														position491, tokenIndex491 := position, tokenIndex
														if c := buffer[position]; c < rune('0') || c > rune('9') {
															goto l491
														}
														position++
														goto l490
													l491:
														position, tokenIndex = position491, tokenIndex491
													}
													if buffer[position] != rune('.') {
														goto l487
													}
													position++
													if c := buffer[position]; c < rune('0') || c > rune('9') {
														goto l487
													}
													position++
												l492:
													{
														position493, tokenIndex493 := position, tokenIndex
														if c := buffer[position]; c < rune('0') || c > rune('9') {
															goto l493
														}
														position++
														goto l492
													l493:
														position, tokenIndex = position493, tokenIndex493
													}
													add(rulePegText, position489)
												}
												{
													add(ruleAction134, position)
												}
												add(rulefloat, position488)
											}
											goto l475
										l487:
											position, tokenIndex = position475, tokenIndex475
											if !_rules[rulenumber]() {
												goto l495
											}
											goto l475
										l495:
											position, tokenIndex = position475, tokenIndex475
											{
												position497, tokenIndex497 := position, tokenIndex
												if !_rules[ruleidentifier]() {
													goto l496
												}
												if !_rules[rulesp]() {
													goto l496
												}
												position, tokenIndex = position497, tokenIndex497
											}
											if !_rules[ruledetailStart]() {
												goto l496
											}
											if !_rules[ruleidentifier]() {
												goto l496
											}
											if !_rules[ruledetailEnd]() {
												goto l496
											}
											if !_rules[rulespNoCR]() {
												goto l496
											}
											{
												add(ruleAction122, position)
											}
											{
												position499, tokenIndex499 := position, tokenIndex
												if !_rules[rulefunc_invoke]() {
													goto l499
												}
												goto l500
											l499:
												position, tokenIndex = position499, tokenIndex499
											}
										l500:
											if !_rules[ruleitem_get]() {
												goto l496
											}
											if !_rules[ruleattr_get]() {
												goto l496
											}
											goto l475
										l496:
											position, tokenIndex = position475, tokenIndex475
											if buffer[position] != rune('[') {
												goto l501
											}
											position++
											if !_rules[rulesp]() {
												goto l501
											}
											if buffer[position] != rune(']') {
												goto l501
											}
											position++
											if !_rules[rulesp]() {
												goto l501
											}
											{
												add(ruleAction123, position)
											}
											{
												position503, tokenIndex503 := position, tokenIndex
												if !_rules[rulearray_call]() {
													goto l503
												}
												goto l504
											l503:
												position, tokenIndex = position503, tokenIndex503
											}
										l504:
											if !_rules[ruleattr_get]() {
												goto l501
											}
											goto l475
										l501:
											position, tokenIndex = position475, tokenIndex475
											if buffer[position] != rune('[') {
												goto l505
											}
											position++
											if !_rules[rulesp]() {
												goto l505
											}
											if !_rules[ruleexprRoot]() {
												goto l505
											}
											if buffer[position] != rune('.') {
												goto l505
											}
											position++
											if buffer[position] != rune('.') {
												goto l505
											}
											position++
											if !_rules[rulesp]() {
												goto l505
											}
											if !_rules[ruleexprRoot]() {
												goto l505
											}
											if buffer[position] != rune(']') {
												goto l505
											}
											position++
											if !_rules[rulesp]() {
												goto l505
											}
											{
												add(ruleAction124, position)
											}
											{
												position507, tokenIndex507 := position, tokenIndex
												if !_rules[rulearray_call]() {
													goto l507
												}
												goto l508
											l507:
												position, tokenIndex = position507, tokenIndex507
											}
										l508:
											if !_rules[ruleattr_get]() {
												goto l505
											}
											goto l475
										l505:
											position, tokenIndex = position475, tokenIndex475
											if buffer[position] != rune('{') {
												goto l509
											}
											position++
											if !_rules[rulesp]() {
												goto l509
											}
											if buffer[position] != rune('}') {
												goto l509
											}
											position++
											if !_rules[rulesp]() {
												goto l509
											}
											{
												add(ruleAction128, position)
											}
											if !_rules[ruleitem_get]() {
												goto l509
											}
											if !_rules[ruleattr_get]() {
												goto l509
											}
											goto l475
										l509:
											position, tokenIndex = position475, tokenIndex475
											{
												switch buffer[position] {
												case 'f':
													if buffer[position] != rune('f') {
														goto l366
													}
													position++
													if buffer[position] != rune('u') {
														goto l366
													}
													position++
													if buffer[position] != rune('n') {
														goto l366
													}
													position++
													if buffer[position] != rune('c') {
														goto l366
													}
													position++
													if !_rules[rulesp]() {
														goto l366
													}
													if !_rules[rulefunc_def_params]() {
														goto l366
													}
													if buffer[position] != rune('{') {
														goto l366
													}
													position++
													if !_rules[rulesp]() {
														goto l366
													}
													{
														add(ruleAction131, position)
													}
													{
														position513 := position
														{
															position514, tokenIndex514 := position, tokenIndex
															if !_rules[rulestmtRoot]() {
																goto l514
															}
															goto l515
														l514:
															position, tokenIndex = position514, tokenIndex514
														}
													l515:
														add(rulePegText, position513)
													}
													if buffer[position] != rune('}') {
														goto l366
													}
													position++
													if !_rules[rulesp]() {
														goto l366
													}
													{
														add(ruleAction132, position)
													}
												case '{':
													if buffer[position] != rune('{') {
														goto l366
													}
													position++
													if !_rules[rulesp]() {
														goto l366
													}
													{
														add(ruleAction129, position)
													}
													if !_rules[ruledict_item]() {
														goto l366
													}
												l518:
													{
														position519, tokenIndex519 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l519
														}
														position++
														if !_rules[rulesp]() {
															goto l519
														}
														if !_rules[ruledict_item]() {
															goto l519
														}
														goto l518
													l519:
														position, tokenIndex = position519, tokenIndex519
													}
													{
														position520, tokenIndex520 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l520
														}
														position++
														goto l521
													l520:
														position, tokenIndex = position520, tokenIndex520
													}
												l521:
													if buffer[position] != rune('}') {
														goto l366
													}
													position++
													if !_rules[rulesp]() {
														goto l366
													}
													{
														add(ruleAction130, position)
													}
													if !_rules[ruleitem_get]() {
														goto l366
													}
													if !_rules[ruleattr_get]() {
														goto l366
													}
												case '[':
													if buffer[position] != rune('[') {
														goto l366
													}
													position++
													if !_rules[rulesp]() {
														goto l366
													}
													{
														add(ruleAction125, position)
													}
													if !_rules[ruleexprRoot]() {
														goto l366
													}
												l524:
													{
														position525, tokenIndex525 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l525
														}
														position++
														if !_rules[rulesp]() {
															goto l525
														}
														if !_rules[ruleexprRoot]() {
															goto l525
														}
														{
															add(ruleAction126, position)
														}
														goto l524
													l525:
														position, tokenIndex = position525, tokenIndex525
													}
													if buffer[position] != rune(']') {
														goto l366
													}
													position++
													if !_rules[rulesp]() {
														goto l366
													}
													{
														add(ruleAction127, position)
													}
													{
														position528, tokenIndex528 := position, tokenIndex
														if !_rules[rulearray_call]() {
															goto l528
														}
														goto l529
													l528:
														position, tokenIndex = position528, tokenIndex528
													}
												l529:
													if !_rules[ruleattr_get]() {
														goto l366
													}
												case '(':
													if !_rules[rulesub]() {
														goto l366
													}
													if !_rules[ruleitem_get]() {
														goto l366
													}
													if !_rules[ruleattr_get]() {
														goto l366
													}
												default:
													{
														position530 := position
														{
															position531, tokenIndex531 := position, tokenIndex
															if buffer[position] != rune('\'') {
																goto l532
															}
															position++
															if buffer[position] != rune('\'') {
																goto l532
															}
															position++
															{
																add(ruleAction139, position)
															}
															goto l531
														l532:
															position, tokenIndex = position531, tokenIndex531
															if buffer[position] != rune('\x1e') {
																goto l534
															}
															position++
															if buffer[position] != rune('\x1e') {
																goto l534
															}
															position++
															{
																add(ruleAction140, position)
															}
															goto l531
														l534:
															position, tokenIndex = position531, tokenIndex531
															if buffer[position] != rune('"') {
																goto l536
															}
															position++
															if buffer[position] != rune('"') {
																goto l536
															}
															position++
															{
																add(ruleAction141, position)
															}
															goto l531
														l536:
															position, tokenIndex = position531, tokenIndex531
															if buffer[position] != rune('`') {
																goto l538
															}
															position++
															if buffer[position] != rune('`') {
																goto l538
															}
															position++
															{
																add(ruleAction142, position)
															}
															goto l531
														l538:
															position, tokenIndex = position531, tokenIndex531
															{
																switch buffer[position] {
																case '\'':
																	if buffer[position] != rune('\'') {
																		goto l366
																	}
																	position++
																	{
																		add(ruleAction153, position)
																	}
																	{
																		position542 := position
																	l543:
																		{
																			position544, tokenIndex544 := position, tokenIndex
																			{
																				position545 := position
																				{
																					position546 := position
																					{
																						position549, tokenIndex549 := position, tokenIndex
																						if !_rules[ruleescape]() {
																							goto l550
																						}
																						goto l549
																					l550:
																						position, tokenIndex = position549, tokenIndex549
																						{
																							position551, tokenIndex551 := position, tokenIndex
																							{
																								switch buffer[position] {
																								case '\r':
																									if buffer[position] != rune('\r') {
																										goto l551
																									}
																									position++
																								case '\n':
																									if buffer[position] != rune('\n') {
																										goto l551
																									}
																									position++
																								case '\\':
																									if buffer[position] != rune('\\') {
																										goto l551
																									}
																									position++
																								case '\'':
																									if buffer[position] != rune('\'') {
																										goto l551
																									}
																									position++
																								default:
																									if buffer[position] != rune('{') {
																										goto l551
																									}
																									position++
																								}
																							}

																							goto l544
																						l551:
																							position, tokenIndex = position551, tokenIndex551
																						}
																						if !matchDot() {
																							goto l544
																						}
																					}
																				l549:
																				l547:
																					{
																						position548, tokenIndex548 := position, tokenIndex
																						{
																							position553, tokenIndex553 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l554
																							}
																							goto l553
																						l554:
																							position, tokenIndex = position553, tokenIndex553
																							{
																								position555, tokenIndex555 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\r':
																										if buffer[position] != rune('\r') {
																											goto l555
																										}
																										position++
																									case '\n':
																										if buffer[position] != rune('\n') {
																											goto l555
																										}
																										position++
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l555
																										}
																										position++
																									case '\'':
																										if buffer[position] != rune('\'') {
																											goto l555
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l555
																										}
																										position++
																									}
																								}

																								goto l548
																							l555:
																								position, tokenIndex = position555, tokenIndex555
																							}
																							if !matchDot() {
																								goto l548
																							}
																						}
																					l553:
																						goto l547
																					l548:
																						position, tokenIndex = position548, tokenIndex548
																					}
																					add(rulePegText, position546)
																				}
																				{
																					add(ruleAction138, position)
																				}
																				add(rulestrPart3, position545)
																			}
																			goto l543
																		l544:
																			position, tokenIndex = position544, tokenIndex544
																		}
																		add(rulePegText, position542)
																	}
																	if buffer[position] != rune('\'') {
																		goto l366
																	}
																	position++
																	{
																		add(ruleAction154, position)
																	}
																case '"':
																	if buffer[position] != rune('"') {
																		goto l366
																	}
																	position++
																	{
																		add(ruleAction151, position)
																	}
																	{
																		position560 := position
																	l561:
																		{
																			position562, tokenIndex562 := position, tokenIndex
																			{
																				position563 := position
																				{
																					position564 := position
																					{
																						position567, tokenIndex567 := position, tokenIndex
																						if !_rules[ruleescape]() {
																							goto l568
																						}
																						goto l567
																					l568:
																						position, tokenIndex = position567, tokenIndex567
																						{
																							position569, tokenIndex569 := position, tokenIndex
																							{
																								switch buffer[position] {
																								case '\r':
																									if buffer[position] != rune('\r') {
																										goto l569
																									}
																									position++
																								case '\n':
																									if buffer[position] != rune('\n') {
																										goto l569
																									}
																									position++
																								case '\\':
																									if buffer[position] != rune('\\') {
																										goto l569
																									}
																									position++
																								case '"':
																									if buffer[position] != rune('"') {
																										goto l569
																									}
																									position++
																								default:
																									if buffer[position] != rune('{') {
																										goto l569
																									}
																									position++
																								}
																							}

																							goto l562
																						l569:
																							position, tokenIndex = position569, tokenIndex569
																						}
																						if !matchDot() {
																							goto l562
																						}
																					}
																				l567:
																				l565:
																					{
																						position566, tokenIndex566 := position, tokenIndex
																						{
																							position571, tokenIndex571 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l572
																							}
																							goto l571
																						l572:
																							position, tokenIndex = position571, tokenIndex571
																							{
																								position573, tokenIndex573 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\r':
																										if buffer[position] != rune('\r') {
																											goto l573
																										}
																										position++
																									case '\n':
																										if buffer[position] != rune('\n') {
																											goto l573
																										}
																										position++
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l573
																										}
																										position++
																									case '"':
																										if buffer[position] != rune('"') {
																											goto l573
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l573
																										}
																										position++
																									}
																								}

																								goto l566
																							l573:
																								position, tokenIndex = position573, tokenIndex573
																							}
																							if !matchDot() {
																								goto l566
																							}
																						}
																					l571:
																						goto l565
																					l566:
																						position, tokenIndex = position566, tokenIndex566
																					}
																					add(rulePegText, position564)
																				}
																				{
																					add(ruleAction137, position)
																				}
																				add(rulestrPart2, position563)
																			}
																			goto l561
																		l562:
																			position, tokenIndex = position562, tokenIndex562
																		}
																		add(rulePegText, position560)
																	}
																	if buffer[position] != rune('"') {
																		goto l366
																	}
																	position++
																	{
																		add(ruleAction152, position)
																	}
																case '\x1e':
																	if buffer[position] != rune('\x1e') {
																		goto l366
																	}
																	position++
																	{
																		add(ruleAction147, position)
																	}
																	{
																		position578 := position
																	l579:
																		{
																			position580, tokenIndex580 := position, tokenIndex
																			{
																				position581, tokenIndex581 := position, tokenIndex
																				if buffer[position] != rune('{') {
																					goto l582
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l582
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l582
																				}
																				{
																					add(ruleAction148, position)
																				}
																				if buffer[position] != rune('}') {
																					goto l582
																				}
																				position++
																				goto l581
																			l582:
																				position, tokenIndex = position581, tokenIndex581
																				if buffer[position] != rune('{') {
																					goto l584
																				}
																				position++
																				if buffer[position] != rune('%') {
																					goto l584
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l584
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l584
																				}
																				{
																					add(ruleAction149, position)
																				}
																				if buffer[position] != rune('%') {
																					goto l584
																				}
																				position++
																				if buffer[position] != rune('}') {
																					goto l584
																				}
																				position++
																				goto l581
																			l584:
																				position, tokenIndex = position581, tokenIndex581
																				{
																					position586 := position
																					{
																						position587 := position
																						{
																							position590, tokenIndex590 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l591
																							}
																							goto l590
																						l591:
																							position, tokenIndex = position590, tokenIndex590
																							{
																								position592, tokenIndex592 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l592
																										}
																										position++
																									case '\x1e':
																										if buffer[position] != rune('\x1e') {
																											goto l592
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l592
																										}
																										position++
																									}
																								}

																								goto l580
																							l592:
																								position, tokenIndex = position592, tokenIndex592
																							}
																							if !matchDot() {
																								goto l580
																							}
																						}
																					l590:
																					l588:
																						{
																							position589, tokenIndex589 := position, tokenIndex
																							{
																								position594, tokenIndex594 := position, tokenIndex
																								if !_rules[ruleescape]() {
																									goto l595
																								}
																								goto l594
																							l595:
																								position, tokenIndex = position594, tokenIndex594
																								{
																									position596, tokenIndex596 := position, tokenIndex
																									{
																										switch buffer[position] {
																										case '\\':
																											if buffer[position] != rune('\\') {
																												goto l596
																											}
																											position++
																										case '\x1e':
																											if buffer[position] != rune('\x1e') {
																												goto l596
																											}
																											position++
																										default:
																											if buffer[position] != rune('{') {
																												goto l596
																											}
																											position++
																										}
																									}

																									goto l589
																								l596:
																									position, tokenIndex = position596, tokenIndex596
																								}
																								if !matchDot() {
																									goto l589
																								}
																							}
																						l594:
																							goto l588
																						l589:
																							position, tokenIndex = position589, tokenIndex589
																						}
																						add(rulePegText, position587)
																					}
																					{
																						add(ruleAction136, position)
																					}
																					add(rulestrPart1, position586)
																				}
																			}
																		l581:
																			goto l579
																		l580:
																			position, tokenIndex = position580, tokenIndex580
																		}
																		add(rulePegText, position578)
																	}
																	if buffer[position] != rune('\x1e') {
																		goto l366
																	}
																	position++
																	{
																		add(ruleAction150, position)
																	}
																default:
																	if buffer[position] != rune('`') {
																		goto l366
																	}
																	position++
																	{
																		add(ruleAction143, position)
																	}
																	{
																		position601 := position
																	l602:
																		{
																			position603, tokenIndex603 := position, tokenIndex
																			{
																				position604, tokenIndex604 := position, tokenIndex
																				if buffer[position] != rune('{') {
																					goto l605
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l605
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l605
																				}
																				{
																					add(ruleAction144, position)
																				}
																				if buffer[position] != rune('}') {
																					goto l605
																				}
																				position++
																				goto l604
																			l605:
																				position, tokenIndex = position604, tokenIndex604
																				if buffer[position] != rune('{') {
																					goto l607
																				}
																				position++
																				if buffer[position] != rune('%') {
																					goto l607
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l607
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l607
																				}
																				{
																					add(ruleAction145, position)
																				}
																				if buffer[position] != rune('%') {
																					goto l607
																				}
																				position++
																				if buffer[position] != rune('}') {
																					goto l607
																				}
																				position++
																				goto l604
																			l607:
																				position, tokenIndex = position604, tokenIndex604
																				{
																					position609 := position
																					{
																						position610 := position
																						{
																							position613, tokenIndex613 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l614
																							}
																							goto l613
																						l614:
																							position, tokenIndex = position613, tokenIndex613
																							{
																								position615, tokenIndex615 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l615
																										}
																										position++
																									case '`':
																										if buffer[position] != rune('`') {
																											goto l615
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l615
																										}
																										position++
																									}
																								}

																								goto l603
																							l615:
																								position, tokenIndex = position615, tokenIndex615
																							}
																							if !matchDot() {
																								goto l603
																							}
																						}
																					l613:
																					l611:
																						{
																							position612, tokenIndex612 := position, tokenIndex
																							{
																								position617, tokenIndex617 := position, tokenIndex
																								if !_rules[ruleescape]() {
																									goto l618
																								}
																								goto l617
																							l618:
																								position, tokenIndex = position617, tokenIndex617
																								{
																									position619, tokenIndex619 := position, tokenIndex
																									{
																										switch buffer[position] {
																										case '\\':
																											if buffer[position] != rune('\\') {
																												goto l619
																											}
																											position++
																										case '`':
																											if buffer[position] != rune('`') {
																												goto l619
																											}
																											position++
																										default:
																											if buffer[position] != rune('{') {
																												goto l619
																											}
																											position++
																										}
																									}

																									goto l612
																								l619:
																									position, tokenIndex = position619, tokenIndex619
																								}
																								if !matchDot() {
																									goto l612
																								}
																							}
																						l617:
																							goto l611
																						l612:
																							position, tokenIndex = position612, tokenIndex612
																						}
																						add(rulePegText, position610)
																					}
																					{
																						add(ruleAction135, position)
																					}
																					add(rulestrPart, position609)
																				}
																			}
																		l604:
																			goto l602
																		l603:
																			position, tokenIndex = position603, tokenIndex603
																		}
																		add(rulePegText, position601)
																	}
																	if buffer[position] != rune('`') {
																		goto l366
																	}
																	position++
																	{
																		add(ruleAction146, position)
																	}
																}
															}

														}
													l531:
														if !_rules[rulesp]() {
															goto l366
														}
														add(rulefstring, position530)
													}
												}
											}

										}
									l475:
										add(rulevalue, position474)
									}
								}
							l376:
								add(ruleexprDice, position375)
							}
						}
					l372:
						add(ruleexprUnaryPos, position371)
					}
				}
			l368:
				add(ruleexprUnaryNeg, position367)
			}
			return true
		l366:
			position, tokenIndex = position366, tokenIndex366
			return false
		},
		/* 37 exprUnaryPos <- <((add exprRoot Action67) / exprDice)> */
		nil,
		/* 38 nos <- <(number / sub)> */
		func() bool {
			position624, tokenIndex624 := position, tokenIndex
			{
				position625 := position
				{
					position626, tokenIndex626 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l627
					}
					goto l626
				l627:
					position, tokenIndex = position626, tokenIndex626
					if !_rules[rulesub]() {
						goto l624
					}
				}
			l626:
				add(rulenos, position625)
			}
			return true
		l624:
			position, tokenIndex = position624, tokenIndex624
			return false
		},
		/* 39 _diceMod <- <(((('k' 'l') / ('q' / 'Q')) nos Action68) / ((('k' 'l') / ('q' / 'Q')) Action69) / ((('k' 'h') / ('k' / 'K')) nos Action70) / ((('k' 'h') / ('k' / 'K')) Action71) / ('d' 'h' nos Action72) / ('d' 'h' Action73) / ('d' 'l' nos Action74) / ('d' 'l' Action75))> */
		func() bool {
			position628, tokenIndex628 := position, tokenIndex
			{
				position629 := position
				{
					position630, tokenIndex630 := position, tokenIndex
					{
						position632, tokenIndex632 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l633
						}
						position++
						if buffer[position] != rune('l') {
							goto l633
						}
						position++
						goto l632
					l633:
						position, tokenIndex = position632, tokenIndex632
						{
							position634, tokenIndex634 := position, tokenIndex
							if buffer[position] != rune('q') {
								goto l635
							}
							position++
							goto l634
						l635:
							position, tokenIndex = position634, tokenIndex634
							if buffer[position] != rune('Q') {
								goto l631
							}
							position++
						}
					l634:
					}
				l632:
					if !_rules[rulenos]() {
						goto l631
					}
					{
						add(ruleAction68, position)
					}
					goto l630
				l631:
					position, tokenIndex = position630, tokenIndex630
					{
						position638, tokenIndex638 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l639
						}
						position++
						if buffer[position] != rune('l') {
							goto l639
						}
						position++
						goto l638
					l639:
						position, tokenIndex = position638, tokenIndex638
						{
							position640, tokenIndex640 := position, tokenIndex
							if buffer[position] != rune('q') {
								goto l641
							}
							position++
							goto l640
						l641:
							position, tokenIndex = position640, tokenIndex640
							if buffer[position] != rune('Q') {
								goto l637
							}
							position++
						}
					l640:
					}
				l638:
					{
						add(ruleAction69, position)
					}
					goto l630
				l637:
					position, tokenIndex = position630, tokenIndex630
					{
						position644, tokenIndex644 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l645
						}
						position++
						if buffer[position] != rune('h') {
							goto l645
						}
						position++
						goto l644
					l645:
						position, tokenIndex = position644, tokenIndex644
						{
							position646, tokenIndex646 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l647
							}
							position++
							goto l646
						l647:
							position, tokenIndex = position646, tokenIndex646
							if buffer[position] != rune('K') {
								goto l643
							}
							position++
						}
					l646:
					}
				l644:
					if !_rules[rulenos]() {
						goto l643
					}
					{
						add(ruleAction70, position)
					}
					goto l630
				l643:
					position, tokenIndex = position630, tokenIndex630
					{
						position650, tokenIndex650 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l651
						}
						position++
						if buffer[position] != rune('h') {
							goto l651
						}
						position++
						goto l650
					l651:
						position, tokenIndex = position650, tokenIndex650
						{
							position652, tokenIndex652 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l653
							}
							position++
							goto l652
						l653:
							position, tokenIndex = position652, tokenIndex652
							if buffer[position] != rune('K') {
								goto l649
							}
							position++
						}
					l652:
					}
				l650:
					{
						add(ruleAction71, position)
					}
					goto l630
				l649:
					position, tokenIndex = position630, tokenIndex630
					if buffer[position] != rune('d') {
						goto l655
					}
					position++
					if buffer[position] != rune('h') {
						goto l655
					}
					position++
					if !_rules[rulenos]() {
						goto l655
					}
					{
						add(ruleAction72, position)
					}
					goto l630
				l655:
					position, tokenIndex = position630, tokenIndex630
					if buffer[position] != rune('d') {
						goto l657
					}
					position++
					if buffer[position] != rune('h') {
						goto l657
					}
					position++
					{
						add(ruleAction73, position)
					}
					goto l630
				l657:
					position, tokenIndex = position630, tokenIndex630
					if buffer[position] != rune('d') {
						goto l659
					}
					position++
					if buffer[position] != rune('l') {
						goto l659
					}
					position++
					if !_rules[rulenos]() {
						goto l659
					}
					{
						add(ruleAction74, position)
					}
					goto l630
				l659:
					position, tokenIndex = position630, tokenIndex630
					if buffer[position] != rune('d') {
						goto l628
					}
					position++
					if buffer[position] != rune('l') {
						goto l628
					}
					position++
					{
						add(ruleAction75, position)
					}
				}
			l630:
				add(rule_diceMod, position629)
			}
			return true
		l628:
			position, tokenIndex = position628, tokenIndex628
			return false
		},
		/* 40 _diceMod2 <- <(('m' 'i' 'n' nos Action76)? ('m' 'a' 'x' nos Action77)?)> */
		func() bool {
			{
				position663 := position
				{
					position664, tokenIndex664 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l664
					}
					position++
					if buffer[position] != rune('i') {
						goto l664
					}
					position++
					if buffer[position] != rune('n') {
						goto l664
					}
					position++
					if !_rules[rulenos]() {
						goto l664
					}
					{
						add(ruleAction76, position)
					}
					goto l665
				l664:
					position, tokenIndex = position664, tokenIndex664
				}
			l665:
				{
					position667, tokenIndex667 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l667
					}
					position++
					if buffer[position] != rune('a') {
						goto l667
					}
					position++
					if buffer[position] != rune('x') {
						goto l667
					}
					position++
					if !_rules[rulenos]() {
						goto l667
					}
					{
						add(ruleAction77, position)
					}
					goto l668
				l667:
					position, tokenIndex = position667, tokenIndex667
				}
			l668:
				add(rule_diceMod2, position663)
			}
			return true
		},
		/* 41 _dicePearMod <- <(('优' '势' Action78) / ('劣' '势' Action79))> */
		nil,
		/* 42 detailStart <- <Action80> */
		func() bool {
			{
				position672 := position
				{
					add(ruleAction80, position)
				}
				add(ruledetailStart, position672)
			}
			return true
		},
		/* 43 detailEnd <- <Action81> */
		func() bool {
			{
				position675 := position
				{
					add(ruleAction81, position)
				}
				add(ruledetailEnd, position675)
			}
			return true
		},
		/* 44 _diceType1 <- <(nos ('d' / 'D') nos)> */
		nil,
		/* 45 _diceType2 <- <(('d' / 'D') nos)> */
		func() bool {
			position678, tokenIndex678 := position, tokenIndex
			{
				position679 := position
				{
					position680, tokenIndex680 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l681
					}
					position++
					goto l680
				l681:
					position, tokenIndex = position680, tokenIndex680
					if buffer[position] != rune('D') {
						goto l678
					}
					position++
				}
			l680:
				if !_rules[rulenos]() {
					goto l678
				}
				add(rule_diceType2, position679)
			}
			return true
		l678:
			position, tokenIndex = position678, tokenIndex678
			return false
		},
		/* 46 _diceExpr1 <- <(('d' / 'D') Action82 nos _diceMod? _diceMod2?)> */
		func() bool {
			position682, tokenIndex682 := position, tokenIndex
			{
				position683 := position
				{
					position684, tokenIndex684 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l685
					}
					position++
					goto l684
				l685:
					position, tokenIndex = position684, tokenIndex684
					if buffer[position] != rune('D') {
						goto l682
					}
					position++
				}
			l684:
				{
					add(ruleAction82, position)
				}
				if !_rules[rulenos]() {
					goto l682
				}
				{
					position687, tokenIndex687 := position, tokenIndex
					if !_rules[rule_diceMod]() {
						goto l687
					}
					goto l688
				l687:
					position, tokenIndex = position687, tokenIndex687
				}
			l688:
				{
					position689, tokenIndex689 := position, tokenIndex
					if !_rules[rule_diceMod2]() {
						goto l689
					}
					goto l690
				l689:
					position, tokenIndex = position689, tokenIndex689
				}
			l690:
				add(rule_diceExpr1, position683)
			}
			return true
		l682:
			position, tokenIndex = position682, tokenIndex682
			return false
		},
		/* 47 _diceExpr2 <- <(('d' / 'D') Action83 nos (_dicePearMod / _diceMod)? _diceMod2?)> */
		nil,
		/* 48 _diceExprX <- <(&_diceType2 detailStart _diceExpr1 detailEnd Action84)> */
		func() bool {
			position692, tokenIndex692 := position, tokenIndex
			{
				position693 := position
				{
					position694, tokenIndex694 := position, tokenIndex
					if !_rules[rule_diceType2]() {
						goto l692
					}
					position, tokenIndex = position694, tokenIndex694
				}
				if !_rules[ruledetailStart]() {
					goto l692
				}
				if !_rules[rule_diceExpr1]() {
					goto l692
				}
				if !_rules[ruledetailEnd]() {
					goto l692
				}
				{
					add(ruleAction84, position)
				}
				add(rule_diceExprX, position693)
			}
			return true
		l692:
			position, tokenIndex = position692, tokenIndex692
			return false
		},
		/* 49 _wodTypeMain <- <(('a' / 'A') nos ((&('Q' | 'q') (('q' / 'Q') nos)) | (&('K' | 'k') (('k' / 'K') nos)) | (&('M' | 'm') (('m' / 'M') nos)))*)> */
		func() bool {
			position696, tokenIndex696 := position, tokenIndex
			{
				position697 := position
				{
					position698, tokenIndex698 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l699
					}
					position++
					goto l698
				l699:
					position, tokenIndex = position698, tokenIndex698
					if buffer[position] != rune('A') {
						goto l696
					}
					position++
				}
			l698:
				if !_rules[rulenos]() {
					goto l696
				}
			l700:
				{
					position701, tokenIndex701 := position, tokenIndex
					{
						switch buffer[position] {
						case 'Q', 'q':
							{
								position703, tokenIndex703 := position, tokenIndex
								if buffer[position] != rune('q') {
									goto l704
								}
								position++
								goto l703
							l704:
								position, tokenIndex = position703, tokenIndex703
								if buffer[position] != rune('Q') {
									goto l701
								}
								position++
							}
						l703:
							if !_rules[rulenos]() {
								goto l701
							}
						case 'K', 'k':
							{
								position705, tokenIndex705 := position, tokenIndex
								if buffer[position] != rune('k') {
									goto l706
								}
								position++
								goto l705
							l706:
								position, tokenIndex = position705, tokenIndex705
								if buffer[position] != rune('K') {
									goto l701
								}
								position++
							}
						l705:
							if !_rules[rulenos]() {
								goto l701
							}
						default:
							{
								position707, tokenIndex707 := position, tokenIndex
								if buffer[position] != rune('m') {
									goto l708
								}
								position++
								goto l707
							l708:
								position, tokenIndex = position707, tokenIndex707
								if buffer[position] != rune('M') {
									goto l701
								}
								position++
							}
						l707:
							if !_rules[rulenos]() {
								goto l701
							}
						}
					}

					goto l700
				l701:
					position, tokenIndex = position701, tokenIndex701
				}
				add(rule_wodTypeMain, position697)
			}
			return true
		l696:
			position, tokenIndex = position696, tokenIndex696
			return false
		},
		/* 50 _wodDiceType <- <((nos _wodTypeMain) / (_wodTypeMain !identifier_ch))> */
		nil,
		/* 51 _wodMain <- <(('a' / 'A') nos ((&('Q' | 'q') (('q' / 'Q') nos Action87)) | (&('K' | 'k') (('k' / 'K') nos Action86)) | (&('M' | 'm') (('m' / 'M') nos Action85)))*)> */
		func() bool {
			position710, tokenIndex710 := position, tokenIndex
			{
				position711 := position
				{
					position712, tokenIndex712 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l713
					}
					position++
					goto l712
				l713:
					position, tokenIndex = position712, tokenIndex712
					if buffer[position] != rune('A') {
						goto l710
					}
					position++
				}
			l712:
				if !_rules[rulenos]() {
					goto l710
				}
			l714:
				{
					position715, tokenIndex715 := position, tokenIndex
					{
						switch buffer[position] {
						case 'Q', 'q':
							{
								position717, tokenIndex717 := position, tokenIndex
								if buffer[position] != rune('q') {
									goto l718
								}
								position++
								goto l717
							l718:
								position, tokenIndex = position717, tokenIndex717
								if buffer[position] != rune('Q') {
									goto l715
								}
								position++
							}
						l717:
							if !_rules[rulenos]() {
								goto l715
							}
							{
								add(ruleAction87, position)
							}
						case 'K', 'k':
							{
								position720, tokenIndex720 := position, tokenIndex
								if buffer[position] != rune('k') {
									goto l721
								}
								position++
								goto l720
							l721:
								position, tokenIndex = position720, tokenIndex720
								if buffer[position] != rune('K') {
									goto l715
								}
								position++
							}
						l720:
							if !_rules[rulenos]() {
								goto l715
							}
							{
								add(ruleAction86, position)
							}
						default:
							{
								position723, tokenIndex723 := position, tokenIndex
								if buffer[position] != rune('m') {
									goto l724
								}
								position++
								goto l723
							l724:
								position, tokenIndex = position723, tokenIndex723
								if buffer[position] != rune('M') {
									goto l715
								}
								position++
							}
						l723:
							if !_rules[rulenos]() {
								goto l715
							}
							{
								add(ruleAction85, position)
							}
						}
					}

					goto l714
				l715:
					position, tokenIndex = position715, tokenIndex715
				}
				add(rule_wodMain, position711)
			}
			return true
		l710:
			position, tokenIndex = position710, tokenIndex710
			return false
		},
		/* 52 _cocDiceType <- <(((&('B') 'B') | (&('b') 'b') | (&('P') 'P') | (&('p') 'p')) ((nos !identifier_ch) / !identifier_ch))> */
		nil,
		/* 53 _diceCocBonus <- <(('b' / 'B') ((nos !identifier_ch) / (!identifier_ch Action88)) detailEnd Action89)> */
		nil,
		/* 54 _diceCocPenalty <- <(('p' / 'P') ((nos !identifier_ch) / (!identifier_ch Action90)) detailEnd Action91)> */
		nil,
		/* 55 _dcDiceType <- <(nos ('c' / 'C') nos (('m' / 'M') nos)*)> */
		nil,
		/* 56 _fateDiceType <- <(('f' / 'F') !identifier_ch)> */
		nil,
		/* 57 exprDice <- <((&_diceType1 detailStart nos _diceExpr1 detailEnd Action92 _diceExprX*) / (&_diceType2 detailStart _diceExpr2 detailEnd Action93 _diceExprX*) / (&{p.Flags.EnableDiceCoC} &_cocDiceType detailStart (_diceCocBonus / _diceCocPenalty)) / (&{p.Flags.EnableDiceWoD} &_wodDiceType detailStart Action94 ((nos Action95 _wodMain) / (_wodMain !identifier_ch)) detailEnd Action96) / (&{p.Flags.EnableDiceDoubleCross} &_dcDiceType detailStart Action97 nos Action98 ('c' / 'C') nos (('m' / 'M') nos Action99)* detailEnd Action100) / (&{p.Flags.EnableDiceFate} &_fateDiceType detailStart ('f' / 'F') !identifier_ch detailEnd Action101) / value)> */
		nil,
		/* 58 item_get <- <('[' sp exprRoot ']' sp !'=' Action102 func_invoke?)*> */
		func() bool {
			{
				position733 := position
			l734:
				{
					position735, tokenIndex735 := position, tokenIndex
					if buffer[position] != rune('[') {
						goto l735
					}
					position++
					if !_rules[rulesp]() {
						goto l735
					}
					if !_rules[ruleexprRoot]() {
						goto l735
					}
					if buffer[position] != rune(']') {
						goto l735
					}
					position++
					if !_rules[rulesp]() {
						goto l735
					}
					{
						position736, tokenIndex736 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l736
						}
						position++
						goto l735
					l736:
						position, tokenIndex = position736, tokenIndex736
					}
					{
						add(ruleAction102, position)
					}
					{
						position738, tokenIndex738 := position, tokenIndex
						if !_rules[rulefunc_invoke]() {
							goto l738
						}
						goto l739
					l738:
						position, tokenIndex = position738, tokenIndex738
					}
				l739:
					goto l734
				l735:
					position, tokenIndex = position735, tokenIndex735
				}
				add(ruleitem_get, position733)
			}
			return true
		},
		/* 59 array_call <- <(('k' 'h' Action103 ((number Action104) / Action105)) / ('k' 'l' Action106 ((number Action107) / Action108)) / ('[' sp exprRoot ']' sp Action109)+)> */
		func() bool {
			position740, tokenIndex740 := position, tokenIndex
			{
				position741 := position
				{
					position742, tokenIndex742 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l743
					}
					position++
					if buffer[position] != rune('h') {
						goto l743
					}
					position++
					{
						add(ruleAction103, position)
					}
					{
						position745, tokenIndex745 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l746
						}
						{
							add(ruleAction104, position)
						}
						goto l745
					l746:
						position, tokenIndex = position745, tokenIndex745
						{
							add(ruleAction105, position)
						}
					}
				l745:
					goto l742
				l743:
					position, tokenIndex = position742, tokenIndex742
					if buffer[position] != rune('k') {
						goto l749
					}
					position++
					if buffer[position] != rune('l') {
						goto l749
					}
					position++
					{
						add(ruleAction106, position)
					}
					{
						position751, tokenIndex751 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l752
						}
						{
							add(ruleAction107, position)
						}
						goto l751
					l752:
						position, tokenIndex = position751, tokenIndex751
						{
							add(ruleAction108, position)
						}
					}
				l751:
					goto l742
				l749:
					position, tokenIndex = position742, tokenIndex742
					if buffer[position] != rune('[') {
						goto l740
					}
					position++
					if !_rules[rulesp]() {
						goto l740
					}
					if !_rules[ruleexprRoot]() {
						goto l740
					}
					if buffer[position] != rune(']') {
						goto l740
					}
					position++
					if !_rules[rulesp]() {
						goto l740
					}
					{
						add(ruleAction109, position)
					}
				l755:
					{
						position756, tokenIndex756 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l756
						}
						position++
						if !_rules[rulesp]() {
							goto l756
						}
						if !_rules[ruleexprRoot]() {
							goto l756
						}
						if buffer[position] != rune(']') {
							goto l756
						}
						position++
						if !_rules[rulesp]() {
							goto l756
						}
						{
							add(ruleAction109, position)
						}
						goto l755
					l756:
						position, tokenIndex = position756, tokenIndex756
					}
				}
			l742:
				add(rulearray_call, position741)
			}
			return true
		l740:
			position, tokenIndex = position740, tokenIndex740
			return false
		},
		/* 60 attr_get <- <('.' sp identifier sp Action110 func_invoke?)*> */
		func() bool {
			{
				position760 := position
			l761:
				{
					position762, tokenIndex762 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l762
					}
					position++
					if !_rules[rulesp]() {
						goto l762
					}
					if !_rules[ruleidentifier]() {
						goto l762
					}
					if !_rules[rulesp]() {
						goto l762
					}
					{
						add(ruleAction110, position)
					}
					{
						position764, tokenIndex764 := position, tokenIndex
						if !_rules[rulefunc_invoke]() {
							goto l764
						}
						goto l765
					l764:
						position, tokenIndex = position764, tokenIndex764
					}
				l765:
					goto l761
				l762:
					position, tokenIndex = position762, tokenIndex762
				}
				add(ruleattr_get, position760)
			}
			return true
		},
		/* 61 func_invoke <- <(('(' sp ')' sp Action111) / ('(' sp Action112 exprRoot (',' sp exprRoot Action113)* ')' sp Action114))> */
		func() bool {
			position766, tokenIndex766 := position, tokenIndex
			{
				position767 := position
				{
					position768, tokenIndex768 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l769
					}
					position++
					if !_rules[rulesp]() {
						goto l769
					}
					if buffer[position] != rune(')') {
						goto l769
					}
					position++
					if !_rules[rulesp]() {
						goto l769
					}
					{
						add(ruleAction111, position)
					}
					goto l768
				l769:
					position, tokenIndex = position768, tokenIndex768
					if buffer[position] != rune('(') {
						goto l766
					}
					position++
					if !_rules[rulesp]() {
						goto l766
					}
					{
						add(ruleAction112, position)
					}
					if !_rules[ruleexprRoot]() {
						goto l766
					}
				l772:
					{
						position773, tokenIndex773 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l773
						}
						position++
						if !_rules[rulesp]() {
							goto l773
						}
						if !_rules[ruleexprRoot]() {
							goto l773
						}
						{
							add(ruleAction113, position)
						}
						goto l772
					l773:
						position, tokenIndex = position773, tokenIndex773
					}
					if buffer[position] != rune(')') {
						goto l766
					}
					position++
					if !_rules[rulesp]() {
						goto l766
					}
					{
						add(ruleAction114, position)
					}
				}
			l768:
				add(rulefunc_invoke, position767)
			}
			return true
		l766:
			position, tokenIndex = position766, tokenIndex766
			return false
		},
		/* 62 dict_item <- <(Action115 ((value_id_without_colon / exprRoot) sp ':' sp exprRoot) sp)> */
		func() bool {
			position776, tokenIndex776 := position, tokenIndex
			{
				position777 := position
				{
					add(ruleAction115, position)
				}
				{
					position779, tokenIndex779 := position, tokenIndex
					{
						position781 := position
						{
							position782 := position
							if !_rules[ruleno_keywords]() {
								goto l780
							}
							{
								position783 := position
								if !_rules[ruleidentifier_ch0]() {
									goto l780
								}
							l784:
								{
									position785, tokenIndex785 := position, tokenIndex
									{
										position786, tokenIndex786 := position, tokenIndex
										if !_rules[ruleidentifier_ch0]() {
											goto l787
										}
										goto l786
									l787:
										position, tokenIndex = position786, tokenIndex786
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l785
										}
										position++
									}
								l786:
									goto l784
								l785:
									position, tokenIndex = position785, tokenIndex785
								}
								add(rulePegText, position783)
							}
							add(ruleidentifierWithoutColon, position782)
						}
						if !_rules[rulesp]() {
							goto l780
						}
						{
							add(ruleAction116, position)
						}
						{
							position789, tokenIndex789 := position, tokenIndex
							if !_rules[rulefunc_invoke]() {
								goto l789
							}
							goto l790
						l789:
							position, tokenIndex = position789, tokenIndex789
						}
					l790:
						if !_rules[ruleitem_get]() {
							goto l780
						}
						if !_rules[ruleattr_get]() {
							goto l780
						}
						add(rulevalue_id_without_colon, position781)
					}
					goto l779
				l780:
					position, tokenIndex = position779, tokenIndex779
					if !_rules[ruleexprRoot]() {
						goto l776
					}
				}
			l779:
				if !_rules[rulesp]() {
					goto l776
				}
				if buffer[position] != rune(':') {
					goto l776
				}
				position++
				if !_rules[rulesp]() {
					goto l776
				}
				if !_rules[ruleexprRoot]() {
					goto l776
				}
				if !_rules[rulesp]() {
					goto l776
				}
				add(ruledict_item, position777)
			}
			return true
		l776:
			position, tokenIndex = position776, tokenIndex776
			return false
		},
		/* 63 value_id_without_colon <- <(identifierWithoutColon sp Action116 func_invoke? item_get attr_get)> */
		nil,
		/* 64 value <- <(('t' 'r' 'u' 'e' sp Action117) / ('f' 'a' 'l' 's' 'e' sp Action118) / ('u' 'n' 'd' 'e' 'f' 'i' 'n' 'e' 'd' sp Action119) / ('t' 'h' 'i' 's' sp Action120 item_get attr_get) / ('&' identifier sp Action121 attr_get) / (!{_matched := false} &{_matched} ('c' 'a' 'f' 'e' 'b' 'a' 'b' 'e')) / float / number / (&(identifier sp) detailStart identifier detailEnd spNoCR Action122 func_invoke? item_get attr_get) / ('[' sp ']' sp Action123 array_call? attr_get) / ('[' sp exprRoot ('.' '.') sp exprRoot ']' sp Action124 array_call? attr_get) / ('{' sp '}' sp Action128 item_get attr_get) / ((&('f') ('f' 'u' 'n' 'c' sp func_def_params '{' sp Action131 <stmtRoot?> '}' sp Action132)) | (&('{') ('{' sp Action129 dict_item (',' sp dict_item)* ','? '}' sp Action130 item_get attr_get)) | (&('[') ('[' sp Action125 exprRoot (',' sp exprRoot Action126)* ']' sp Action127 array_call? attr_get)) | (&('(') (sub item_get attr_get)) | (&('\x1e' | '"' | '\'' | '`') fstring)))> */
		nil,
		/* 65 number <- <(<[0-9]+> Action133)> */
		func() bool {
			position793, tokenIndex793 := position, tokenIndex
			{
				position794 := position
				{
					position795 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l793
					}
					position++
				l796:
					{
						position797, tokenIndex797 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l797
						}
						position++
						goto l796
					l797:
						position, tokenIndex = position797, tokenIndex797
					}
					add(rulePegText, position795)
				}
				{
					add(ruleAction133, position)
				}
				add(rulenumber, position794)
			}
			return true
		l793:
			position, tokenIndex = position793, tokenIndex793
			return false
		},
		/* 66 float <- <(<([0-9]* '.' [0-9]+)> Action134)> */
		nil,
		/* 67 strPart <- <(<(escape / (!((&('\\') '\\') | (&('`') '`') | (&('{') '{')) .))+> Action135)> */
		nil,
		/* 68 strPart1 <- <(<(escape / (!((&('\\') '\\') | (&('\x1e') '\x1e') | (&('{') '{')) .))+> Action136)> */
		nil,
		/* 69 strPart2 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('"') '"') | (&('{') '{')) .))+> Action137)> */
		nil,
		/* 70 strPart3 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('\'') '\'') | (&('{') '{')) .))+> Action138)> */
		nil,
		/* 71 fstring <- <((('\'' '\'' Action139) / ('\x1e' '\x1e' Action140) / ('"' '"' Action141) / ('`' '`' Action142) / ((&('\'') ('\'' Action153 <strPart3*> '\'' Action154)) | (&('"') ('"' Action151 <strPart2*> '"' Action152)) | (&('\x1e') ('\x1e' Action147 <(('{' sp exprRoot Action148 '}') / ('{' '%' sp exprRoot Action149 ('%' '}')) / strPart1)*> '\x1e' Action150)) | (&('`') ('`' Action143 <(('{' sp exprRoot Action144 '}') / ('{' '%' sp exprRoot Action145 ('%' '}')) / strPart)*> '`' Action146)))) sp)> */
		nil,
		/* 72 keywords <- <((&('f') ('f' 'u' 'n' 'c')) | (&('r') ('r' 'e' 't' 'u' 'r' 'n')) | (&('b') ('b' 'r' 'e' 'a' 'k')) | (&('c') ('c' 'o' 'n' 't' 'i' 'n' 'u' 'e')) | (&('e') ('e' 'l' 's' 'e')) | (&('i') ('i' 'f')) | (&('w') ('w' 'h' 'i' 'l' 'e')))> */
		nil,
		/* 73 identifier_ch0 <- <(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) .)> */
		func() bool {
			position806, tokenIndex806 := position, tokenIndex
			{
				position807 := position
				{
					position808, tokenIndex808 := position, tokenIndex
					{
						switch buffer[position] {
						case '\x1e':
							if buffer[position] != rune('\x1e') {
								goto l808
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l808
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l808
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l808
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l808
							}
							position++
						case '~':
							if buffer[position] != rune('~') {
								goto l808
							}
							position++
						case '}':
							if buffer[position] != rune('}') {
								goto l808
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l808
							}
							position++
						case '{':
							if buffer[position] != rune('{') {
								goto l808
							}
							position++
						case '`':
							if buffer[position] != rune('`') {
								goto l808
							}
							position++
						case '^':
							if buffer[position] != rune('^') {
								goto l808
							}
							position++
						case ']':
							if buffer[position] != rune(']') {
								goto l808
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l808
							}
							position++
						case '[':
							if buffer[position] != rune('[') {
								goto l808
							}
							position++
						case '@':
							if buffer[position] != rune('@') {
								goto l808
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l808
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l808
							}
							position++
						case '=':
							if buffer[position] != rune('=') {
								goto l808
							}
							position++
						case '<':
							if buffer[position] != rune('<') {
								goto l808
							}
							position++
						case ';':
							if buffer[position] != rune(';') {
								goto l808
							}
							position++
						case ':':
							if buffer[position] != rune(':') {
								goto l808
							}
							position++
						case '/':
							if buffer[position] != rune('/') {
								goto l808
							}
							position++
						case '+':
							if buffer[position] != rune('+') {
								goto l808
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l808
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l808
							}
							position++
						case '(':
							if buffer[position] != rune('(') {
								goto l808
							}
							position++
						case '\'':
							if buffer[position] != rune('\'') {
								goto l808
							}
							position++
						case '&':
							if buffer[position] != rune('&') {
								goto l808
							}
							position++
						case '%':
							if buffer[position] != rune('%') {
								goto l808
							}
							position++
						case '#':
							if buffer[position] != rune('#') {
								goto l808
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l808
							}
							position++
						case '!':
							if buffer[position] != rune('!') {
								goto l808
							}
							position++
						case ',', '-', '.':
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l808
							}
							position++
						default:
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l808
							}
							position++
						}
					}

					goto l806
				l808:
					position, tokenIndex = position808, tokenIndex808
				}
				if !matchDot() {
					goto l806
				}
				add(ruleidentifier_ch0, position807)
			}
			return true
		l806:
			position, tokenIndex = position806, tokenIndex806
			return false
		},
		/* 74 identifier_ch <- <(identifier_ch0 / ([0-9] / ':'))> */
		func() bool {
			position810, tokenIndex810 := position, tokenIndex
			{
				position811 := position
				{
					position812, tokenIndex812 := position, tokenIndex
					if !_rules[ruleidentifier_ch0]() {
						goto l813
					}
					goto l812
				l813:
					position, tokenIndex = position812, tokenIndex812
					{
						position814, tokenIndex814 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l815
						}
						position++
						goto l814
					l815:
						position, tokenIndex = position814, tokenIndex814
						if buffer[position] != rune(':') {
							goto l810
						}
						position++
					}
				l814:
				}
			l812:
				add(ruleidentifier_ch, position811)
			}
			return true
		l810:
			position, tokenIndex = position810, tokenIndex810
			return false
		},
		/* 75 no_keywords <- <!(keywords (sp1 / (!(identifier_ch0 / [0-9]) .)))> */
		func() bool {
			position816, tokenIndex816 := position, tokenIndex
			{
				position817 := position
				{
					position818, tokenIndex818 := position, tokenIndex
					{
						position819 := position
						{
							switch buffer[position] {
							case 'f':
								if buffer[position] != rune('f') {
									goto l818
								}
								position++
								if buffer[position] != rune('u') {
									goto l818
								}
								position++
								if buffer[position] != rune('n') {
									goto l818
								}
								position++
								if buffer[position] != rune('c') {
									goto l818
								}
								position++
							case 'r':
								if buffer[position] != rune('r') {
									goto l818
								}
								position++
								if buffer[position] != rune('e') {
									goto l818
								}
								position++
								if buffer[position] != rune('t') {
									goto l818
								}
								position++
								if buffer[position] != rune('u') {
									goto l818
								}
								position++
								if buffer[position] != rune('r') {
									goto l818
								}
								position++
								if buffer[position] != rune('n') {
									goto l818
								}
								position++
							case 'b':
								if buffer[position] != rune('b') {
									goto l818
								}
								position++
								if buffer[position] != rune('r') {
									goto l818
								}
								position++
								if buffer[position] != rune('e') {
									goto l818
								}
								position++
								if buffer[position] != rune('a') {
									goto l818
								}
								position++
								if buffer[position] != rune('k') {
									goto l818
								}
								position++
							case 'c':
								if buffer[position] != rune('c') {
									goto l818
								}
								position++
								if buffer[position] != rune('o') {
									goto l818
								}
								position++
								if buffer[position] != rune('n') {
									goto l818
								}
								position++
								if buffer[position] != rune('t') {
									goto l818
								}
								position++
								if buffer[position] != rune('i') {
									goto l818
								}
								position++
								if buffer[position] != rune('n') {
									goto l818
								}
								position++
								if buffer[position] != rune('u') {
									goto l818
								}
								position++
								if buffer[position] != rune('e') {
									goto l818
								}
								position++
							case 'e':
								if buffer[position] != rune('e') {
									goto l818
								}
								position++
								if buffer[position] != rune('l') {
									goto l818
								}
								position++
								if buffer[position] != rune('s') {
									goto l818
								}
								position++
								if buffer[position] != rune('e') {
									goto l818
								}
								position++
							case 'i':
								if buffer[position] != rune('i') {
									goto l818
								}
								position++
								if buffer[position] != rune('f') {
									goto l818
								}
								position++
							default:
								if buffer[position] != rune('w') {
									goto l818
								}
								position++
								if buffer[position] != rune('h') {
									goto l818
								}
								position++
								if buffer[position] != rune('i') {
									goto l818
								}
								position++
								if buffer[position] != rune('l') {
									goto l818
								}
								position++
								if buffer[position] != rune('e') {
									goto l818
								}
								position++
							}
						}

						add(rulekeywords, position819)
					}
					{
						position821, tokenIndex821 := position, tokenIndex
						if !_rules[rulesp1]() {
							goto l822
						}
						goto l821
					l822:
						position, tokenIndex = position821, tokenIndex821
						{
							position823, tokenIndex823 := position, tokenIndex
							{
								position824, tokenIndex824 := position, tokenIndex
								if !_rules[ruleidentifier_ch0]() {
									goto l825
								}
								goto l824
							l825:
								position, tokenIndex = position824, tokenIndex824
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l823
								}
								position++
							}
						l824:
							goto l818
						l823:
							position, tokenIndex = position823, tokenIndex823
						}
						if !matchDot() {
							goto l818
						}
					}
				l821:
					goto l816
				l818:
					position, tokenIndex = position818, tokenIndex818
				}
				add(ruleno_keywords, position817)
			}
			return true
		l816:
			position, tokenIndex = position816, tokenIndex816
			return false
		},
		/* 76 identifier <- <(no_keywords <(identifier_ch0 identifier_ch*)>)> */
		func() bool {
			position826, tokenIndex826 := position, tokenIndex
			{
				position827 := position
				if !_rules[ruleno_keywords]() {
					goto l826
				}
				{
					position828 := position
					if !_rules[ruleidentifier_ch0]() {
						goto l826
					}
				l829:
					{
						position830, tokenIndex830 := position, tokenIndex
						if !_rules[ruleidentifier_ch]() {
							goto l830
						}
						goto l829
					l830:
						position, tokenIndex = position830, tokenIndex830
					}
					add(rulePegText, position828)
				}
				add(ruleidentifier, position827)
			}
			return true
		l826:
			position, tokenIndex = position826, tokenIndex826
			return false
		},
		/* 77 identifierWithoutColon <- <(no_keywords <(identifier_ch0 (identifier_ch0 / [0-9])*)>)> */
		nil,
		/* 78 sub <- <(parenOpen exprRoot parenClose)> */
		func() bool {
			position832, tokenIndex832 := position, tokenIndex
			{
				position833 := position
				{
					position834 := position
					if buffer[position] != rune('(') {
						goto l832
					}
					position++
					if !_rules[rulesp]() {
						goto l832
					}
					add(ruleparenOpen, position834)
				}
				if !_rules[ruleexprRoot]() {
					goto l832
				}
				{
					position835 := position
					if buffer[position] != rune(')') {
						goto l832
					}
					position++
					if !_rules[rulesp]() {
						goto l832
					}
					add(ruleparenClose, position835)
				}
				add(rulesub, position833)
			}
			return true
		l832:
			position, tokenIndex = position832, tokenIndex832
			return false
		},
		/* 79 parenOpen <- <('(' sp)> */
		nil,
		/* 80 parenClose <- <(')' sp)> */
		nil,
		/* 81 add <- <(('+' / '＋') sp)> */
		func() bool {
			position838, tokenIndex838 := position, tokenIndex
			{
				position839 := position
				{
					position840, tokenIndex840 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l841
					}
					position++
					goto l840
				l841:
					position, tokenIndex = position840, tokenIndex840
					if buffer[position] != rune('＋') {
						goto l838
					}
					position++
				}
			l840:
				if !_rules[rulesp]() {
					goto l838
				}
				add(ruleadd, position839)
			}
			return true
		l838:
			position, tokenIndex = position838, tokenIndex838
			return false
		},
		/* 82 minus <- <(('-' / '－') sp)> */
		func() bool {
			position842, tokenIndex842 := position, tokenIndex
			{
				position843 := position
				{
					position844, tokenIndex844 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l845
					}
					position++
					goto l844
				l845:
					position, tokenIndex = position844, tokenIndex844
					if buffer[position] != rune('－') {
						goto l842
					}
					position++
				}
			l844:
				if !_rules[rulesp]() {
					goto l842
				}
				add(ruleminus, position843)
			}
			return true
		l842:
			position, tokenIndex = position842, tokenIndex842
			return false
		},
		/* 83 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 84 divide <- <(('/' / '／') sp)> */
		nil,
		/* 85 modulus <- <('%' sp)> */
		nil,
		/* 86 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 87 nullCoalescing <- <('?' '?' sp)> */
		nil,
		/* 88 bitwiseOr <- <('|' sp)> */
		nil,
		/* 89 bitwiseAnd <- <('&' sp)> */
		nil,
		/* 90 logicOr <- <('|' '|' sp)> */
		nil,
		/* 91 logicAnd <- <('&' '&' sp)> */
		nil,
		/* 92 lt <- <('<' sp)> */
		nil,
		/* 93 gt <- <('>' sp)> */
		nil,
		/* 94 le <- <('<' '=' sp)> */
		nil,
		/* 95 ge <- <('>' '=' sp)> */
		nil,
		/* 96 eq <- <('=' '=' sp)> */
		nil,
		/* 97 ne <- <('!' '=' sp)> */
		nil,
		/* 98 sp <- <((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position862 := position
			l863:
				{
					position864, tokenIndex864 := position, tokenIndex
					{
						switch buffer[position] {
						case '\r':
							if buffer[position] != rune('\r') {
								goto l864
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l864
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l864
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l864
							}
							position++
						}
					}

					goto l863
				l864:
					position, tokenIndex = position864, tokenIndex864
				}
				add(rulesp, position862)
			}
			return true
		},
		/* 99 spNoCR <- <((&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position867 := position
			l868:
				{
					position869, tokenIndex869 := position, tokenIndex
					{
						switch buffer[position] {
						case '\r':
							if buffer[position] != rune('\r') {
								goto l869
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l869
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l869
							}
							position++
						}
					}

					goto l868
				l869:
					position, tokenIndex = position869, tokenIndex869
				}
				add(rulespNoCR, position867)
			}
			return true
		},
		/* 100 sp1 <- <((((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ')) sp) / !.)> */
		func() bool {
			position871, tokenIndex871 := position, tokenIndex
			{
				position872 := position
				{
					position873, tokenIndex873 := position, tokenIndex
					{
						switch buffer[position] {
						case '\r':
							if buffer[position] != rune('\r') {
								goto l874
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l874
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l874
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l874
							}
							position++
						}
					}

					if !_rules[rulesp]() {
						goto l874
					}
					goto l873
				l874:
					position, tokenIndex = position873, tokenIndex873
					{
						position876, tokenIndex876 := position, tokenIndex
						if !matchDot() {
							goto l876
						}
						goto l871
					l876:
						position, tokenIndex = position876, tokenIndex876
					}
				}
			l873:
				add(rulesp1, position872)
			}
			return true
		l871:
			position, tokenIndex = position871, tokenIndex871
			return false
		},
		/* 101 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		func() bool {
			position877, tokenIndex877 := position, tokenIndex
			{
				position878 := position
				if buffer[position] != rune('\\') {
					goto l877
				}
				position++
				{
					switch buffer[position] {
					case '\\':
						if buffer[position] != rune('\\') {
							goto l877
						}
						position++
					case '\'':
						if buffer[position] != rune('\'') {
							goto l877
						}
						position++
					case '"':
						if buffer[position] != rune('"') {
							goto l877
						}
						position++
					case 'r':
						if buffer[position] != rune('r') {
							goto l877
						}
						position++
					case 'f':
						if buffer[position] != rune('f') {
							goto l877
						}
						position++
					case 'n':
						if buffer[position] != rune('n') {
							goto l877
						}
						position++
					case 't':
						if buffer[position] != rune('t') {
							goto l877
						}
						position++
					default:
						if buffer[position] != rune('b') {
							goto l877
						}
						position++
					}
				}

				add(ruleescape, position878)
			}
			return true
		l877:
			position, tokenIndex = position877, tokenIndex877
			return false
		},
		/* 102 comment <- <(spNoCR ('/' '/') (!'\n' .)* ('\n' / !.))> */
		nil,
		/* 103 st_expr <- <(st_modify_multi_1 / st_assign_multi / st_modify_multi_2 / ('1' '2' '3'))> */
		nil,
		/* 104 e0 <- <stmtRoot> */
		func() bool {
			position882, tokenIndex882 := position, tokenIndex
			{
				position883 := position
				if !_rules[rulestmtRoot]() {
					goto l882
				}
				add(rulee0, position883)
			}
			return true
		l882:
			position, tokenIndex = position882, tokenIndex882
			return false
		},
		/* 105 est <- <((&'(' e0) / (!{p.Flags.EnableDiceWoD = true} e0 !{p.Flags.EnableDiceWoD = false}))> */
		func() bool {
			position884, tokenIndex884 := position, tokenIndex
			{
				position885 := position
				{
					position886, tokenIndex886 := position, tokenIndex
					{
						position888, tokenIndex888 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l887
						}
						position++
						position, tokenIndex = position888, tokenIndex888
					}
					if !_rules[rulee0]() {
						goto l887
					}
					goto l886
				l887:
					position, tokenIndex = position886, tokenIndex886
					p.Flags.EnableDiceWoD = true
					if !_rules[rulee0]() {
						goto l884
					}
					p.Flags.EnableDiceWoD = false
				}
			l886:
				add(ruleest, position885)
			}
			return true
		l884:
			position, tokenIndex = position884, tokenIndex884
			return false
		},
		/* 106 st_assign_multi <- <(st_assign sp ','? sp)+> */
		nil,
		/* 107 st_assign <- <((st_name2 sp (':' / '=') sp est Action155) / (st_name1 est Action156) / (st_name2r sp (':' / '=') sp est Action157) / (st_name1r est Action158) / ('&' st_name2 sp (':' / '=') sp Action159 <est> Action160) / ('&' st_name2r sp (':' / '=') sp Action161 <est> Action162))> */
		nil,
		/* 108 st_modify_multi_1 <- <(((st_name2 st_modify_rest1) / (st_name2r st_modify_rest1) / (st_name1 st_modify_rest) / (st_name1r st_modify_rest)) sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 109 st_modify_rest1 <- <(sp (('+' '=' sp <e0> Action163) / ('-' '=' sp <e0> Action164)))> */
		func() bool {
			position892, tokenIndex892 := position, tokenIndex
			{
				position893 := position
				if !_rules[rulesp]() {
					goto l892
				}
				{
					position894, tokenIndex894 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l895
					}
					position++
					if buffer[position] != rune('=') {
						goto l895
					}
					position++
					if !_rules[rulesp]() {
						goto l895
					}
					{
						position896 := position
						if !_rules[rulee0]() {
							goto l895
						}
						add(rulePegText, position896)
					}
					{
						add(ruleAction163, position)
					}
					goto l894
				l895:
					position, tokenIndex = position894, tokenIndex894
					if buffer[position] != rune('-') {
						goto l892
					}
					position++
					if buffer[position] != rune('=') {
						goto l892
					}
					position++
					if !_rules[rulesp]() {
						goto l892
					}
					{
						position898 := position
						if !_rules[rulee0]() {
							goto l892
						}
						add(rulePegText, position898)
					}
					{
						add(ruleAction164, position)
					}
				}
			l894:
				add(rulest_modify_rest1, position893)
			}
			return true
		l892:
			position, tokenIndex = position892, tokenIndex892
			return false
		},
		/* 110 st_modify_multi_2 <- <(st_modify2 sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 111 st_modify_multi_rest <- <(st_modify2 sp ','? sp)*> */
		func() bool {
			{
				position902 := position
			l903:
				{
					position904, tokenIndex904 := position, tokenIndex
					if !_rules[rulest_modify2]() {
						goto l904
					}
					if !_rules[rulesp]() {
						goto l904
					}
					{
						position905, tokenIndex905 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l905
						}
						position++
						goto l906
					l905:
						position, tokenIndex = position905, tokenIndex905
					}
				l906:
					if !_rules[rulesp]() {
						goto l904
					}
					goto l903
				l904:
					position, tokenIndex = position904, tokenIndex904
				}
				add(rulest_modify_multi_rest, position902)
			}
			return true
		},
		/* 112 st_modify2 <- <((st_name2 st_modify_rest) / (st_name2r st_modify_rest))> */
		func() bool {
			position907, tokenIndex907 := position, tokenIndex
			{
				position908 := position
				{
					position909, tokenIndex909 := position, tokenIndex
					if !_rules[rulest_name2]() {
						goto l910
					}
					if !_rules[rulest_modify_rest]() {
						goto l910
					}
					goto l909
				l910:
					position, tokenIndex = position909, tokenIndex909
					if !_rules[rulest_name2r]() {
						goto l907
					}
					if !_rules[rulest_modify_rest]() {
						goto l907
					}
				}
			l909:
				add(rulest_modify2, position908)
			}
			return true
		l907:
			position, tokenIndex = position907, tokenIndex907
			return false
		},
		/* 113 st_modify_rest <- <(sp (('+' '='? sp <e0> Action165) / (&'-' sp <e0> Action166) / ('-' '='? sp <e0> Action167)))> */
		func() bool {
			position911, tokenIndex911 := position, tokenIndex
			{
				position912 := position
				if !_rules[rulesp]() {
					goto l911
				}
				{
					position913, tokenIndex913 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l914
					}
					position++
					{
						position915, tokenIndex915 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l915
						}
						position++
						goto l916
					l915:
						position, tokenIndex = position915, tokenIndex915
					}
				l916:
					if !_rules[rulesp]() {
						goto l914
					}
					{
						position917 := position
						if !_rules[rulee0]() {
							goto l914
						}
						add(rulePegText, position917)
					}
					{
						add(ruleAction165, position)
					}
					goto l913
				l914:
					position, tokenIndex = position913, tokenIndex913
					{
						position920, tokenIndex920 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l919
						}
						position++
						position, tokenIndex = position920, tokenIndex920
					}
					if !_rules[rulesp]() {
						goto l919
					}
					{
						position921 := position
						if !_rules[rulee0]() {
							goto l919
						}
						add(rulePegText, position921)
					}
					{
						add(ruleAction166, position)
					}
					goto l913
				l919:
					position, tokenIndex = position913, tokenIndex913
					if buffer[position] != rune('-') {
						goto l911
					}
					position++
					{
						position923, tokenIndex923 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l923
						}
						position++
						goto l924
					l923:
						position, tokenIndex = position923, tokenIndex923
					}
				l924:
					if !_rules[rulesp]() {
						goto l911
					}
					{
						position925 := position
						if !_rules[rulee0]() {
							goto l911
						}
						add(rulePegText, position925)
					}
					{
						add(ruleAction167, position)
					}
				}
			l913:
				add(rulest_modify_rest, position912)
			}
			return true
		l911:
			position, tokenIndex = position911, tokenIndex911
			return false
		},
		/* 114 st_name1 <- <(<(id_ch0+ ':' id_ch0+)> Action168)> */
		func() bool {
			position927, tokenIndex927 := position, tokenIndex
			{
				position928 := position
				{
					position929 := position
					if !_rules[ruleid_ch0]() {
						goto l927
					}
				l930:
					{
						position931, tokenIndex931 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l931
						}
						goto l930
					l931:
						position, tokenIndex = position931, tokenIndex931
					}
					if buffer[position] != rune(':') {
						goto l927
					}
					position++
					if !_rules[ruleid_ch0]() {
						goto l927
					}
				l932:
					{
						position933, tokenIndex933 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l933
						}
						goto l932
					l933:
						position, tokenIndex = position933, tokenIndex933
					}
					add(rulePegText, position929)
				}
				{
					add(ruleAction168, position)
				}
				add(rulest_name1, position928)
			}
			return true
		l927:
			position, tokenIndex = position927, tokenIndex927
			return false
		},
		/* 115 st_name1r <- <(<id_ch0+> Action169)> */
		func() bool {
			position935, tokenIndex935 := position, tokenIndex
			{
				position936 := position
				{
					position937 := position
					if !_rules[ruleid_ch0]() {
						goto l935
					}
				l938:
					{
						position939, tokenIndex939 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l939
						}
						goto l938
					l939:
						position, tokenIndex = position939, tokenIndex939
					}
					add(rulePegText, position937)
				}
				{
					add(ruleAction169, position)
				}
				add(rulest_name1r, position936)
			}
			return true
		l935:
			position, tokenIndex = position935, tokenIndex935
			return false
		},
		/* 116 st_name2 <- <(<(id_ch0 id_ch* (':' id_ch+))> Action170)> */
		func() bool {
			position941, tokenIndex941 := position, tokenIndex
			{
				position942 := position
				{
					position943 := position
					if !_rules[ruleid_ch0]() {
						goto l941
					}
				l944:
					{
						position945, tokenIndex945 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l945
						}
						goto l944
					l945:
						position, tokenIndex = position945, tokenIndex945
					}
					if buffer[position] != rune(':') {
						goto l941
					}
					position++
					if !_rules[ruleid_ch]() {
						goto l941
					}
				l946:
					{
						position947, tokenIndex947 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l947
						}
						goto l946
					l947:
						position, tokenIndex = position947, tokenIndex947
					}
					add(rulePegText, position943)
				}
				{
					add(ruleAction170, position)
				}
				add(rulest_name2, position942)
			}
			return true
		l941:
			position, tokenIndex = position941, tokenIndex941
			return false
		},
		/* 117 st_name2r <- <((<(id_ch0 id_ch*)> Action171) / ('\'' <(id_ch0 / ((&(':') ':') | (&(' ') ' ') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])))+> '\'' Action172))> */
		func() bool {
			position949, tokenIndex949 := position, tokenIndex
			{
				position950 := position
				{
					position951, tokenIndex951 := position, tokenIndex
					{
						position953 := position
						if !_rules[ruleid_ch0]() {
							goto l952
						}
					l954:
						{
							position955, tokenIndex955 := position, tokenIndex
							if !_rules[ruleid_ch]() {
								goto l955
							}
							goto l954
						l955:
							position, tokenIndex = position955, tokenIndex955
						}
						add(rulePegText, position953)
					}
					{
						add(ruleAction171, position)
					}
					goto l951
				l952:
					position, tokenIndex = position951, tokenIndex951
					if buffer[position] != rune('\'') {
						goto l949
					}
					position++
					{
						position957 := position
						{
							position960, tokenIndex960 := position, tokenIndex
							if !_rules[ruleid_ch0]() {
								goto l961
							}
							goto l960
						l961:
							position, tokenIndex = position960, tokenIndex960
							{
								switch buffer[position] {
								case ':':
									if buffer[position] != rune(':') {
										goto l949
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l949
									}
									position++
								default:
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l949
									}
									position++
								}
							}

						}
					l960:
					l958:
						{
							position959, tokenIndex959 := position, tokenIndex
							{
								position963, tokenIndex963 := position, tokenIndex
								if !_rules[ruleid_ch0]() {
									goto l964
								}
								goto l963
							l964:
								position, tokenIndex = position963, tokenIndex963
								{
									switch buffer[position] {
									case ':':
										if buffer[position] != rune(':') {
											goto l959
										}
										position++
									case ' ':
										if buffer[position] != rune(' ') {
											goto l959
										}
										position++
									default:
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l959
										}
										position++
									}
								}

							}
						l963:
							goto l958
						l959:
							position, tokenIndex = position959, tokenIndex959
						}
						add(rulePegText, position957)
					}
					if buffer[position] != rune('\'') {
						goto l949
					}
					position++
					{
						add(ruleAction172, position)
					}
				}
			l951:
				add(rulest_name2r, position950)
			}
			return true
		l949:
			position, tokenIndex = position949, tokenIndex949
			return false
		},
		/* 118 id_ch0 <- <(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) .)> */
		func() bool {
			position967, tokenIndex967 := position, tokenIndex
			{
				position968 := position
				{
					position969, tokenIndex969 := position, tokenIndex
					{
						switch buffer[position] {
						case '\x1e':
							if buffer[position] != rune('\x1e') {
								goto l969
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l969
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l969
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l969
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l969
							}
							position++
						case '~':
							if buffer[position] != rune('~') {
								goto l969
							}
							position++
						case '}':
							if buffer[position] != rune('}') {
								goto l969
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l969
							}
							position++
						case '{':
							if buffer[position] != rune('{') {
								goto l969
							}
							position++
						case '`':
							if buffer[position] != rune('`') {
								goto l969
							}
							position++
						case '^':
							if buffer[position] != rune('^') {
								goto l969
							}
							position++
						case ']':
							if buffer[position] != rune(']') {
								goto l969
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l969
							}
							position++
						case '[':
							if buffer[position] != rune('[') {
								goto l969
							}
							position++
						case '@':
							if buffer[position] != rune('@') {
								goto l969
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l969
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l969
							}
							position++
						case '=':
							if buffer[position] != rune('=') {
								goto l969
							}
							position++
						case '<':
							if buffer[position] != rune('<') {
								goto l969
							}
							position++
						case ';':
							if buffer[position] != rune(';') {
								goto l969
							}
							position++
						case ':':
							if buffer[position] != rune(':') {
								goto l969
							}
							position++
						case '+':
							if buffer[position] != rune('+') {
								goto l969
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l969
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l969
							}
							position++
						case '(':
							if buffer[position] != rune('(') {
								goto l969
							}
							position++
						case '\'':
							if buffer[position] != rune('\'') {
								goto l969
							}
							position++
						case '&':
							if buffer[position] != rune('&') {
								goto l969
							}
							position++
						case '%':
							if buffer[position] != rune('%') {
								goto l969
							}
							position++
						case '$':
							if buffer[position] != rune('$') {
								goto l969
							}
							position++
						case '#':
							if buffer[position] != rune('#') {
								goto l969
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l969
							}
							position++
						case '!':
							if buffer[position] != rune('!') {
								goto l969
							}
							position++
						case ',', '-', '.':
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l969
							}
							position++
						default:
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l969
							}
							position++
						}
					}

					goto l967
				l969:
					position, tokenIndex = position969, tokenIndex969
				}
				if !matchDot() {
					goto l967
				}
				add(ruleid_ch0, position968)
			}
			return true
		l967:
			position, tokenIndex = position967, tokenIndex967
			return false
		},
		/* 119 id_ch <- <id_ch0> */
		func() bool {
			position971, tokenIndex971 := position, tokenIndex
			{
				position972 := position
				if !_rules[ruleid_ch0]() {
					goto l971
				}
				add(ruleid_ch, position972)
			}
			return true
		l971:
			position, tokenIndex = position971, tokenIndex971
			return false
		},
		/* 121 Action0 <- <{ p.AddOp(TypeHalt) }> */
		nil,
		/* 122 Action1 <- <{ p.BreakPush() }> */
		nil,
		/* 123 Action2 <- <{ p.ContinuePush() }> */
		nil,
		/* 124 Action3 <- <{ p.AddOp(TypeReturn); }> */
		nil,
		/* 125 Action4 <- <{ p.PushUndefined(); p.AddOp(TypeReturn); }> */
		nil,
		/* 126 Action5 <- <{ p.LoopBegin(); p.OffsetPush() }> */
		nil,
		/* 127 Action6 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 128 Action7 <- <{ p.AddOp(TypeJmp); p.OffsetPush(); p.OffsetJmpSetX(0, 2, true); p.OffsetJmpSetX(1, 1, false); p.ContinueSet(2); p.BreakSet(); p.OffsetPopN(3);p.LoopEnd(); }> */
		nil,
		/* 129 Action8 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 130 Action9 <- <{ p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush(); }> */
		nil,
		/* 131 Action10 <- <{ p.OffsetPopAndSet() }> */
		nil,
		/* 132 Action11 <- <{ p.CounterPush() }> */
		nil,
		/* 133 Action12 <- <{ p.CounterPush(); p.CounterAdd(1) }> */
		nil,
		/* 134 Action13 <- <{ p.NamePush(text) }> */
		nil,
		/* 135 Action14 <- <{ p.NamePush(text) }> */
		nil,
		/* 136 Action15 <- <{p.CounterAdd(1)}> */
		nil,
		/* 137 Action16 <- <{ p.NamePush(text) }> */
		nil,
		/* 138 Action17 <- <{ p.CodePush() }> */
		nil,
		nil,
		/* 140 Action18 <- <{  num := p.CounterPop(); arr := []string{}; for i:=int64(0); i<num; i++ { arr = append(arr, p.NamePop()) }; p.AddStoreFunction(p.NamePop(), arr, string(text)) }> */
		nil,
		/* 141 Action19 <- <{ p.NamePush(text) }> */
		nil,
		/* 142 Action20 <- <{ p.AddStore(p.NamePop()) }> */
		nil,
		/* 143 Action21 <- <{ p.NamePush(text) }> */
		nil,
		/* 144 Action22 <- <{ p.CodePush() }> */
		nil,
		/* 145 Action23 <- <{ p.AddStoreComputed(p.NamePop(), string(text)) }> */
		nil,
		/* 146 Action24 <- <{ p.NamePush(text) }> */
		nil,
		/* 147 Action25 <- <{ p.NamePush(text) }> */
		nil,
		/* 148 Action26 <- <{ attr, objName := p.NamePop(), p.NamePop(); p.AddAttrSet(objName, attr, true) }> */
		nil,
		/* 149 Action27 <- <{ p.NamePush(text) }> */
		nil,
		/* 150 Action28 <- <{ p.AddStoreLocal(p.NamePop()) }> */
		nil,
		/* 151 Action29 <- <{ p.NamePush(text) }> */
		nil,
		/* 152 Action30 <- <{ p.NamePush(text) }> */
		nil,
		/* 153 Action31 <- <{ attr, objName := p.NamePop(), p.NamePop(); p.AddAttrSet(objName, attr, false) }> */
		nil,
		/* 154 Action32 <- <{ p.AddOp(TypeItemSet) }> */
		nil,
		/* 155 Action33 <- <{ p.AddOp(TypeSliceSet) }> */
		nil,
		/* 156 Action34 <- <{ p.PushUndefined() }> */
		nil,
		/* 157 Action35 <- <{ p.PushUndefined() }> */
		nil,
		/* 158 Action36 <- <{ p.PushUndefined() }> */
		nil,
		/* 159 Action37 <- <{ p.PushUndefined() }> */
		nil,
		/* 160 Action38 <- <{ p.AddOp(TypeSliceGet) }> */
		nil,
		/* 161 Action39 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 162 Action40 <- <{ p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush(); }> */
		nil,
		/* 163 Action41 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 164 Action42 <- <{ p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush() }> */
		nil,
		/* 165 Action43 <- <{ p.OffsetPopAndSet() }> */
		nil,
		/* 166 Action44 <- <{ p.CounterPush() }> */
		nil,
		/* 167 Action45 <- <{p.CounterAdd(1)}> */
		nil,
		/* 168 Action46 <- <{ p.PushStr(""); limit:=p.CounterPop()+1; for i:=int64(0); i<limit; i++ { p.OffsetPopAndSet() } }> */
		nil,
		/* 169 Action47 <- <{p.AddOp(TypeJeDup); p.OffsetPush()}> */
		nil,
		/* 170 Action48 <- <{ p.AddOp(TypeJeDup); p.OffsetPush()}> */
		nil,
		/* 171 Action49 <- <{ p.AddOp(TypePushLast); p.OffsetPopAndSet(); p.OffsetPopAndSet();  }> */
		nil,
		/* 172 Action50 <- <{ p.AddOp(TypeLogicAnd) }> */
		nil,
		/* 173 Action51 <- <{ p.AddOp(TypeBitwiseOr) }> */
		nil,
		/* 174 Action52 <- <{ p.AddOp(TypeBitwiseAnd) }> */
		nil,
		/* 175 Action53 <- <{ p.AddOp(TypeCompLT) }> */
		nil,
		/* 176 Action54 <- <{ p.AddOp(TypeCompLE) }> */
		nil,
		/* 177 Action55 <- <{ p.AddOp(TypeCompEQ) }> */
		nil,
		/* 178 Action56 <- <{ p.AddOp(TypeCompNE) }> */
		nil,
		/* 179 Action57 <- <{ p.AddOp(TypeCompGE) }> */
		nil,
		/* 180 Action58 <- <{ p.AddOp(TypeCompGT) }> */
		nil,
		/* 181 Action59 <- <{ p.AddOp(TypeAdd) }> */
		nil,
		/* 182 Action60 <- <{ p.AddOp(TypeSubtract) }> */
		nil,
		/* 183 Action61 <- <{ p.AddOp(TypeMultiply) }> */
		nil,
		/* 184 Action62 <- <{ p.AddOp(TypeDivide) }> */
		nil,
		/* 185 Action63 <- <{ p.AddOp(TypeModulus) }> */
		nil,
		/* 186 Action64 <- <{ p.AddOp(TypeNullCoalescing) }> */
		nil,
		/* 187 Action65 <- <{ p.AddOp(TypeExponentiation) }> */
		nil,
		/* 188 Action66 <- <{ p.AddOp(TypeNegation) }> */
		nil,
		/* 189 Action67 <- <{ p.AddOp(TypePositive) }> */
		nil,
		/* 190 Action68 <- <{ p.AddOp(TypeDiceSetKeepLowNum) }> */
		nil,
		/* 191 Action69 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepLowNum) }> */
		nil,
		/* 192 Action70 <- <{ p.AddOp(TypeDiceSetKeepHighNum) }> */
		nil,
		/* 193 Action71 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepHighNum) }> */
		nil,
		/* 194 Action72 <- <{ p.AddOp(TypeDiceSetDropHighNum) }> */
		nil,
		/* 195 Action73 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetDropHighNum) }> */
		nil,
		/* 196 Action74 <- <{ p.AddOp(TypeDiceSetDropLowNum) }> */
		nil,
		/* 197 Action75 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetDropLowNum) }> */
		nil,
		/* 198 Action76 <- <{ p.AddOp(TypeDiceSetMin) }> */
		nil,
		/* 199 Action77 <- <{ p.AddOp(TypeDiceSetMax) }> */
		nil,
		/* 200 Action78 <- <{ p.PushIntNumber("2"); p.AddOp(TypeDiceSetTimes); p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepHighNum) }> */
		nil,
		/* 201 Action79 <- <{ p.PushIntNumber("2"); p.AddOp(TypeDiceSetTimes); p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepLowNum) }> */
		nil,
		/* 202 Action80 <- <{ p.CounterPush(); p.CounterAdd(int64(token.begin)) }> */
		nil,
		/* 203 Action81 <- <{ p.AddDiceDetail(p.CounterPop(), int64(token.end)) }> */
		nil,
		/* 204 Action82 <- <{ p.AddOp(TypeDiceInit); p.AddOp(TypeDiceSetTimes); }> */
		nil,
		/* 205 Action83 <- <{ p.AddOp(TypeDiceInit); }> */
		nil,
		/* 206 Action84 <- <{ p.AddOp(TypeDice) }> */
		nil,
		/* 207 Action85 <- <{ p.AddOp(TypeWodSetPoints) }> */
		nil,
		/* 208 Action86 <- <{ p.AddOp(TypeWodSetThreshold) }> */
		nil,
		/* 209 Action87 <- <{ p.AddOp(TypeWodSetThresholdQ) }> */
		nil,
		/* 210 Action88 <- <{p.PushIntNumber("1")}> */
		nil,
		/* 211 Action89 <- <{ p.AddOp(TypeDiceCocBonus) }> */
		nil,
		/* 212 Action90 <- <{p.PushIntNumber("1")}> */
		nil,
		/* 213 Action91 <- <{ p.AddOp(TypeDiceCocPenalty) }> */
		nil,
		/* 214 Action92 <- <{ p.AddOp(TypeDice) }> */
		nil,
		/* 215 Action93 <- <{ p.AddOp(TypeDice) }> */
		nil,
		/* 216 Action94 <- <{ p.AddOp(TypeWodSetInit) }> */
		nil,
		/* 217 Action95 <- <{ p.AddOp(TypeWodSetPool) }> */
		nil,
		/* 218 Action96 <- <{ p.AddOp(TypeDiceWod) }> */
		nil,
		/* 219 Action97 <- <{ p.AddOp(TypeDCSetInit) }> */
		nil,
		/* 220 Action98 <- <{ p.AddOp(TypeDCSetPool) }> */
		nil,
		/* 221 Action99 <- <{ p.AddOp(TypeDCSetPoints) }> */
		nil,
		/* 222 Action100 <- <{ p.AddOp(TypeDiceDC) }> */
		nil,
		/* 223 Action101 <- <{ p.AddOp(TypeDiceFate) }> */
		nil,
		/* 224 Action102 <- <{ p.AddOp(TypeItemGet) }> */
		nil,
		/* 225 Action103 <- <{ p.WriteCode(TypeGetAttr, string("kh")) }> */
		nil,
		/* 226 Action104 <- <{ p.AddInvoke(1) }> */
		nil,
		/* 227 Action105 <- <{p.AddInvoke(0)}> */
		nil,
		/* 228 Action106 <- <{ p.WriteCode(TypeGetAttr, string("kl")) }> */
		nil,
		/* 229 Action107 <- <{ p.AddInvoke(1) }> */
		nil,
		/* 230 Action108 <- <{p.AddInvoke(0)}> */
		nil,
		/* 231 Action109 <- <{ p.AddOp(TypeItemGet) }> */
		nil,
		/* 232 Action110 <- <{ p.WriteCode(TypeGetAttr, string(text)) }> */
		nil,
		/* 233 Action111 <- <{ p.AddInvoke(0) }> */
		nil,
		/* 234 Action112 <- <{ p.CounterPush(); p.CounterAdd(1) }> */
		nil,
		/* 235 Action113 <- <{p.CounterAdd(1)}> */
		nil,
		/* 236 Action114 <- <{ p.AddInvoke(p.CounterPop()) }> */
		nil,
		/* 237 Action115 <- <{ p.CounterAdd(1) }> */
		nil,
		/* 238 Action116 <- <{ p.WriteCode(TypeLoadName, string(text)) }> */
		nil,
		/* 239 Action117 <- <{ p.PushIntNumber("1") }> */
		nil,
		/* 240 Action118 <- <{ p.PushIntNumber("0") }> */
		nil,
		/* 241 Action119 <- <{ p.PushUndefined() }> */
		nil,
		/* 242 Action120 <- <{ p.PushThis() }> */
		nil,
		/* 243 Action121 <- <{ p.WriteCode(TypeLoadNameRaw, string(text)) }> */
		nil,
		/* 244 Action122 <- <{ p.WriteCode(TypeLoadNameWithDetail, string(text)) }> */
		nil,
		/* 245 Action123 <- <{ p.PushArray(0) }> */
		nil,
		/* 246 Action124 <- <{ p.AddOp(TypePushRange) }> */
		nil,
		/* 247 Action125 <- <{ p.CounterPush(); p.CounterAdd(1) }> */
		nil,
		/* 248 Action126 <- <{p.CounterAdd(1)}> */
		nil,
		/* 249 Action127 <- <{ p.PushArray(p.CounterPop()) }> */
		nil,
		/* 250 Action128 <- <{ p.PushDict(0) }> */
		nil,
		/* 251 Action129 <- <{ p.CounterPush() }> */
		nil,
		/* 252 Action130 <- <{ p.PushDict(p.CounterPop()) }> */
		nil,
		/* 253 Action131 <- <{ p.CodePush() }> */
		nil,
		/* 254 Action132 <- <{  num := p.CounterPop(); arr := []string{}; for i:=int64(0); i<num; i++ { arr = append(arr, p.NamePop()) }; p.AddStoreFunction("", arr, string(text)) }> */
		nil,
		/* 255 Action133 <- <{ p.PushIntNumber(string(text)) }> */
		nil,
		/* 256 Action134 <- <{ p.PushFloatNumber(string(text)) }> */
		nil,
		/* 257 Action135 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 258 Action136 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 259 Action137 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 260 Action138 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 261 Action139 <- <{ p.PushStr("") }> */
		nil,
		/* 262 Action140 <- <{ p.PushStr("") }> */
		nil,
		/* 263 Action141 <- <{ p.PushStr("") }> */
		nil,
		/* 264 Action142 <- <{ p.PushStr("") }> */
		nil,
		/* 265 Action143 <- <{ p.CounterPush() }> */
		nil,
		/* 266 Action144 <- <{p.CounterAdd(1)}> */
		nil,
		/* 267 Action145 <- <{p.CounterAdd(1)}> */
		nil,
		/* 268 Action146 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 269 Action147 <- <{ p.CounterPush() }> */
		nil,
		/* 270 Action148 <- <{p.CounterAdd(1)}> */
		nil,
		/* 271 Action149 <- <{p.CounterAdd(1)}> */
		nil,
		/* 272 Action150 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 273 Action151 <- <{ p.CounterPush() }> */
		nil,
		/* 274 Action152 <- <{ p.CounterPop() }> */
		nil,
		/* 275 Action153 <- <{ p.CounterPush() }> */
		nil,
		/* 276 Action154 <- <{ p.CounterPop() }> */
		nil,
		/* 277 Action155 <- <{ p.AddStName() }> */
		nil,
		/* 278 Action156 <- <{ p.AddStName() }> */
		nil,
		/* 279 Action157 <- <{ p.AddStName() }> */
		nil,
		/* 280 Action158 <- <{ p.AddStName() }> */
		nil,
		/* 281 Action159 <- <{ p.CodePush() }> */
		nil,
		/* 282 Action160 <- <{ p.CodePop(); p.AddStoreComputedOnStack(text); p.AddStName() }> */
		nil,
		/* 283 Action161 <- <{ p.CodePush() }> */
		nil,
		/* 284 Action162 <- <{ p.CodePop(); p.AddStoreComputedOnStack(text); p.AddStName() }> */
		nil,
		/* 285 Action163 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 286 Action164 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 287 Action165 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 288 Action166 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 289 Action167 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 290 Action168 <- <{ p.PushStr(text) }> */
		nil,
		/* 291 Action169 <- <{ p.PushStr(text) }> */
		nil,
		/* 292 Action170 <- <{ p.PushStr(text) }> */
		nil,
		/* 293 Action171 <- <{ p.PushStr(text) }> */
		nil,
		/* 294 Action172 <- <{ p.PushStr(text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
