package dicescript

// Code generated by peg -switch -inline roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint16

const (
	ruleUnknown pegRule = iota
	ruledicescript
	rulestmtRoot
	rulestmtLines
	rulenextLine
	rule_switchEnablePrefix
	rule_switchTrue
	rule_switchFalse
	ruleflagsSwitch
	rulestmtWithSemicolon
	rulestmtWithBlock
	rulestmtBreak
	rulestmtContinue
	rulestmtReturn
	rulestmtWhile
	ruleblock
	rulestmtElse
	rulestmtIf
	rulefunc_def_params
	rulestmtFunc
	rulestmtAssign
	ruleexprRoot
	rule_step
	rule_sliceSuffix
	ruleexprSlice
	ruleexprValueIfExists
	ruleexprTernary
	ruleexprLogicOr
	ruleexprLogicAnd
	ruleexprBitwiseOr
	ruleexprBitwiseAnd
	ruleexprCompare
	ruleexprAdditive
	ruleexprMultiplicative
	ruleexprExp
	ruleexprUnaryNeg
	ruleexprUnaryPos
	rulenos
	rule_diceMod
	rule_diceMod2
	rule_dicePearMod
	ruledetailStart
	ruledetailEnd
	rule_diceType1
	rule_diceType2
	rule_diceExpr1
	rule_diceExpr2
	rule_diceExprX
	rule_wodTypeMain
	rule_wodDiceType
	rule_wodMain
	rule_cocDiceType
	rule_diceCocBonus
	rule_diceCocPenalty
	rule_dcDiceType
	rule_fateDiceType
	ruleexprDice
	ruleitem_get
	rulearray_call
	ruleattr_get
	rulefunc_invoke
	ruledict_item
	rulevalue_id_without_colon
	rulevalue
	rulenumber
	rulefloat
	rulestrPart
	rulestrPart1
	rulestrPart2
	rulestrPart3
	rulefstring
	rulekeywords
	ruleidentifier_ch0
	ruleidentifier_ch
	ruleno_keywords
	ruleidentifier
	ruleidentifierWithoutColon
	rulesub
	ruleparenOpen
	ruleparenClose
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	rulebitwiseOr
	rulebitwiseAnd
	rulelogicOr
	rulelogicAnd
	rulelt
	rulegt
	rulele
	rulege
	ruleeq
	rulene
	rulesp
	rulespNoCR
	rulesp1
	ruleescape
	rulecomment
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	rulePegText
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
	ruleAction75
	ruleAction76
	ruleAction77
	ruleAction78
	ruleAction79
	ruleAction80
	ruleAction81
	ruleAction82
	ruleAction83
	ruleAction84
	ruleAction85
	ruleAction86
	ruleAction87
	ruleAction88
	ruleAction89
	ruleAction90
	ruleAction91
	ruleAction92
	ruleAction93
	ruleAction94
	ruleAction95
	ruleAction96
	ruleAction97
	ruleAction98
	ruleAction99
	ruleAction100
	ruleAction101
	ruleAction102
	ruleAction103
	ruleAction104
	ruleAction105
	ruleAction106
	ruleAction107
	ruleAction108
	ruleAction109
	ruleAction110
	ruleAction111
	ruleAction112
	ruleAction113
	ruleAction114
	ruleAction115
	ruleAction116
	ruleAction117
	ruleAction118
	ruleAction119
	ruleAction120
	ruleAction121
	ruleAction122
	ruleAction123
	ruleAction124
	ruleAction125
	ruleAction126
	ruleAction127
	ruleAction128
	ruleAction129
	ruleAction130
	ruleAction131
	ruleAction132
	ruleAction133
	ruleAction134
	ruleAction135
	ruleAction136
	ruleAction137
	ruleAction138
	ruleAction139
	ruleAction140
	ruleAction141
	ruleAction142
	ruleAction143
	ruleAction144
	ruleAction145
	ruleAction146
	ruleAction147
	ruleAction148
	ruleAction149
	ruleAction150
	ruleAction151
	ruleAction152
	ruleAction153
)

var rul3s = [...]string{
	"Unknown",
	"dicescript",
	"stmtRoot",
	"stmtLines",
	"nextLine",
	"_switchEnablePrefix",
	"_switchTrue",
	"_switchFalse",
	"flagsSwitch",
	"stmtWithSemicolon",
	"stmtWithBlock",
	"stmtBreak",
	"stmtContinue",
	"stmtReturn",
	"stmtWhile",
	"block",
	"stmtElse",
	"stmtIf",
	"func_def_params",
	"stmtFunc",
	"stmtAssign",
	"exprRoot",
	"_step",
	"_sliceSuffix",
	"exprSlice",
	"exprValueIfExists",
	"exprTernary",
	"exprLogicOr",
	"exprLogicAnd",
	"exprBitwiseOr",
	"exprBitwiseAnd",
	"exprCompare",
	"exprAdditive",
	"exprMultiplicative",
	"exprExp",
	"exprUnaryNeg",
	"exprUnaryPos",
	"nos",
	"_diceMod",
	"_diceMod2",
	"_dicePearMod",
	"detailStart",
	"detailEnd",
	"_diceType1",
	"_diceType2",
	"_diceExpr1",
	"_diceExpr2",
	"_diceExprX",
	"_wodTypeMain",
	"_wodDiceType",
	"_wodMain",
	"_cocDiceType",
	"_diceCocBonus",
	"_diceCocPenalty",
	"_dcDiceType",
	"_fateDiceType",
	"exprDice",
	"item_get",
	"array_call",
	"attr_get",
	"func_invoke",
	"dict_item",
	"value_id_without_colon",
	"value",
	"number",
	"float",
	"strPart",
	"strPart1",
	"strPart2",
	"strPart3",
	"fstring",
	"keywords",
	"identifier_ch0",
	"identifier_ch",
	"no_keywords",
	"identifier",
	"identifierWithoutColon",
	"sub",
	"parenOpen",
	"parenClose",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"bitwiseOr",
	"bitwiseAnd",
	"logicOr",
	"logicAnd",
	"lt",
	"gt",
	"le",
	"ge",
	"eq",
	"ne",
	"sp",
	"spNoCR",
	"sp1",
	"escape",
	"comment",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"PegText",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
	"Action75",
	"Action76",
	"Action77",
	"Action78",
	"Action79",
	"Action80",
	"Action81",
	"Action82",
	"Action83",
	"Action84",
	"Action85",
	"Action86",
	"Action87",
	"Action88",
	"Action89",
	"Action90",
	"Action91",
	"Action92",
	"Action93",
	"Action94",
	"Action95",
	"Action96",
	"Action97",
	"Action98",
	"Action99",
	"Action100",
	"Action101",
	"Action102",
	"Action103",
	"Action104",
	"Action105",
	"Action106",
	"Action107",
	"Action108",
	"Action109",
	"Action110",
	"Action111",
	"Action112",
	"Action113",
	"Action114",
	"Action115",
	"Action116",
	"Action117",
	"Action118",
	"Action119",
	"Action120",
	"Action121",
	"Action122",
	"Action123",
	"Action124",
	"Action125",
	"Action126",
	"Action127",
	"Action128",
	"Action129",
	"Action130",
	"Action131",
	"Action132",
	"Action133",
	"Action134",
	"Action135",
	"Action136",
	"Action137",
	"Action138",
	"Action139",
	"Action140",
	"Action141",
	"Action142",
	"Action143",
	"Action144",
	"Action145",
	"Action146",
	"Action147",
	"Action148",
	"Action149",
	"Action150",
	"Action151",
	"Action152",
	"Action153",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	ParserData
	Context

	Buffer string
	buffer []rune
	rules  [256]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOp(TypeHalt)
		case ruleAction1:
			p.BreakPush()
		case ruleAction2:
			p.ContinuePush()
		case ruleAction3:
			p.AddOp(TypeReturn)
		case ruleAction4:
			p.PushUndefined()
			p.AddOp(TypeReturn)
		case ruleAction5:
			p.LoopBegin()
			p.OffsetPush()
		case ruleAction6:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction7:
			p.AddOp(TypeJmp)
			p.OffsetPush()
			p.OffsetJmpSetX(0, 2, true)
			p.OffsetJmpSetX(1, 1, false)
			p.ContinueSet(2)
			p.BreakSet()
			p.OffsetPopN(3)
			p.LoopEnd()
		case ruleAction8:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction9:
			p.AddOp(TypeJmp)
			p.OffsetPopAndSet()
			p.OffsetPush()
		case ruleAction10:
			p.OffsetPopAndSet()
		case ruleAction11:
			p.CounterPush()
		case ruleAction12:
			p.CounterPush()
			p.CounterAdd(1)
		case ruleAction13:
			p.NamePush(text)
		case ruleAction14:
			p.NamePush(text)
		case ruleAction15:
			p.CounterAdd(1)
		case ruleAction16:
			p.NamePush(text)
		case ruleAction17:
			p.CodePush()
		case ruleAction18:
			num := p.CounterPop()
			arr := []string{}
			for i := int64(0); i < num; i++ {
				arr = append(arr, p.NamePop())
			}
			p.AddStoreFunction(p.NamePop(), arr, string(text))
		case ruleAction19:
			p.NamePush(text)
		case ruleAction20:
			p.AddStore(p.NamePop())
		case ruleAction21:
			p.NamePush(text)
		case ruleAction22:
			p.CodePush()
		case ruleAction23:
			p.AddStoreComputed(p.NamePop(), string(text))
		case ruleAction24:
			p.NamePush(text)
		case ruleAction25:
			p.NamePush(text)
		case ruleAction26:
			attr, objName := p.NamePop(), p.NamePop()
			p.AddAttrSet(objName, attr, true)
		case ruleAction27:
			p.NamePush(text)
		case ruleAction28:
			p.AddStoreLocal(p.NamePop())
		case ruleAction29:
			p.NamePush(text)
		case ruleAction30:
			p.NamePush(text)
		case ruleAction31:
			attr, objName := p.NamePop(), p.NamePop()
			p.AddAttrSet(objName, attr, false)
		case ruleAction32:
			p.AddOp(TypeItemSet)
		case ruleAction33:
			p.AddOp(TypeSliceSet)
		case ruleAction34:
			p.PushUndefined()
		case ruleAction35:
			p.PushUndefined()
		case ruleAction36:
			p.PushUndefined()
		case ruleAction37:
			p.PushUndefined()
		case ruleAction38:
			p.AddOp(TypeSliceGet)
		case ruleAction39:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction40:
			p.AddOp(TypeJmp)
			p.OffsetPopAndSet()
			p.OffsetPush()
		case ruleAction41:
			p.AddOp(TypeJne)
			p.OffsetPush()
		case ruleAction42:
			p.AddOp(TypeJmp)
			p.OffsetPopAndSet()
			p.OffsetPush()
		case ruleAction43:
			p.OffsetPopAndSet()
		case ruleAction44:
			p.CounterPush()
		case ruleAction45:
			p.CounterAdd(1)
		case ruleAction46:
			p.PushStr("")
			limit := p.CounterPop() + 1
			for i := int64(0); i < limit; i++ {
				p.OffsetPopAndSet()
			}
		case ruleAction47:
			p.AddOp(TypeJeDup)
			p.OffsetPush()
		case ruleAction48:
			p.AddOp(TypeJeDup)
			p.OffsetPush()
		case ruleAction49:
			p.AddOp(TypePushLast)
			p.OffsetPopAndSet()
			p.OffsetPopAndSet()
		case ruleAction50:
			p.AddOp(TypeLogicAnd)
		case ruleAction51:
			p.AddOp(TypeBitwiseOr)
		case ruleAction52:
			p.AddOp(TypeBitwiseAnd)
		case ruleAction53:
			p.AddOp(TypeCompLT)
		case ruleAction54:
			p.AddOp(TypeCompLE)
		case ruleAction55:
			p.AddOp(TypeCompEQ)
		case ruleAction56:
			p.AddOp(TypeCompNE)
		case ruleAction57:
			p.AddOp(TypeCompGE)
		case ruleAction58:
			p.AddOp(TypeCompGT)
		case ruleAction59:
			p.AddOp(TypeAdd)
		case ruleAction60:
			p.AddOp(TypeSubtract)
		case ruleAction61:
			p.AddOp(TypeMultiply)
		case ruleAction62:
			p.AddOp(TypeDivide)
		case ruleAction63:
			p.AddOp(TypeModulus)
		case ruleAction64:
			p.AddOp(TypeExponentiation)
		case ruleAction65:
			p.AddOp(TypeNegation)
		case ruleAction66:
			p.AddOp(TypePositive)
		case ruleAction67:
			p.AddOp(TypeDiceSetKeepLowNum)
		case ruleAction68:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepLowNum)
		case ruleAction69:
			p.AddOp(TypeDiceSetKeepHighNum)
		case ruleAction70:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepHighNum)
		case ruleAction71:
			p.AddOp(TypeDiceSetDropHighNum)
		case ruleAction72:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetDropHighNum)
		case ruleAction73:
			p.AddOp(TypeDiceSetDropLowNum)
		case ruleAction74:
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetDropLowNum)
		case ruleAction75:
			p.AddOp(TypeDiceSetMin)
		case ruleAction76:
			p.AddOp(TypeDiceSetMax)
		case ruleAction77:
			p.PushIntNumber("2")
			p.AddOp(TypeDiceSetTimes)
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepHighNum)
		case ruleAction78:
			p.PushIntNumber("2")
			p.AddOp(TypeDiceSetTimes)
			p.PushIntNumber("1")
			p.AddOp(TypeDiceSetKeepLowNum)
		case ruleAction79:
			p.CounterPush()
			p.CounterAdd(int64(token.begin))
		case ruleAction80:
			p.AddDiceDetail(p.CounterPop(), int64(token.end))
		case ruleAction81:
			p.AddOp(TypeDiceInit)
			p.AddOp(TypeDiceSetTimes)
		case ruleAction82:
			p.AddOp(TypeDiceInit)
		case ruleAction83:
			p.AddOp(TypeDice)
		case ruleAction84:
			p.AddOp(TypeWodSetPoints)
		case ruleAction85:
			p.AddOp(TypeWodSetThreshold)
		case ruleAction86:
			p.AddOp(TypeWodSetThresholdQ)
		case ruleAction87:
			p.PushIntNumber("1")
		case ruleAction88:
			p.AddOp(TypeDiceCocBonus)
		case ruleAction89:
			p.PushIntNumber("1")
		case ruleAction90:
			p.AddOp(TypeDiceCocPenalty)
		case ruleAction91:
			p.AddOp(TypeDice)
		case ruleAction92:
			p.AddOp(TypeDice)
		case ruleAction93:
			p.AddOp(TypeWodSetInit)
		case ruleAction94:
			p.AddOp(TypeWodSetPool)
		case ruleAction95:
			p.AddOp(TypeDiceWod)
		case ruleAction96:
			p.AddOp(TypeDCSetInit)
		case ruleAction97:
			p.AddOp(TypeDCSetPool)
		case ruleAction98:
			p.AddOp(TypeDCSetPoints)
		case ruleAction99:
			p.AddOp(TypeDiceDC)
		case ruleAction100:
			p.AddOp(TypeDiceFate)
		case ruleAction101:
			p.AddOp(TypeItemGet)
		case ruleAction102:
			p.WriteCode(TypeGetAttr, string("kh"))
		case ruleAction103:
			p.AddInvoke(1)
		case ruleAction104:
			p.AddInvoke(0)
		case ruleAction105:
			p.WriteCode(TypeGetAttr, string("kl"))
		case ruleAction106:
			p.AddInvoke(1)
		case ruleAction107:
			p.AddInvoke(0)
		case ruleAction108:
			p.AddOp(TypeItemGet)
		case ruleAction109:
			p.WriteCode(TypeGetAttr, string(text))
		case ruleAction110:
			p.AddInvoke(0)
		case ruleAction111:
			p.CounterPush()
			p.CounterAdd(1)
		case ruleAction112:
			p.CounterAdd(1)
		case ruleAction113:
			p.AddInvoke(p.CounterPop())
		case ruleAction114:
			p.CounterAdd(1)
		case ruleAction115:
			p.WriteCode(TypeLoadName, string(text))
		case ruleAction116:
			p.PushIntNumber("1")
		case ruleAction117:
			p.PushIntNumber("0")
		case ruleAction118:
			p.PushUndefined()
		case ruleAction119:
			p.PushThis()
		case ruleAction120:
			p.WriteCode(TypeLoadNameRaw, string(text))
		case ruleAction121:
			p.WriteCode(TypeLoadNameWithDetail, string(text))
		case ruleAction122:
			p.PushArray(0)
		case ruleAction123:
			p.AddOp(TypePushRange)
		case ruleAction124:
			p.CounterPush()
			p.CounterAdd(1)
		case ruleAction125:
			p.CounterAdd(1)
		case ruleAction126:
			p.PushArray(p.CounterPop())
		case ruleAction127:
			p.PushDict(0)
		case ruleAction128:
			p.CounterPush()
		case ruleAction129:
			p.PushDict(p.CounterPop())
		case ruleAction130:
			p.CodePush()
		case ruleAction131:
			num := p.CounterPop()
			arr := []string{}
			for i := int64(0); i < num; i++ {
				arr = append(arr, p.NamePop())
			}
			p.AddStoreFunction("", arr, string(text))
		case ruleAction132:
			p.PushIntNumber(string(text))
		case ruleAction133:
			p.PushFloatNumber(string(text))
		case ruleAction134:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction135:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction136:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction137:
			p.PushStr(string(text))
			p.CounterAdd(1)
		case ruleAction138:
			p.PushStr("")
		case ruleAction139:
			p.PushStr("")
		case ruleAction140:
			p.PushStr("")
		case ruleAction141:
			p.PushStr("")
		case ruleAction142:
			p.CounterPush()
		case ruleAction143:
			p.CounterAdd(1)
		case ruleAction144:
			p.CounterAdd(1)
		case ruleAction145:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction146:
			p.CounterPush()
		case ruleAction147:
			p.CounterAdd(1)
		case ruleAction148:
			p.CounterAdd(1)
		case ruleAction149:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction150:
			p.CounterPush()
		case ruleAction151:
			p.CounterPop()
		case ruleAction152:
			p.CounterPush()
		case ruleAction153:
			p.CounterPop()

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 dicescript <- <(sp stmtRoot Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				if !_rules[rulestmtRoot]() {
					goto l0
				}
				{
					add(ruleAction0, position)
				}
				add(ruledicescript, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 stmtRoot <- <(stmtLines sp)> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				if !_rules[rulestmtLines]() {
					goto l3
				}
				if !_rules[rulesp]() {
					goto l3
				}
				add(rulestmtRoot, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 stmtLines <- <((stmtWithBlock stmtLines?) / (flagsSwitch stmtLines?) / (comment stmtLines?) / (stmtWithSemicolon nextLine?) / ((';' sp)+ stmtLines?))> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				{
					position7, tokenIndex7 := position, tokenIndex
					{
						position9 := position
						{
							switch buffer[position] {
							case 'r':
								{
									position11 := position
									{
										position12, tokenIndex12 := position, tokenIndex
										if buffer[position] != rune('r') {
											goto l13
										}
										position++
										if buffer[position] != rune('e') {
											goto l13
										}
										position++
										if buffer[position] != rune('t') {
											goto l13
										}
										position++
										if buffer[position] != rune('u') {
											goto l13
										}
										position++
										if buffer[position] != rune('r') {
											goto l13
										}
										position++
										if buffer[position] != rune('n') {
											goto l13
										}
										position++
										if !_rules[rulesp1]() {
											goto l13
										}
										if !_rules[ruleexprRoot]() {
											goto l13
										}
										{
											add(ruleAction3, position)
										}
										goto l12
									l13:
										position, tokenIndex = position12, tokenIndex12
										if buffer[position] != rune('r') {
											goto l8
										}
										position++
										if buffer[position] != rune('e') {
											goto l8
										}
										position++
										if buffer[position] != rune('t') {
											goto l8
										}
										position++
										if buffer[position] != rune('u') {
											goto l8
										}
										position++
										if buffer[position] != rune('r') {
											goto l8
										}
										position++
										if buffer[position] != rune('n') {
											goto l8
										}
										position++
										if !_rules[rulesp]() {
											goto l8
										}
										{
											add(ruleAction4, position)
										}
									}
								l12:
									add(rulestmtReturn, position11)
								}
							case 'w':
								{
									position16 := position
									if buffer[position] != rune('w') {
										goto l8
									}
									position++
									if buffer[position] != rune('h') {
										goto l8
									}
									position++
									if buffer[position] != rune('i') {
										goto l8
									}
									position++
									if buffer[position] != rune('l') {
										goto l8
									}
									position++
									if buffer[position] != rune('e') {
										goto l8
									}
									position++
									{
										add(ruleAction5, position)
									}
									if !_rules[rulesp1]() {
										goto l8
									}
									if !_rules[ruleexprRoot]() {
										goto l8
									}
									{
										add(ruleAction6, position)
									}
									if !_rules[ruleblock]() {
										goto l8
									}
									{
										add(ruleAction7, position)
									}
									add(rulestmtWhile, position16)
								}
							case 'f':
								{
									position20 := position
									if buffer[position] != rune('f') {
										goto l8
									}
									position++
									if buffer[position] != rune('u') {
										goto l8
									}
									position++
									if buffer[position] != rune('n') {
										goto l8
									}
									position++
									if buffer[position] != rune('c') {
										goto l8
									}
									position++
									if !_rules[rulesp1]() {
										goto l8
									}
									if !_rules[ruleidentifier]() {
										goto l8
									}
									if !_rules[rulesp]() {
										goto l8
									}
									{
										add(ruleAction16, position)
									}
									if !_rules[rulefunc_def_params]() {
										goto l8
									}
									if buffer[position] != rune('{') {
										goto l8
									}
									position++
									if !_rules[rulesp]() {
										goto l8
									}
									{
										add(ruleAction17, position)
									}
									{
										position23 := position
										{
											position24, tokenIndex24 := position, tokenIndex
											if !_rules[rulestmtRoot]() {
												goto l24
											}
											goto l25
										l24:
											position, tokenIndex = position24, tokenIndex24
										}
									l25:
										add(rulePegText, position23)
									}
									if buffer[position] != rune('}') {
										goto l8
									}
									position++
									if !_rules[rulesp]() {
										goto l8
									}
									{
										add(ruleAction18, position)
									}
									add(rulestmtFunc, position20)
								}
							default:
								if !_rules[rulestmtIf]() {
									goto l8
								}
							}
						}

						add(rulestmtWithBlock, position9)
					}
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l27
						}
						goto l28
					l27:
						position, tokenIndex = position27, tokenIndex27
					}
				l28:
					goto l7
				l8:
					position, tokenIndex = position7, tokenIndex7
					{
						position30 := position
						{
							position31, tokenIndex31 := position, tokenIndex
							if buffer[position] != rune('/') {
								goto l32
							}
							position++
							if buffer[position] != rune('/') {
								goto l32
							}
							position++
							{
								position33, tokenIndex33 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l33
								}
								goto l34
							l33:
								position, tokenIndex = position33, tokenIndex33
							}
						l34:
							if !_rules[rule_switchEnablePrefix]() {
								goto l32
							}
							if buffer[position] != rune('W') {
								goto l32
							}
							position++
							if buffer[position] != rune('o') {
								goto l32
							}
							position++
							if buffer[position] != rune('D') {
								goto l32
							}
							position++
							if !_rules[rulesp1]() {
								goto l32
							}
							{
								position35, tokenIndex35 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l36
								}
								if !_rules[rulesp1]() {
									goto l36
								}
								p.Flags.EnableDiceWoD = true
								goto l35
							l36:
								position, tokenIndex = position35, tokenIndex35
								if !_rules[rule_switchFalse]() {
									goto l32
								}
								if !_rules[rulesp1]() {
									goto l32
								}
								p.Flags.EnableDiceWoD = false
							}
						l35:
						l37:
							{
								position38, tokenIndex38 := position, tokenIndex
								{
									position39, tokenIndex39 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l39
									}
									position++
									goto l38
								l39:
									position, tokenIndex = position39, tokenIndex39
								}
								if !matchDot() {
									goto l38
								}
								goto l37
							l38:
								position, tokenIndex = position38, tokenIndex38
							}
							goto l31
						l32:
							position, tokenIndex = position31, tokenIndex31
							if buffer[position] != rune('/') {
								goto l40
							}
							position++
							if buffer[position] != rune('/') {
								goto l40
							}
							position++
							{
								position41, tokenIndex41 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l41
								}
								goto l42
							l41:
								position, tokenIndex = position41, tokenIndex41
							}
						l42:
							if !_rules[rule_switchEnablePrefix]() {
								goto l40
							}
							if buffer[position] != rune('C') {
								goto l40
							}
							position++
							if buffer[position] != rune('o') {
								goto l40
							}
							position++
							if buffer[position] != rune('C') {
								goto l40
							}
							position++
							if !_rules[rulesp1]() {
								goto l40
							}
							{
								position43, tokenIndex43 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l44
								}
								if !_rules[rulesp1]() {
									goto l44
								}
								p.Flags.EnableDiceCoC = true
								goto l43
							l44:
								position, tokenIndex = position43, tokenIndex43
								if !_rules[rule_switchFalse]() {
									goto l40
								}
								if !_rules[rulesp1]() {
									goto l40
								}
								p.Flags.EnableDiceCoC = false
							}
						l43:
						l45:
							{
								position46, tokenIndex46 := position, tokenIndex
								{
									position47, tokenIndex47 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l47
									}
									position++
									goto l46
								l47:
									position, tokenIndex = position47, tokenIndex47
								}
								if !matchDot() {
									goto l46
								}
								goto l45
							l46:
								position, tokenIndex = position46, tokenIndex46
							}
							goto l31
						l40:
							position, tokenIndex = position31, tokenIndex31
							if buffer[position] != rune('/') {
								goto l48
							}
							position++
							if buffer[position] != rune('/') {
								goto l48
							}
							position++
							{
								position49, tokenIndex49 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l49
								}
								goto l50
							l49:
								position, tokenIndex = position49, tokenIndex49
							}
						l50:
							if !_rules[rule_switchEnablePrefix]() {
								goto l48
							}
							if buffer[position] != rune('F') {
								goto l48
							}
							position++
							if buffer[position] != rune('a') {
								goto l48
							}
							position++
							if buffer[position] != rune('t') {
								goto l48
							}
							position++
							if buffer[position] != rune('e') {
								goto l48
							}
							position++
							if !_rules[rulesp1]() {
								goto l48
							}
							{
								position51, tokenIndex51 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l52
								}
								if !_rules[rulesp1]() {
									goto l52
								}
								p.Flags.EnableDiceFate = true
								goto l51
							l52:
								position, tokenIndex = position51, tokenIndex51
								if !_rules[rule_switchFalse]() {
									goto l48
								}
								if !_rules[rulesp1]() {
									goto l48
								}
								p.Flags.EnableDiceFate = false
							}
						l51:
						l53:
							{
								position54, tokenIndex54 := position, tokenIndex
								{
									position55, tokenIndex55 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l55
									}
									position++
									goto l54
								l55:
									position, tokenIndex = position55, tokenIndex55
								}
								if !matchDot() {
									goto l54
								}
								goto l53
							l54:
								position, tokenIndex = position54, tokenIndex54
							}
							goto l31
						l48:
							position, tokenIndex = position31, tokenIndex31
							if buffer[position] != rune('/') {
								goto l29
							}
							position++
							if buffer[position] != rune('/') {
								goto l29
							}
							position++
							{
								position56, tokenIndex56 := position, tokenIndex
								if !_rules[rulesp]() {
									goto l56
								}
								goto l57
							l56:
								position, tokenIndex = position56, tokenIndex56
							}
						l57:
							if !_rules[rule_switchEnablePrefix]() {
								goto l29
							}
							if buffer[position] != rune('D') {
								goto l29
							}
							position++
							if buffer[position] != rune('o') {
								goto l29
							}
							position++
							if buffer[position] != rune('u') {
								goto l29
							}
							position++
							if buffer[position] != rune('b') {
								goto l29
							}
							position++
							if buffer[position] != rune('l') {
								goto l29
							}
							position++
							if buffer[position] != rune('e') {
								goto l29
							}
							position++
							if buffer[position] != rune('C') {
								goto l29
							}
							position++
							if buffer[position] != rune('r') {
								goto l29
							}
							position++
							if buffer[position] != rune('o') {
								goto l29
							}
							position++
							if buffer[position] != rune('s') {
								goto l29
							}
							position++
							if buffer[position] != rune('s') {
								goto l29
							}
							position++
							if !_rules[rulesp1]() {
								goto l29
							}
							{
								position58, tokenIndex58 := position, tokenIndex
								if !_rules[rule_switchTrue]() {
									goto l59
								}
								if !_rules[rulesp1]() {
									goto l59
								}
								p.Flags.EnableDiceDoubleCross = true
								goto l58
							l59:
								position, tokenIndex = position58, tokenIndex58
								if !_rules[rule_switchFalse]() {
									goto l29
								}
								if !_rules[rulesp1]() {
									goto l29
								}
								p.Flags.EnableDiceDoubleCross = false
							}
						l58:
						l60:
							{
								position61, tokenIndex61 := position, tokenIndex
								{
									position62, tokenIndex62 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l62
									}
									position++
									goto l61
								l62:
									position, tokenIndex = position62, tokenIndex62
								}
								if !matchDot() {
									goto l61
								}
								goto l60
							l61:
								position, tokenIndex = position61, tokenIndex61
							}
						}
					l31:
						add(ruleflagsSwitch, position30)
					}
					{
						position63, tokenIndex63 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l63
						}
						goto l64
					l63:
						position, tokenIndex = position63, tokenIndex63
					}
				l64:
					goto l7
				l29:
					position, tokenIndex = position7, tokenIndex7
					{
						position66 := position
						if !_rules[rulespNoCR]() {
							goto l65
						}
						if buffer[position] != rune('/') {
							goto l65
						}
						position++
						if buffer[position] != rune('/') {
							goto l65
						}
						position++
					l67:
						{
							position68, tokenIndex68 := position, tokenIndex
							{
								position69, tokenIndex69 := position, tokenIndex
								if buffer[position] != rune('\n') {
									goto l69
								}
								position++
								goto l68
							l69:
								position, tokenIndex = position69, tokenIndex69
							}
							if !matchDot() {
								goto l68
							}
							goto l67
						l68:
							position, tokenIndex = position68, tokenIndex68
						}
						{
							position70, tokenIndex70 := position, tokenIndex
							if buffer[position] != rune('\n') {
								goto l71
							}
							position++
							goto l70
						l71:
							position, tokenIndex = position70, tokenIndex70
							{
								position72, tokenIndex72 := position, tokenIndex
								if !matchDot() {
									goto l72
								}
								goto l65
							l72:
								position, tokenIndex = position72, tokenIndex72
							}
						}
					l70:
						add(rulecomment, position66)
					}
					{
						position73, tokenIndex73 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l73
						}
						goto l74
					l73:
						position, tokenIndex = position73, tokenIndex73
					}
				l74:
					goto l7
				l65:
					position, tokenIndex = position7, tokenIndex7
					{
						position76 := position
						{
							position77, tokenIndex77 := position, tokenIndex
							{
								position79 := position
								{
									position80, tokenIndex80 := position, tokenIndex
									if !_rules[ruleidentifier]() {
										goto l81
									}
									if !_rules[rulesp]() {
										goto l81
									}
									{
										add(ruleAction19, position)
									}
									if buffer[position] != rune('=') {
										goto l81
									}
									position++
									if !_rules[rulesp]() {
										goto l81
									}
									if !_rules[ruleexprRoot]() {
										goto l81
									}
									{
										add(ruleAction20, position)
									}
									goto l80
								l81:
									position, tokenIndex = position80, tokenIndex80
									if buffer[position] != rune('&') {
										goto l84
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l84
									}
									if !_rules[rulesp]() {
										goto l84
									}
									{
										add(ruleAction21, position)
									}
									if buffer[position] != rune('=') {
										goto l84
									}
									position++
									if !_rules[rulesp]() {
										goto l84
									}
									{
										add(ruleAction22, position)
									}
									{
										position87 := position
										if !_rules[ruleexprRoot]() {
											goto l84
										}
										add(rulePegText, position87)
									}
									{
										add(ruleAction23, position)
									}
									goto l80
								l84:
									position, tokenIndex = position80, tokenIndex80
									if buffer[position] != rune('&') {
										goto l89
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l89
									}
									if !_rules[rulesp]() {
										goto l89
									}
									{
										add(ruleAction24, position)
									}
									if buffer[position] != rune('.') {
										goto l89
									}
									position++
									if !_rules[ruleidentifier]() {
										goto l89
									}
									if !_rules[rulesp]() {
										goto l89
									}
									{
										add(ruleAction25, position)
									}
									if !_rules[rulesp]() {
										goto l89
									}
									if buffer[position] != rune('=') {
										goto l89
									}
									position++
									if !_rules[rulesp]() {
										goto l89
									}
									if !_rules[ruleexprRoot]() {
										goto l89
									}
									{
										add(ruleAction26, position)
									}
									goto l80
								l89:
									position, tokenIndex = position80, tokenIndex80
									if buffer[position] != rune('t') {
										goto l93
									}
									position++
									if buffer[position] != rune('h') {
										goto l93
									}
									position++
									if buffer[position] != rune('i') {
										goto l93
									}
									position++
									if buffer[position] != rune('s') {
										goto l93
									}
									position++
									if !_rules[rulesp]() {
										goto l93
									}
									if buffer[position] != rune('.') {
										goto l93
									}
									position++
									if !_rules[rulesp]() {
										goto l93
									}
									if !_rules[ruleidentifier]() {
										goto l93
									}
									if !_rules[rulesp]() {
										goto l93
									}
									{
										add(ruleAction27, position)
									}
									if buffer[position] != rune('=') {
										goto l93
									}
									position++
									if !_rules[rulesp]() {
										goto l93
									}
									if !_rules[ruleexprRoot]() {
										goto l93
									}
									{
										add(ruleAction28, position)
									}
									goto l80
								l93:
									position, tokenIndex = position80, tokenIndex80
									if !_rules[ruleidentifier]() {
										goto l96
									}
									if !_rules[rulesp]() {
										goto l96
									}
									{
										add(ruleAction29, position)
									}
									if buffer[position] != rune('.') {
										goto l96
									}
									position++
									if !_rules[rulesp]() {
										goto l96
									}
									if !_rules[ruleidentifier]() {
										goto l96
									}
									if !_rules[rulesp]() {
										goto l96
									}
									{
										add(ruleAction30, position)
									}
									if buffer[position] != rune('=') {
										goto l96
									}
									position++
									if !_rules[rulesp]() {
										goto l96
									}
									if !_rules[ruleexprRoot]() {
										goto l96
									}
									{
										add(ruleAction31, position)
									}
									goto l80
								l96:
									position, tokenIndex = position80, tokenIndex80
									if !_rules[ruleexprRoot]() {
										goto l100
									}
									if buffer[position] != rune('[') {
										goto l100
									}
									position++
									if !_rules[rulesp]() {
										goto l100
									}
									if !_rules[ruleexprRoot]() {
										goto l100
									}
									if buffer[position] != rune(']') {
										goto l100
									}
									position++
									if !_rules[rulesp]() {
										goto l100
									}
									if buffer[position] != rune('=') {
										goto l100
									}
									position++
									if !_rules[rulesp]() {
										goto l100
									}
									if !_rules[ruleexprRoot]() {
										goto l100
									}
									{
										add(ruleAction32, position)
									}
									goto l80
								l100:
									position, tokenIndex = position80, tokenIndex80
									if !_rules[ruleexprRoot]() {
										goto l78
									}
									if !_rules[rule_sliceSuffix]() {
										goto l78
									}
									if buffer[position] != rune('=') {
										goto l78
									}
									position++
									if !_rules[rulesp]() {
										goto l78
									}
									if !_rules[ruleexprRoot]() {
										goto l78
									}
									{
										add(ruleAction33, position)
									}
								}
							l80:
								add(rulestmtAssign, position79)
							}
							goto l77
						l78:
							position, tokenIndex = position77, tokenIndex77
							{
								position104 := position
								if buffer[position] != rune('b') {
									goto l103
								}
								position++
								if buffer[position] != rune('r') {
									goto l103
								}
								position++
								if buffer[position] != rune('e') {
									goto l103
								}
								position++
								if buffer[position] != rune('a') {
									goto l103
								}
								position++
								if buffer[position] != rune('k') {
									goto l103
								}
								position++
								if !_rules[rulesp]() {
									goto l103
								}
								{
									add(ruleAction1, position)
								}
								add(rulestmtBreak, position104)
							}
							goto l77
						l103:
							position, tokenIndex = position77, tokenIndex77
							{
								position107 := position
								if buffer[position] != rune('c') {
									goto l106
								}
								position++
								if buffer[position] != rune('o') {
									goto l106
								}
								position++
								if buffer[position] != rune('n') {
									goto l106
								}
								position++
								if buffer[position] != rune('t') {
									goto l106
								}
								position++
								if buffer[position] != rune('i') {
									goto l106
								}
								position++
								if buffer[position] != rune('n') {
									goto l106
								}
								position++
								if buffer[position] != rune('u') {
									goto l106
								}
								position++
								if buffer[position] != rune('e') {
									goto l106
								}
								position++
								if !_rules[rulesp]() {
									goto l106
								}
								{
									add(ruleAction2, position)
								}
								add(rulestmtContinue, position107)
							}
							goto l77
						l106:
							position, tokenIndex = position77, tokenIndex77
							if !_rules[ruleexprRoot]() {
								goto l75
							}
						}
					l77:
						add(rulestmtWithSemicolon, position76)
					}
					{
						position109, tokenIndex109 := position, tokenIndex
						{
							position111 := position
							{
								position114, tokenIndex114 := position, tokenIndex
								if !_rules[rulespNoCR]() {
									goto l115
								}
								if buffer[position] != rune('\n') {
									goto l115
								}
								position++
								goto l114
							l115:
								position, tokenIndex = position114, tokenIndex114
								if !_rules[rulesp]() {
									goto l109
								}
								if buffer[position] != rune(';') {
									goto l109
								}
								position++
							}
						l114:
							if !_rules[rulesp]() {
								goto l109
							}
						l112:
							{
								position113, tokenIndex113 := position, tokenIndex
								{
									position116, tokenIndex116 := position, tokenIndex
									if !_rules[rulespNoCR]() {
										goto l117
									}
									if buffer[position] != rune('\n') {
										goto l117
									}
									position++
									goto l116
								l117:
									position, tokenIndex = position116, tokenIndex116
									if !_rules[rulesp]() {
										goto l113
									}
									if buffer[position] != rune(';') {
										goto l113
									}
									position++
								}
							l116:
								if !_rules[rulesp]() {
									goto l113
								}
								goto l112
							l113:
								position, tokenIndex = position113, tokenIndex113
							}
							{
								position118, tokenIndex118 := position, tokenIndex
								if !_rules[rulestmtLines]() {
									goto l118
								}
								goto l119
							l118:
								position, tokenIndex = position118, tokenIndex118
							}
						l119:
							add(rulenextLine, position111)
						}
						goto l110
					l109:
						position, tokenIndex = position109, tokenIndex109
					}
				l110:
					goto l7
				l75:
					position, tokenIndex = position7, tokenIndex7
					if buffer[position] != rune(';') {
						goto l5
					}
					position++
					if !_rules[rulesp]() {
						goto l5
					}
				l120:
					{
						position121, tokenIndex121 := position, tokenIndex
						if buffer[position] != rune(';') {
							goto l121
						}
						position++
						if !_rules[rulesp]() {
							goto l121
						}
						goto l120
					l121:
						position, tokenIndex = position121, tokenIndex121
					}
					{
						position122, tokenIndex122 := position, tokenIndex
						if !_rules[rulestmtLines]() {
							goto l122
						}
						goto l123
					l122:
						position, tokenIndex = position122, tokenIndex122
					}
				l123:
				}
			l7:
				add(rulestmtLines, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 3 nextLine <- <((((spNoCR '\n') / (sp ';')) sp)+ stmtLines?)> */
		nil,
		/* 4 _switchEnablePrefix <- <('#' 'E' 'n' 'a' 'b' 'l' 'e' 'D' 'i' 'c' 'e')> */
		func() bool {
			position125, tokenIndex125 := position, tokenIndex
			{
				position126 := position
				if buffer[position] != rune('#') {
					goto l125
				}
				position++
				if buffer[position] != rune('E') {
					goto l125
				}
				position++
				if buffer[position] != rune('n') {
					goto l125
				}
				position++
				if buffer[position] != rune('a') {
					goto l125
				}
				position++
				if buffer[position] != rune('b') {
					goto l125
				}
				position++
				if buffer[position] != rune('l') {
					goto l125
				}
				position++
				if buffer[position] != rune('e') {
					goto l125
				}
				position++
				if buffer[position] != rune('D') {
					goto l125
				}
				position++
				if buffer[position] != rune('i') {
					goto l125
				}
				position++
				if buffer[position] != rune('c') {
					goto l125
				}
				position++
				if buffer[position] != rune('e') {
					goto l125
				}
				position++
				add(rule_switchEnablePrefix, position126)
			}
			return true
		l125:
			position, tokenIndex = position125, tokenIndex125
			return false
		},
		/* 5 _switchTrue <- <('t' 'r' 'u' 'e')> */
		func() bool {
			position127, tokenIndex127 := position, tokenIndex
			{
				position128 := position
				if buffer[position] != rune('t') {
					goto l127
				}
				position++
				if buffer[position] != rune('r') {
					goto l127
				}
				position++
				if buffer[position] != rune('u') {
					goto l127
				}
				position++
				if buffer[position] != rune('e') {
					goto l127
				}
				position++
				add(rule_switchTrue, position128)
			}
			return true
		l127:
			position, tokenIndex = position127, tokenIndex127
			return false
		},
		/* 6 _switchFalse <- <('f' 'a' 'l' 's' 'e')> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				if buffer[position] != rune('f') {
					goto l129
				}
				position++
				if buffer[position] != rune('a') {
					goto l129
				}
				position++
				if buffer[position] != rune('l') {
					goto l129
				}
				position++
				if buffer[position] != rune('s') {
					goto l129
				}
				position++
				if buffer[position] != rune('e') {
					goto l129
				}
				position++
				add(rule_switchFalse, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 7 flagsSwitch <- <(('/' '/' sp? _switchEnablePrefix ('W' 'o' 'D') sp1 ((_switchTrue sp1 !{p.Flags.EnableDiceWoD = true}) / (_switchFalse sp1 !{p.Flags.EnableDiceWoD = false})) (!'\n' .)*) / ('/' '/' sp? _switchEnablePrefix ('C' 'o' 'C') sp1 ((_switchTrue sp1 !{p.Flags.EnableDiceCoC = true}) / (_switchFalse sp1 !{p.Flags.EnableDiceCoC = false})) (!'\n' .)*) / ('/' '/' sp? _switchEnablePrefix ('F' 'a' 't' 'e') sp1 ((_switchTrue sp1 !{p.Flags.EnableDiceFate = true}) / (_switchFalse sp1 !{p.Flags.EnableDiceFate = false})) (!'\n' .)*) / ('/' '/' sp? _switchEnablePrefix ('D' 'o' 'u' 'b' 'l' 'e' 'C' 'r' 'o' 's' 's') sp1 ((_switchTrue sp1 !{p.Flags.EnableDiceDoubleCross = true}) / (_switchFalse sp1 !{p.Flags.EnableDiceDoubleCross = false})) (!'\n' .)*))> */
		nil,
		/* 8 stmtWithSemicolon <- <(stmtAssign / stmtBreak / stmtContinue / exprRoot)> */
		nil,
		/* 9 stmtWithBlock <- <((&('r') stmtReturn) | (&('w') stmtWhile) | (&('f') stmtFunc) | (&('i') stmtIf))> */
		nil,
		/* 10 stmtBreak <- <('b' 'r' 'e' 'a' 'k' sp Action1)> */
		nil,
		/* 11 stmtContinue <- <('c' 'o' 'n' 't' 'i' 'n' 'u' 'e' sp Action2)> */
		nil,
		/* 12 stmtReturn <- <(('r' 'e' 't' 'u' 'r' 'n' sp1 exprRoot Action3) / ('r' 'e' 't' 'u' 'r' 'n' sp Action4))> */
		nil,
		/* 13 stmtWhile <- <('w' 'h' 'i' 'l' 'e' Action5 sp1 exprRoot Action6 block Action7)> */
		nil,
		/* 14 block <- <((('{' sp '}') / ('{' sp stmtRoot '}')) sp)> */
		func() bool {
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
				{
					position140, tokenIndex140 := position, tokenIndex
					if buffer[position] != rune('{') {
						goto l141
					}
					position++
					if !_rules[rulesp]() {
						goto l141
					}
					if buffer[position] != rune('}') {
						goto l141
					}
					position++
					goto l140
				l141:
					position, tokenIndex = position140, tokenIndex140
					if buffer[position] != rune('{') {
						goto l138
					}
					position++
					if !_rules[rulesp]() {
						goto l138
					}
					if !_rules[rulestmtRoot]() {
						goto l138
					}
					if buffer[position] != rune('}') {
						goto l138
					}
					position++
				}
			l140:
				if !_rules[rulesp]() {
					goto l138
				}
				add(ruleblock, position139)
			}
			return true
		l138:
			position, tokenIndex = position138, tokenIndex138
			return false
		},
		/* 15 stmtElse <- <('e' 'l' 's' 'e' ((sp block) / (sp1 stmtIf)))> */
		nil,
		/* 16 stmtIf <- <('i' 'f' sp1 exprRoot Action8 block Action9 stmtElse? Action10)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if buffer[position] != rune('i') {
					goto l143
				}
				position++
				if buffer[position] != rune('f') {
					goto l143
				}
				position++
				if !_rules[rulesp1]() {
					goto l143
				}
				if !_rules[ruleexprRoot]() {
					goto l143
				}
				{
					add(ruleAction8, position)
				}
				if !_rules[ruleblock]() {
					goto l143
				}
				{
					add(ruleAction9, position)
				}
				{
					position147, tokenIndex147 := position, tokenIndex
					{
						position149 := position
						if buffer[position] != rune('e') {
							goto l147
						}
						position++
						if buffer[position] != rune('l') {
							goto l147
						}
						position++
						if buffer[position] != rune('s') {
							goto l147
						}
						position++
						if buffer[position] != rune('e') {
							goto l147
						}
						position++
						{
							position150, tokenIndex150 := position, tokenIndex
							if !_rules[rulesp]() {
								goto l151
							}
							if !_rules[ruleblock]() {
								goto l151
							}
							goto l150
						l151:
							position, tokenIndex = position150, tokenIndex150
							if !_rules[rulesp1]() {
								goto l147
							}
							if !_rules[rulestmtIf]() {
								goto l147
							}
						}
					l150:
						add(rulestmtElse, position149)
					}
					goto l148
				l147:
					position, tokenIndex = position147, tokenIndex147
				}
			l148:
				{
					add(ruleAction10, position)
				}
				add(rulestmtIf, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 17 func_def_params <- <(('(' sp ')' sp Action11) / ('(' sp Action12 identifier sp Action13 (',' sp identifier sp Action14 Action15)* ')' sp))> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				{
					position155, tokenIndex155 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l156
					}
					position++
					if !_rules[rulesp]() {
						goto l156
					}
					if buffer[position] != rune(')') {
						goto l156
					}
					position++
					if !_rules[rulesp]() {
						goto l156
					}
					{
						add(ruleAction11, position)
					}
					goto l155
				l156:
					position, tokenIndex = position155, tokenIndex155
					if buffer[position] != rune('(') {
						goto l153
					}
					position++
					if !_rules[rulesp]() {
						goto l153
					}
					{
						add(ruleAction12, position)
					}
					if !_rules[ruleidentifier]() {
						goto l153
					}
					if !_rules[rulesp]() {
						goto l153
					}
					{
						add(ruleAction13, position)
					}
				l160:
					{
						position161, tokenIndex161 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l161
						}
						position++
						if !_rules[rulesp]() {
							goto l161
						}
						if !_rules[ruleidentifier]() {
							goto l161
						}
						if !_rules[rulesp]() {
							goto l161
						}
						{
							add(ruleAction14, position)
						}
						{
							add(ruleAction15, position)
						}
						goto l160
					l161:
						position, tokenIndex = position161, tokenIndex161
					}
					if buffer[position] != rune(')') {
						goto l153
					}
					position++
					if !_rules[rulesp]() {
						goto l153
					}
				}
			l155:
				add(rulefunc_def_params, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 18 stmtFunc <- <('f' 'u' 'n' 'c' sp1 identifier sp Action16 func_def_params '{' sp Action17 <stmtRoot?> '}' sp Action18)> */
		nil,
		/* 19 stmtAssign <- <((identifier sp Action19 '=' sp exprRoot Action20) / ('&' identifier sp Action21 '=' sp Action22 <exprRoot> Action23) / ('&' identifier sp Action24 '.' identifier sp Action25 sp '=' sp exprRoot Action26) / ('t' 'h' 'i' 's' sp '.' sp identifier sp Action27 '=' sp exprRoot Action28) / (identifier sp Action29 '.' sp identifier sp Action30 '=' sp exprRoot Action31) / (exprRoot '[' sp exprRoot ']' sp '=' sp exprRoot Action32) / (exprRoot _sliceSuffix '=' sp exprRoot Action33))> */
		nil,
		/* 20 exprRoot <- <(exprSlice sp)> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				{
					position168 := position
					{
						position169, tokenIndex169 := position, tokenIndex
						if !_rules[ruleexprTernary]() {
							goto l170
						}
						if !_rules[rule_sliceSuffix]() {
							goto l170
						}
						{
							position171, tokenIndex171 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l171
							}
							position++
							goto l170
						l171:
							position, tokenIndex = position171, tokenIndex171
						}
						{
							add(ruleAction38, position)
						}
						goto l169
					l170:
						position, tokenIndex = position169, tokenIndex169
						if !_rules[ruleexprTernary]() {
							goto l166
						}
					}
				l169:
					add(ruleexprSlice, position168)
				}
				if !_rules[rulesp]() {
					goto l166
				}
				add(ruleexprRoot, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 21 _step <- <((':' sp (exprRoot / (sp Action34))) / (sp Action35))> */
		nil,
		/* 22 _sliceSuffix <- <('[' sp (exprRoot / (sp Action36)) ':' sp (exprRoot / (sp Action37)) _step ']' sp)> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune('[') {
					goto l174
				}
				position++
				if !_rules[rulesp]() {
					goto l174
				}
				{
					position176, tokenIndex176 := position, tokenIndex
					if !_rules[ruleexprRoot]() {
						goto l177
					}
					goto l176
				l177:
					position, tokenIndex = position176, tokenIndex176
					if !_rules[rulesp]() {
						goto l174
					}
					{
						add(ruleAction36, position)
					}
				}
			l176:
				if buffer[position] != rune(':') {
					goto l174
				}
				position++
				if !_rules[rulesp]() {
					goto l174
				}
				{
					position179, tokenIndex179 := position, tokenIndex
					if !_rules[ruleexprRoot]() {
						goto l180
					}
					goto l179
				l180:
					position, tokenIndex = position179, tokenIndex179
					if !_rules[rulesp]() {
						goto l174
					}
					{
						add(ruleAction37, position)
					}
				}
			l179:
				{
					position182 := position
					{
						position183, tokenIndex183 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l184
						}
						position++
						if !_rules[rulesp]() {
							goto l184
						}
						{
							position185, tokenIndex185 := position, tokenIndex
							if !_rules[ruleexprRoot]() {
								goto l186
							}
							goto l185
						l186:
							position, tokenIndex = position185, tokenIndex185
							if !_rules[rulesp]() {
								goto l184
							}
							{
								add(ruleAction34, position)
							}
						}
					l185:
						goto l183
					l184:
						position, tokenIndex = position183, tokenIndex183
						if !_rules[rulesp]() {
							goto l174
						}
						{
							add(ruleAction35, position)
						}
					}
				l183:
					add(rule_step, position182)
				}
				if buffer[position] != rune(']') {
					goto l174
				}
				position++
				if !_rules[rulesp]() {
					goto l174
				}
				add(rule_sliceSuffix, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 23 exprSlice <- <((exprTernary _sliceSuffix !'=' Action38) / exprTernary)> */
		nil,
		/* 24 exprValueIfExists <- <(exprLogicOr sp '?' sp Action39 exprLogicOr sp Action40)> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				if !_rules[ruleexprLogicOr]() {
					goto l190
				}
				if !_rules[rulesp]() {
					goto l190
				}
				if buffer[position] != rune('?') {
					goto l190
				}
				position++
				if !_rules[rulesp]() {
					goto l190
				}
				{
					add(ruleAction39, position)
				}
				if !_rules[ruleexprLogicOr]() {
					goto l190
				}
				if !_rules[rulesp]() {
					goto l190
				}
				{
					add(ruleAction40, position)
				}
				add(ruleexprValueIfExists, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 25 exprTernary <- <((exprLogicOr sp '?' sp Action41 exprLogicOr sp ':' sp Action42 exprLogicOr sp Action43) / (exprValueIfExists Action44 (',' sp exprValueIfExists Action45)* Action46) / exprLogicOr)> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				{
					position196, tokenIndex196 := position, tokenIndex
					if !_rules[ruleexprLogicOr]() {
						goto l197
					}
					if !_rules[rulesp]() {
						goto l197
					}
					if buffer[position] != rune('?') {
						goto l197
					}
					position++
					if !_rules[rulesp]() {
						goto l197
					}
					{
						add(ruleAction41, position)
					}
					if !_rules[ruleexprLogicOr]() {
						goto l197
					}
					if !_rules[rulesp]() {
						goto l197
					}
					if buffer[position] != rune(':') {
						goto l197
					}
					position++
					if !_rules[rulesp]() {
						goto l197
					}
					{
						add(ruleAction42, position)
					}
					if !_rules[ruleexprLogicOr]() {
						goto l197
					}
					if !_rules[rulesp]() {
						goto l197
					}
					{
						add(ruleAction43, position)
					}
					goto l196
				l197:
					position, tokenIndex = position196, tokenIndex196
					if !_rules[ruleexprValueIfExists]() {
						goto l201
					}
					{
						add(ruleAction44, position)
					}
				l203:
					{
						position204, tokenIndex204 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l204
						}
						position++
						if !_rules[rulesp]() {
							goto l204
						}
						if !_rules[ruleexprValueIfExists]() {
							goto l204
						}
						{
							add(ruleAction45, position)
						}
						goto l203
					l204:
						position, tokenIndex = position204, tokenIndex204
					}
					{
						add(ruleAction46, position)
					}
					goto l196
				l201:
					position, tokenIndex = position196, tokenIndex196
					if !_rules[ruleexprLogicOr]() {
						goto l194
					}
				}
			l196:
				add(ruleexprTernary, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 26 exprLogicOr <- <(exprLogicAnd sp (logicOr Action47 exprLogicAnd Action48 Action49)*)> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				if !_rules[ruleexprLogicAnd]() {
					goto l207
				}
				if !_rules[rulesp]() {
					goto l207
				}
			l209:
				{
					position210, tokenIndex210 := position, tokenIndex
					{
						position211 := position
						if buffer[position] != rune('|') {
							goto l210
						}
						position++
						if buffer[position] != rune('|') {
							goto l210
						}
						position++
						if !_rules[rulesp]() {
							goto l210
						}
						add(rulelogicOr, position211)
					}
					{
						add(ruleAction47, position)
					}
					if !_rules[ruleexprLogicAnd]() {
						goto l210
					}
					{
						add(ruleAction48, position)
					}
					{
						add(ruleAction49, position)
					}
					goto l209
				l210:
					position, tokenIndex = position210, tokenIndex210
				}
				add(ruleexprLogicOr, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 27 exprLogicAnd <- <(exprBitwiseOr sp (logicAnd exprBitwiseOr Action50)*)> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				if !_rules[ruleexprBitwiseOr]() {
					goto l215
				}
				if !_rules[rulesp]() {
					goto l215
				}
			l217:
				{
					position218, tokenIndex218 := position, tokenIndex
					{
						position219 := position
						if buffer[position] != rune('&') {
							goto l218
						}
						position++
						if buffer[position] != rune('&') {
							goto l218
						}
						position++
						if !_rules[rulesp]() {
							goto l218
						}
						add(rulelogicAnd, position219)
					}
					if !_rules[ruleexprBitwiseOr]() {
						goto l218
					}
					{
						add(ruleAction50, position)
					}
					goto l217
				l218:
					position, tokenIndex = position218, tokenIndex218
				}
				add(ruleexprLogicAnd, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 28 exprBitwiseOr <- <(exprBitwiseAnd sp (bitwiseOr exprBitwiseAnd Action51)*)> */
		func() bool {
			position221, tokenIndex221 := position, tokenIndex
			{
				position222 := position
				if !_rules[ruleexprBitwiseAnd]() {
					goto l221
				}
				if !_rules[rulesp]() {
					goto l221
				}
			l223:
				{
					position224, tokenIndex224 := position, tokenIndex
					{
						position225 := position
						if buffer[position] != rune('|') {
							goto l224
						}
						position++
						if !_rules[rulesp]() {
							goto l224
						}
						add(rulebitwiseOr, position225)
					}
					if !_rules[ruleexprBitwiseAnd]() {
						goto l224
					}
					{
						add(ruleAction51, position)
					}
					goto l223
				l224:
					position, tokenIndex = position224, tokenIndex224
				}
				add(ruleexprBitwiseOr, position222)
			}
			return true
		l221:
			position, tokenIndex = position221, tokenIndex221
			return false
		},
		/* 29 exprBitwiseAnd <- <(exprCompare sp (bitwiseAnd exprCompare Action52)*)> */
		func() bool {
			position227, tokenIndex227 := position, tokenIndex
			{
				position228 := position
				if !_rules[ruleexprCompare]() {
					goto l227
				}
				if !_rules[rulesp]() {
					goto l227
				}
			l229:
				{
					position230, tokenIndex230 := position, tokenIndex
					{
						position231 := position
						if buffer[position] != rune('&') {
							goto l230
						}
						position++
						if !_rules[rulesp]() {
							goto l230
						}
						add(rulebitwiseAnd, position231)
					}
					if !_rules[ruleexprCompare]() {
						goto l230
					}
					{
						add(ruleAction52, position)
					}
					goto l229
				l230:
					position, tokenIndex = position230, tokenIndex230
				}
				add(ruleexprBitwiseAnd, position228)
			}
			return true
		l227:
			position, tokenIndex = position227, tokenIndex227
			return false
		},
		/* 30 exprCompare <- <(exprAdditive sp ((lt exprAdditive Action53) / (ge exprAdditive Action57) / ((&('>') (gt exprAdditive Action58)) | (&('!') (ne exprAdditive Action56)) | (&('=') (eq exprAdditive Action55)) | (&('<') (le exprAdditive Action54))))*)> */
		func() bool {
			position233, tokenIndex233 := position, tokenIndex
			{
				position234 := position
				if !_rules[ruleexprAdditive]() {
					goto l233
				}
				if !_rules[rulesp]() {
					goto l233
				}
			l235:
				{
					position236, tokenIndex236 := position, tokenIndex
					{
						position237, tokenIndex237 := position, tokenIndex
						{
							position239 := position
							if buffer[position] != rune('<') {
								goto l238
							}
							position++
							if !_rules[rulesp]() {
								goto l238
							}
							add(rulelt, position239)
						}
						if !_rules[ruleexprAdditive]() {
							goto l238
						}
						{
							add(ruleAction53, position)
						}
						goto l237
					l238:
						position, tokenIndex = position237, tokenIndex237
						{
							position242 := position
							if buffer[position] != rune('>') {
								goto l241
							}
							position++
							if buffer[position] != rune('=') {
								goto l241
							}
							position++
							if !_rules[rulesp]() {
								goto l241
							}
							add(rulege, position242)
						}
						if !_rules[ruleexprAdditive]() {
							goto l241
						}
						{
							add(ruleAction57, position)
						}
						goto l237
					l241:
						position, tokenIndex = position237, tokenIndex237
						{
							switch buffer[position] {
							case '>':
								{
									position245 := position
									if buffer[position] != rune('>') {
										goto l236
									}
									position++
									if !_rules[rulesp]() {
										goto l236
									}
									add(rulegt, position245)
								}
								if !_rules[ruleexprAdditive]() {
									goto l236
								}
								{
									add(ruleAction58, position)
								}
							case '!':
								{
									position247 := position
									if buffer[position] != rune('!') {
										goto l236
									}
									position++
									if buffer[position] != rune('=') {
										goto l236
									}
									position++
									if !_rules[rulesp]() {
										goto l236
									}
									add(rulene, position247)
								}
								if !_rules[ruleexprAdditive]() {
									goto l236
								}
								{
									add(ruleAction56, position)
								}
							case '=':
								{
									position249 := position
									if buffer[position] != rune('=') {
										goto l236
									}
									position++
									if buffer[position] != rune('=') {
										goto l236
									}
									position++
									if !_rules[rulesp]() {
										goto l236
									}
									add(ruleeq, position249)
								}
								if !_rules[ruleexprAdditive]() {
									goto l236
								}
								{
									add(ruleAction55, position)
								}
							default:
								{
									position251 := position
									if buffer[position] != rune('<') {
										goto l236
									}
									position++
									if buffer[position] != rune('=') {
										goto l236
									}
									position++
									if !_rules[rulesp]() {
										goto l236
									}
									add(rulele, position251)
								}
								if !_rules[ruleexprAdditive]() {
									goto l236
								}
								{
									add(ruleAction54, position)
								}
							}
						}

					}
				l237:
					goto l235
				l236:
					position, tokenIndex = position236, tokenIndex236
				}
				add(ruleexprCompare, position234)
			}
			return true
		l233:
			position, tokenIndex = position233, tokenIndex233
			return false
		},
		/* 31 exprAdditive <- <(exprMultiplicative sp ((add exprMultiplicative Action59) / (minus exprMultiplicative Action60))*)> */
		func() bool {
			position253, tokenIndex253 := position, tokenIndex
			{
				position254 := position
				if !_rules[ruleexprMultiplicative]() {
					goto l253
				}
				if !_rules[rulesp]() {
					goto l253
				}
			l255:
				{
					position256, tokenIndex256 := position, tokenIndex
					{
						position257, tokenIndex257 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l258
						}
						if !_rules[ruleexprMultiplicative]() {
							goto l258
						}
						{
							add(ruleAction59, position)
						}
						goto l257
					l258:
						position, tokenIndex = position257, tokenIndex257
						if !_rules[ruleminus]() {
							goto l256
						}
						if !_rules[ruleexprMultiplicative]() {
							goto l256
						}
						{
							add(ruleAction60, position)
						}
					}
				l257:
					goto l255
				l256:
					position, tokenIndex = position256, tokenIndex256
				}
				add(ruleexprAdditive, position254)
			}
			return true
		l253:
			position, tokenIndex = position253, tokenIndex253
			return false
		},
		/* 32 exprMultiplicative <- <(exprExp sp ((&('%') (modulus exprExp Action63)) | (&('/') (divide exprExp Action62)) | (&('*') (multiply exprExp Action61)))*)> */
		func() bool {
			position261, tokenIndex261 := position, tokenIndex
			{
				position262 := position
				if !_rules[ruleexprExp]() {
					goto l261
				}
				if !_rules[rulesp]() {
					goto l261
				}
			l263:
				{
					position264, tokenIndex264 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position266 := position
								if buffer[position] != rune('%') {
									goto l264
								}
								position++
								if !_rules[rulesp]() {
									goto l264
								}
								add(rulemodulus, position266)
							}
							if !_rules[ruleexprExp]() {
								goto l264
							}
							{
								add(ruleAction63, position)
							}
						case '/':
							{
								position268 := position
								{
									position269, tokenIndex269 := position, tokenIndex
									if buffer[position] != rune('/') {
										goto l270
									}
									position++
									goto l269
								l270:
									position, tokenIndex = position269, tokenIndex269
									if buffer[position] != rune('／') {
										goto l264
									}
									position++
								}
							l269:
								if !_rules[rulesp]() {
									goto l264
								}
								add(ruledivide, position268)
							}
							if !_rules[ruleexprExp]() {
								goto l264
							}
							{
								add(ruleAction62, position)
							}
						default:
							{
								position272 := position
								{
									position273, tokenIndex273 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l274
									}
									position++
									goto l273
								l274:
									position, tokenIndex = position273, tokenIndex273
									if buffer[position] != rune('＊') {
										goto l264
									}
									position++
								}
							l273:
								if !_rules[rulesp]() {
									goto l264
								}
								add(rulemultiply, position272)
							}
							if !_rules[ruleexprExp]() {
								goto l264
							}
							{
								add(ruleAction61, position)
							}
						}
					}

					goto l263
				l264:
					position, tokenIndex = position264, tokenIndex264
				}
				add(ruleexprMultiplicative, position262)
			}
			return true
		l261:
			position, tokenIndex = position261, tokenIndex261
			return false
		},
		/* 33 exprExp <- <(exprUnaryNeg sp (exponentiation exprUnaryNeg Action64)*)> */
		func() bool {
			position276, tokenIndex276 := position, tokenIndex
			{
				position277 := position
				if !_rules[ruleexprUnaryNeg]() {
					goto l276
				}
				if !_rules[rulesp]() {
					goto l276
				}
			l278:
				{
					position279, tokenIndex279 := position, tokenIndex
					{
						position280 := position
						{
							position281, tokenIndex281 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l282
							}
							position++
							if !_rules[rulesp]() {
								goto l282
							}
							goto l281
						l282:
							position, tokenIndex = position281, tokenIndex281
							if buffer[position] != rune('*') {
								goto l279
							}
							position++
							if buffer[position] != rune('*') {
								goto l279
							}
							position++
							if !_rules[rulesp]() {
								goto l279
							}
						}
					l281:
						add(ruleexponentiation, position280)
					}
					if !_rules[ruleexprUnaryNeg]() {
						goto l279
					}
					{
						add(ruleAction64, position)
					}
					goto l278
				l279:
					position, tokenIndex = position279, tokenIndex279
				}
				add(ruleexprExp, position277)
			}
			return true
		l276:
			position, tokenIndex = position276, tokenIndex276
			return false
		},
		/* 34 exprUnaryNeg <- <((minus exprRoot Action65) / exprUnaryPos)> */
		func() bool {
			position284, tokenIndex284 := position, tokenIndex
			{
				position285 := position
				{
					position286, tokenIndex286 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l287
					}
					if !_rules[ruleexprRoot]() {
						goto l287
					}
					{
						add(ruleAction65, position)
					}
					goto l286
				l287:
					position, tokenIndex = position286, tokenIndex286
					{
						position289 := position
						{
							position290, tokenIndex290 := position, tokenIndex
							if !_rules[ruleadd]() {
								goto l291
							}
							if !_rules[ruleexprRoot]() {
								goto l291
							}
							{
								add(ruleAction66, position)
							}
							goto l290
						l291:
							position, tokenIndex = position290, tokenIndex290
							{
								position293 := position
								{
									position294, tokenIndex294 := position, tokenIndex
									{
										position296, tokenIndex296 := position, tokenIndex
										{
											position297 := position
											if !_rules[rulenos]() {
												goto l295
											}
											{
												position298, tokenIndex298 := position, tokenIndex
												if buffer[position] != rune('d') {
													goto l299
												}
												position++
												goto l298
											l299:
												position, tokenIndex = position298, tokenIndex298
												if buffer[position] != rune('D') {
													goto l295
												}
												position++
											}
										l298:
											if !_rules[rulenos]() {
												goto l295
											}
											add(rule_diceType1, position297)
										}
										position, tokenIndex = position296, tokenIndex296
									}
									if !_rules[ruledetailStart]() {
										goto l295
									}
									if !_rules[rulenos]() {
										goto l295
									}
									if !_rules[rule_diceExpr1]() {
										goto l295
									}
									if !_rules[ruledetailEnd]() {
										goto l295
									}
									{
										add(ruleAction91, position)
									}
								l301:
									{
										position302, tokenIndex302 := position, tokenIndex
										if !_rules[rule_diceExprX]() {
											goto l302
										}
										goto l301
									l302:
										position, tokenIndex = position302, tokenIndex302
									}
									goto l294
								l295:
									position, tokenIndex = position294, tokenIndex294
									{
										position304, tokenIndex304 := position, tokenIndex
										if !_rules[rule_diceType2]() {
											goto l303
										}
										position, tokenIndex = position304, tokenIndex304
									}
									if !_rules[ruledetailStart]() {
										goto l303
									}
									{
										position305 := position
										{
											position306, tokenIndex306 := position, tokenIndex
											if buffer[position] != rune('d') {
												goto l307
											}
											position++
											goto l306
										l307:
											position, tokenIndex = position306, tokenIndex306
											if buffer[position] != rune('D') {
												goto l303
											}
											position++
										}
									l306:
										{
											add(ruleAction82, position)
										}
										if !_rules[rulenos]() {
											goto l303
										}
										{
											position309, tokenIndex309 := position, tokenIndex
											{
												position311, tokenIndex311 := position, tokenIndex
												{
													position313 := position
													{
														position314, tokenIndex314 := position, tokenIndex
														if buffer[position] != rune('优') {
															goto l315
														}
														position++
														if buffer[position] != rune('势') {
															goto l315
														}
														position++
														{
															add(ruleAction77, position)
														}
														goto l314
													l315:
														position, tokenIndex = position314, tokenIndex314
														if buffer[position] != rune('劣') {
															goto l312
														}
														position++
														if buffer[position] != rune('势') {
															goto l312
														}
														position++
														{
															add(ruleAction78, position)
														}
													}
												l314:
													add(rule_dicePearMod, position313)
												}
												goto l311
											l312:
												position, tokenIndex = position311, tokenIndex311
												if !_rules[rule_diceMod]() {
													goto l309
												}
											}
										l311:
											goto l310
										l309:
											position, tokenIndex = position309, tokenIndex309
										}
									l310:
										{
											position318, tokenIndex318 := position, tokenIndex
											if !_rules[rule_diceMod2]() {
												goto l318
											}
											goto l319
										l318:
											position, tokenIndex = position318, tokenIndex318
										}
									l319:
										add(rule_diceExpr2, position305)
									}
									if !_rules[ruledetailEnd]() {
										goto l303
									}
									{
										add(ruleAction92, position)
									}
								l321:
									{
										position322, tokenIndex322 := position, tokenIndex
										if !_rules[rule_diceExprX]() {
											goto l322
										}
										goto l321
									l322:
										position, tokenIndex = position322, tokenIndex322
									}
									goto l294
								l303:
									position, tokenIndex = position294, tokenIndex294
									if !(p.Flags.EnableDiceCoC) {
										goto l323
									}
									{
										position324, tokenIndex324 := position, tokenIndex
										{
											position325 := position
											{
												switch buffer[position] {
												case 'B':
													if buffer[position] != rune('B') {
														goto l323
													}
													position++
												case 'b':
													if buffer[position] != rune('b') {
														goto l323
													}
													position++
												case 'P':
													if buffer[position] != rune('P') {
														goto l323
													}
													position++
												default:
													if buffer[position] != rune('p') {
														goto l323
													}
													position++
												}
											}

											{
												position327, tokenIndex327 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l328
												}
												{
													position329, tokenIndex329 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l329
													}
													goto l328
												l329:
													position, tokenIndex = position329, tokenIndex329
												}
												goto l327
											l328:
												position, tokenIndex = position327, tokenIndex327
												{
													position330, tokenIndex330 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l330
													}
													goto l323
												l330:
													position, tokenIndex = position330, tokenIndex330
												}
											}
										l327:
											add(rule_cocDiceType, position325)
										}
										position, tokenIndex = position324, tokenIndex324
									}
									if !_rules[ruledetailStart]() {
										goto l323
									}
									{
										position331, tokenIndex331 := position, tokenIndex
										{
											position333 := position
											{
												position334, tokenIndex334 := position, tokenIndex
												if buffer[position] != rune('b') {
													goto l335
												}
												position++
												goto l334
											l335:
												position, tokenIndex = position334, tokenIndex334
												if buffer[position] != rune('B') {
													goto l332
												}
												position++
											}
										l334:
											{
												position336, tokenIndex336 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l337
												}
												{
													position338, tokenIndex338 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l338
													}
													goto l337
												l338:
													position, tokenIndex = position338, tokenIndex338
												}
												goto l336
											l337:
												position, tokenIndex = position336, tokenIndex336
												{
													position339, tokenIndex339 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l339
													}
													goto l332
												l339:
													position, tokenIndex = position339, tokenIndex339
												}
												{
													add(ruleAction87, position)
												}
											}
										l336:
											if !_rules[ruledetailEnd]() {
												goto l332
											}
											{
												add(ruleAction88, position)
											}
											add(rule_diceCocBonus, position333)
										}
										goto l331
									l332:
										position, tokenIndex = position331, tokenIndex331
										{
											position342 := position
											{
												position343, tokenIndex343 := position, tokenIndex
												if buffer[position] != rune('p') {
													goto l344
												}
												position++
												goto l343
											l344:
												position, tokenIndex = position343, tokenIndex343
												if buffer[position] != rune('P') {
													goto l323
												}
												position++
											}
										l343:
											{
												position345, tokenIndex345 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l346
												}
												{
													position347, tokenIndex347 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l347
													}
													goto l346
												l347:
													position, tokenIndex = position347, tokenIndex347
												}
												goto l345
											l346:
												position, tokenIndex = position345, tokenIndex345
												{
													position348, tokenIndex348 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l348
													}
													goto l323
												l348:
													position, tokenIndex = position348, tokenIndex348
												}
												{
													add(ruleAction89, position)
												}
											}
										l345:
											if !_rules[ruledetailEnd]() {
												goto l323
											}
											{
												add(ruleAction90, position)
											}
											add(rule_diceCocPenalty, position342)
										}
									}
								l331:
									goto l294
								l323:
									position, tokenIndex = position294, tokenIndex294
									if !(p.Flags.EnableDiceWoD) {
										goto l351
									}
									{
										position352, tokenIndex352 := position, tokenIndex
										{
											position353 := position
											{
												position354, tokenIndex354 := position, tokenIndex
												if !_rules[rulenos]() {
													goto l355
												}
												if !_rules[rule_wodTypeMain]() {
													goto l355
												}
												goto l354
											l355:
												position, tokenIndex = position354, tokenIndex354
												if !_rules[rule_wodTypeMain]() {
													goto l351
												}
												{
													position356, tokenIndex356 := position, tokenIndex
													if !_rules[ruleidentifier_ch]() {
														goto l356
													}
													goto l351
												l356:
													position, tokenIndex = position356, tokenIndex356
												}
											}
										l354:
											add(rule_wodDiceType, position353)
										}
										position, tokenIndex = position352, tokenIndex352
									}
									if !_rules[ruledetailStart]() {
										goto l351
									}
									{
										add(ruleAction93, position)
									}
									{
										position358, tokenIndex358 := position, tokenIndex
										if !_rules[rulenos]() {
											goto l359
										}
										{
											add(ruleAction94, position)
										}
										if !_rules[rule_wodMain]() {
											goto l359
										}
										goto l358
									l359:
										position, tokenIndex = position358, tokenIndex358
										if !_rules[rule_wodMain]() {
											goto l351
										}
										{
											position361, tokenIndex361 := position, tokenIndex
											if !_rules[ruleidentifier_ch]() {
												goto l361
											}
											goto l351
										l361:
											position, tokenIndex = position361, tokenIndex361
										}
									}
								l358:
									if !_rules[ruledetailEnd]() {
										goto l351
									}
									{
										add(ruleAction95, position)
									}
									goto l294
								l351:
									position, tokenIndex = position294, tokenIndex294
									if !(p.Flags.EnableDiceDoubleCross) {
										goto l363
									}
									{
										position364, tokenIndex364 := position, tokenIndex
										{
											position365 := position
											if !_rules[rulenos]() {
												goto l363
											}
											{
												position366, tokenIndex366 := position, tokenIndex
												if buffer[position] != rune('c') {
													goto l367
												}
												position++
												goto l366
											l367:
												position, tokenIndex = position366, tokenIndex366
												if buffer[position] != rune('C') {
													goto l363
												}
												position++
											}
										l366:
											if !_rules[rulenos]() {
												goto l363
											}
										l368:
											{
												position369, tokenIndex369 := position, tokenIndex
												{
													position370, tokenIndex370 := position, tokenIndex
													if buffer[position] != rune('m') {
														goto l371
													}
													position++
													goto l370
												l371:
													position, tokenIndex = position370, tokenIndex370
													if buffer[position] != rune('M') {
														goto l369
													}
													position++
												}
											l370:
												if !_rules[rulenos]() {
													goto l369
												}
												goto l368
											l369:
												position, tokenIndex = position369, tokenIndex369
											}
											add(rule_dcDiceType, position365)
										}
										position, tokenIndex = position364, tokenIndex364
									}
									if !_rules[ruledetailStart]() {
										goto l363
									}
									{
										add(ruleAction96, position)
									}
									if !_rules[rulenos]() {
										goto l363
									}
									{
										add(ruleAction97, position)
									}
									{
										position374, tokenIndex374 := position, tokenIndex
										if buffer[position] != rune('c') {
											goto l375
										}
										position++
										goto l374
									l375:
										position, tokenIndex = position374, tokenIndex374
										if buffer[position] != rune('C') {
											goto l363
										}
										position++
									}
								l374:
									if !_rules[rulenos]() {
										goto l363
									}
								l376:
									{
										position377, tokenIndex377 := position, tokenIndex
										{
											position378, tokenIndex378 := position, tokenIndex
											if buffer[position] != rune('m') {
												goto l379
											}
											position++
											goto l378
										l379:
											position, tokenIndex = position378, tokenIndex378
											if buffer[position] != rune('M') {
												goto l377
											}
											position++
										}
									l378:
										if !_rules[rulenos]() {
											goto l377
										}
										{
											add(ruleAction98, position)
										}
										goto l376
									l377:
										position, tokenIndex = position377, tokenIndex377
									}
									if !_rules[ruledetailEnd]() {
										goto l363
									}
									{
										add(ruleAction99, position)
									}
									goto l294
								l363:
									position, tokenIndex = position294, tokenIndex294
									if !(p.Flags.EnableDiceFate) {
										goto l382
									}
									{
										position383, tokenIndex383 := position, tokenIndex
										{
											position384 := position
											{
												position385, tokenIndex385 := position, tokenIndex
												if buffer[position] != rune('f') {
													goto l386
												}
												position++
												goto l385
											l386:
												position, tokenIndex = position385, tokenIndex385
												if buffer[position] != rune('F') {
													goto l382
												}
												position++
											}
										l385:
											{
												position387, tokenIndex387 := position, tokenIndex
												if !_rules[ruleidentifier_ch]() {
													goto l387
												}
												goto l382
											l387:
												position, tokenIndex = position387, tokenIndex387
											}
											add(rule_fateDiceType, position384)
										}
										position, tokenIndex = position383, tokenIndex383
									}
									if !_rules[ruledetailStart]() {
										goto l382
									}
									{
										position388, tokenIndex388 := position, tokenIndex
										if buffer[position] != rune('f') {
											goto l389
										}
										position++
										goto l388
									l389:
										position, tokenIndex = position388, tokenIndex388
										if buffer[position] != rune('F') {
											goto l382
										}
										position++
									}
								l388:
									{
										position390, tokenIndex390 := position, tokenIndex
										if !_rules[ruleidentifier_ch]() {
											goto l390
										}
										goto l382
									l390:
										position, tokenIndex = position390, tokenIndex390
									}
									if !_rules[ruledetailEnd]() {
										goto l382
									}
									{
										add(ruleAction100, position)
									}
									goto l294
								l382:
									position, tokenIndex = position294, tokenIndex294
									{
										position392 := position
										{
											position393, tokenIndex393 := position, tokenIndex
											if buffer[position] != rune('t') {
												goto l394
											}
											position++
											if buffer[position] != rune('r') {
												goto l394
											}
											position++
											if buffer[position] != rune('u') {
												goto l394
											}
											position++
											if buffer[position] != rune('e') {
												goto l394
											}
											position++
											if !_rules[rulesp]() {
												goto l394
											}
											{
												add(ruleAction116, position)
											}
											goto l393
										l394:
											position, tokenIndex = position393, tokenIndex393
											if buffer[position] != rune('f') {
												goto l396
											}
											position++
											if buffer[position] != rune('a') {
												goto l396
											}
											position++
											if buffer[position] != rune('l') {
												goto l396
											}
											position++
											if buffer[position] != rune('s') {
												goto l396
											}
											position++
											if buffer[position] != rune('e') {
												goto l396
											}
											position++
											if !_rules[rulesp]() {
												goto l396
											}
											{
												add(ruleAction117, position)
											}
											goto l393
										l396:
											position, tokenIndex = position393, tokenIndex393
											if buffer[position] != rune('u') {
												goto l398
											}
											position++
											if buffer[position] != rune('n') {
												goto l398
											}
											position++
											if buffer[position] != rune('d') {
												goto l398
											}
											position++
											if buffer[position] != rune('e') {
												goto l398
											}
											position++
											if buffer[position] != rune('f') {
												goto l398
											}
											position++
											if buffer[position] != rune('i') {
												goto l398
											}
											position++
											if buffer[position] != rune('n') {
												goto l398
											}
											position++
											if buffer[position] != rune('e') {
												goto l398
											}
											position++
											if buffer[position] != rune('d') {
												goto l398
											}
											position++
											if !_rules[rulesp]() {
												goto l398
											}
											{
												add(ruleAction118, position)
											}
											goto l393
										l398:
											position, tokenIndex = position393, tokenIndex393
											if buffer[position] != rune('t') {
												goto l400
											}
											position++
											if buffer[position] != rune('h') {
												goto l400
											}
											position++
											if buffer[position] != rune('i') {
												goto l400
											}
											position++
											if buffer[position] != rune('s') {
												goto l400
											}
											position++
											if !_rules[rulesp]() {
												goto l400
											}
											{
												add(ruleAction119, position)
											}
											if !_rules[ruleitem_get]() {
												goto l400
											}
											if !_rules[ruleattr_get]() {
												goto l400
											}
											goto l393
										l400:
											position, tokenIndex = position393, tokenIndex393
											if buffer[position] != rune('&') {
												goto l402
											}
											position++
											if !_rules[ruleidentifier]() {
												goto l402
											}
											if !_rules[rulesp]() {
												goto l402
											}
											{
												add(ruleAction120, position)
											}
											if !_rules[ruleattr_get]() {
												goto l402
											}
											goto l393
										l402:
											position, tokenIndex = position393, tokenIndex393
											_matched := false
											if !(_matched) {
												goto l404
											}
											if buffer[position] != rune('c') {
												goto l404
											}
											position++
											if buffer[position] != rune('a') {
												goto l404
											}
											position++
											if buffer[position] != rune('f') {
												goto l404
											}
											position++
											if buffer[position] != rune('e') {
												goto l404
											}
											position++
											if buffer[position] != rune('b') {
												goto l404
											}
											position++
											if buffer[position] != rune('a') {
												goto l404
											}
											position++
											if buffer[position] != rune('b') {
												goto l404
											}
											position++
											if buffer[position] != rune('e') {
												goto l404
											}
											position++
											goto l393
										l404:
											position, tokenIndex = position393, tokenIndex393
											{
												position406 := position
												{
													position407 := position
												l408:
													{
														position409, tokenIndex409 := position, tokenIndex
														if c := buffer[position]; c < rune('0') || c > rune('9') {
															goto l409
														}
														position++
														goto l408
													l409:
														position, tokenIndex = position409, tokenIndex409
													}
													if buffer[position] != rune('.') {
														goto l405
													}
													position++
													if c := buffer[position]; c < rune('0') || c > rune('9') {
														goto l405
													}
													position++
												l410:
													{
														position411, tokenIndex411 := position, tokenIndex
														if c := buffer[position]; c < rune('0') || c > rune('9') {
															goto l411
														}
														position++
														goto l410
													l411:
														position, tokenIndex = position411, tokenIndex411
													}
													add(rulePegText, position407)
												}
												{
													add(ruleAction133, position)
												}
												add(rulefloat, position406)
											}
											goto l393
										l405:
											position, tokenIndex = position393, tokenIndex393
											if !_rules[rulenumber]() {
												goto l413
											}
											goto l393
										l413:
											position, tokenIndex = position393, tokenIndex393
											{
												position415, tokenIndex415 := position, tokenIndex
												if !_rules[ruleidentifier]() {
													goto l414
												}
												if !_rules[rulesp]() {
													goto l414
												}
												position, tokenIndex = position415, tokenIndex415
											}
											if !_rules[ruledetailStart]() {
												goto l414
											}
											if !_rules[ruleidentifier]() {
												goto l414
											}
											if !_rules[ruledetailEnd]() {
												goto l414
											}
											if !_rules[rulespNoCR]() {
												goto l414
											}
											{
												add(ruleAction121, position)
											}
											{
												position417, tokenIndex417 := position, tokenIndex
												if !_rules[rulefunc_invoke]() {
													goto l417
												}
												goto l418
											l417:
												position, tokenIndex = position417, tokenIndex417
											}
										l418:
											if !_rules[ruleitem_get]() {
												goto l414
											}
											if !_rules[ruleattr_get]() {
												goto l414
											}
											goto l393
										l414:
											position, tokenIndex = position393, tokenIndex393
											if buffer[position] != rune('[') {
												goto l419
											}
											position++
											if !_rules[rulesp]() {
												goto l419
											}
											if buffer[position] != rune(']') {
												goto l419
											}
											position++
											if !_rules[rulesp]() {
												goto l419
											}
											{
												add(ruleAction122, position)
											}
											{
												position421, tokenIndex421 := position, tokenIndex
												if !_rules[rulearray_call]() {
													goto l421
												}
												goto l422
											l421:
												position, tokenIndex = position421, tokenIndex421
											}
										l422:
											if !_rules[ruleattr_get]() {
												goto l419
											}
											goto l393
										l419:
											position, tokenIndex = position393, tokenIndex393
											if buffer[position] != rune('[') {
												goto l423
											}
											position++
											if !_rules[rulesp]() {
												goto l423
											}
											if !_rules[ruleexprRoot]() {
												goto l423
											}
											if buffer[position] != rune('.') {
												goto l423
											}
											position++
											if buffer[position] != rune('.') {
												goto l423
											}
											position++
											if !_rules[rulesp]() {
												goto l423
											}
											if !_rules[ruleexprRoot]() {
												goto l423
											}
											if buffer[position] != rune(']') {
												goto l423
											}
											position++
											if !_rules[rulesp]() {
												goto l423
											}
											{
												add(ruleAction123, position)
											}
											{
												position425, tokenIndex425 := position, tokenIndex
												if !_rules[rulearray_call]() {
													goto l425
												}
												goto l426
											l425:
												position, tokenIndex = position425, tokenIndex425
											}
										l426:
											if !_rules[ruleattr_get]() {
												goto l423
											}
											goto l393
										l423:
											position, tokenIndex = position393, tokenIndex393
											if buffer[position] != rune('{') {
												goto l427
											}
											position++
											if !_rules[rulesp]() {
												goto l427
											}
											if buffer[position] != rune('}') {
												goto l427
											}
											position++
											if !_rules[rulesp]() {
												goto l427
											}
											{
												add(ruleAction127, position)
											}
											if !_rules[ruleitem_get]() {
												goto l427
											}
											if !_rules[ruleattr_get]() {
												goto l427
											}
											goto l393
										l427:
											position, tokenIndex = position393, tokenIndex393
											{
												switch buffer[position] {
												case 'f':
													if buffer[position] != rune('f') {
														goto l284
													}
													position++
													if buffer[position] != rune('u') {
														goto l284
													}
													position++
													if buffer[position] != rune('n') {
														goto l284
													}
													position++
													if buffer[position] != rune('c') {
														goto l284
													}
													position++
													if !_rules[rulesp]() {
														goto l284
													}
													if !_rules[rulefunc_def_params]() {
														goto l284
													}
													if buffer[position] != rune('{') {
														goto l284
													}
													position++
													if !_rules[rulesp]() {
														goto l284
													}
													{
														add(ruleAction130, position)
													}
													{
														position431 := position
														{
															position432, tokenIndex432 := position, tokenIndex
															if !_rules[rulestmtRoot]() {
																goto l432
															}
															goto l433
														l432:
															position, tokenIndex = position432, tokenIndex432
														}
													l433:
														add(rulePegText, position431)
													}
													if buffer[position] != rune('}') {
														goto l284
													}
													position++
													if !_rules[rulesp]() {
														goto l284
													}
													{
														add(ruleAction131, position)
													}
												case '{':
													if buffer[position] != rune('{') {
														goto l284
													}
													position++
													if !_rules[rulesp]() {
														goto l284
													}
													{
														add(ruleAction128, position)
													}
													if !_rules[ruledict_item]() {
														goto l284
													}
												l436:
													{
														position437, tokenIndex437 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l437
														}
														position++
														if !_rules[rulesp]() {
															goto l437
														}
														if !_rules[ruledict_item]() {
															goto l437
														}
														goto l436
													l437:
														position, tokenIndex = position437, tokenIndex437
													}
													{
														position438, tokenIndex438 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l438
														}
														position++
														goto l439
													l438:
														position, tokenIndex = position438, tokenIndex438
													}
												l439:
													if buffer[position] != rune('}') {
														goto l284
													}
													position++
													if !_rules[rulesp]() {
														goto l284
													}
													{
														add(ruleAction129, position)
													}
													if !_rules[ruleitem_get]() {
														goto l284
													}
													if !_rules[ruleattr_get]() {
														goto l284
													}
												case '[':
													if buffer[position] != rune('[') {
														goto l284
													}
													position++
													if !_rules[rulesp]() {
														goto l284
													}
													{
														add(ruleAction124, position)
													}
													if !_rules[ruleexprRoot]() {
														goto l284
													}
												l442:
													{
														position443, tokenIndex443 := position, tokenIndex
														if buffer[position] != rune(',') {
															goto l443
														}
														position++
														if !_rules[rulesp]() {
															goto l443
														}
														if !_rules[ruleexprRoot]() {
															goto l443
														}
														{
															add(ruleAction125, position)
														}
														goto l442
													l443:
														position, tokenIndex = position443, tokenIndex443
													}
													if buffer[position] != rune(']') {
														goto l284
													}
													position++
													if !_rules[rulesp]() {
														goto l284
													}
													{
														add(ruleAction126, position)
													}
													{
														position446, tokenIndex446 := position, tokenIndex
														if !_rules[rulearray_call]() {
															goto l446
														}
														goto l447
													l446:
														position, tokenIndex = position446, tokenIndex446
													}
												l447:
													if !_rules[ruleattr_get]() {
														goto l284
													}
												case '(':
													if !_rules[rulesub]() {
														goto l284
													}
													if !_rules[ruleitem_get]() {
														goto l284
													}
													if !_rules[ruleattr_get]() {
														goto l284
													}
												default:
													{
														position448 := position
														{
															position449, tokenIndex449 := position, tokenIndex
															if buffer[position] != rune('\'') {
																goto l450
															}
															position++
															if buffer[position] != rune('\'') {
																goto l450
															}
															position++
															{
																add(ruleAction138, position)
															}
															goto l449
														l450:
															position, tokenIndex = position449, tokenIndex449
															if buffer[position] != rune('\x1e') {
																goto l452
															}
															position++
															if buffer[position] != rune('\x1e') {
																goto l452
															}
															position++
															{
																add(ruleAction139, position)
															}
															goto l449
														l452:
															position, tokenIndex = position449, tokenIndex449
															if buffer[position] != rune('"') {
																goto l454
															}
															position++
															if buffer[position] != rune('"') {
																goto l454
															}
															position++
															{
																add(ruleAction140, position)
															}
															goto l449
														l454:
															position, tokenIndex = position449, tokenIndex449
															if buffer[position] != rune('`') {
																goto l456
															}
															position++
															if buffer[position] != rune('`') {
																goto l456
															}
															position++
															{
																add(ruleAction141, position)
															}
															goto l449
														l456:
															position, tokenIndex = position449, tokenIndex449
															{
																switch buffer[position] {
																case '\'':
																	if buffer[position] != rune('\'') {
																		goto l284
																	}
																	position++
																	{
																		add(ruleAction152, position)
																	}
																	{
																		position460 := position
																	l461:
																		{
																			position462, tokenIndex462 := position, tokenIndex
																			{
																				position463 := position
																				{
																					position464 := position
																					{
																						position467, tokenIndex467 := position, tokenIndex
																						if !_rules[ruleescape]() {
																							goto l468
																						}
																						goto l467
																					l468:
																						position, tokenIndex = position467, tokenIndex467
																						{
																							position469, tokenIndex469 := position, tokenIndex
																							{
																								switch buffer[position] {
																								case '\r':
																									if buffer[position] != rune('\r') {
																										goto l469
																									}
																									position++
																								case '\n':
																									if buffer[position] != rune('\n') {
																										goto l469
																									}
																									position++
																								case '\\':
																									if buffer[position] != rune('\\') {
																										goto l469
																									}
																									position++
																								case '\'':
																									if buffer[position] != rune('\'') {
																										goto l469
																									}
																									position++
																								default:
																									if buffer[position] != rune('{') {
																										goto l469
																									}
																									position++
																								}
																							}

																							goto l462
																						l469:
																							position, tokenIndex = position469, tokenIndex469
																						}
																						if !matchDot() {
																							goto l462
																						}
																					}
																				l467:
																				l465:
																					{
																						position466, tokenIndex466 := position, tokenIndex
																						{
																							position471, tokenIndex471 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l472
																							}
																							goto l471
																						l472:
																							position, tokenIndex = position471, tokenIndex471
																							{
																								position473, tokenIndex473 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\r':
																										if buffer[position] != rune('\r') {
																											goto l473
																										}
																										position++
																									case '\n':
																										if buffer[position] != rune('\n') {
																											goto l473
																										}
																										position++
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l473
																										}
																										position++
																									case '\'':
																										if buffer[position] != rune('\'') {
																											goto l473
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l473
																										}
																										position++
																									}
																								}

																								goto l466
																							l473:
																								position, tokenIndex = position473, tokenIndex473
																							}
																							if !matchDot() {
																								goto l466
																							}
																						}
																					l471:
																						goto l465
																					l466:
																						position, tokenIndex = position466, tokenIndex466
																					}
																					add(rulePegText, position464)
																				}
																				{
																					add(ruleAction137, position)
																				}
																				add(rulestrPart3, position463)
																			}
																			goto l461
																		l462:
																			position, tokenIndex = position462, tokenIndex462
																		}
																		add(rulePegText, position460)
																	}
																	if buffer[position] != rune('\'') {
																		goto l284
																	}
																	position++
																	{
																		add(ruleAction153, position)
																	}
																case '"':
																	if buffer[position] != rune('"') {
																		goto l284
																	}
																	position++
																	{
																		add(ruleAction150, position)
																	}
																	{
																		position478 := position
																	l479:
																		{
																			position480, tokenIndex480 := position, tokenIndex
																			{
																				position481 := position
																				{
																					position482 := position
																					{
																						position485, tokenIndex485 := position, tokenIndex
																						if !_rules[ruleescape]() {
																							goto l486
																						}
																						goto l485
																					l486:
																						position, tokenIndex = position485, tokenIndex485
																						{
																							position487, tokenIndex487 := position, tokenIndex
																							{
																								switch buffer[position] {
																								case '\r':
																									if buffer[position] != rune('\r') {
																										goto l487
																									}
																									position++
																								case '\n':
																									if buffer[position] != rune('\n') {
																										goto l487
																									}
																									position++
																								case '\\':
																									if buffer[position] != rune('\\') {
																										goto l487
																									}
																									position++
																								case '"':
																									if buffer[position] != rune('"') {
																										goto l487
																									}
																									position++
																								default:
																									if buffer[position] != rune('{') {
																										goto l487
																									}
																									position++
																								}
																							}

																							goto l480
																						l487:
																							position, tokenIndex = position487, tokenIndex487
																						}
																						if !matchDot() {
																							goto l480
																						}
																					}
																				l485:
																				l483:
																					{
																						position484, tokenIndex484 := position, tokenIndex
																						{
																							position489, tokenIndex489 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l490
																							}
																							goto l489
																						l490:
																							position, tokenIndex = position489, tokenIndex489
																							{
																								position491, tokenIndex491 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\r':
																										if buffer[position] != rune('\r') {
																											goto l491
																										}
																										position++
																									case '\n':
																										if buffer[position] != rune('\n') {
																											goto l491
																										}
																										position++
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l491
																										}
																										position++
																									case '"':
																										if buffer[position] != rune('"') {
																											goto l491
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l491
																										}
																										position++
																									}
																								}

																								goto l484
																							l491:
																								position, tokenIndex = position491, tokenIndex491
																							}
																							if !matchDot() {
																								goto l484
																							}
																						}
																					l489:
																						goto l483
																					l484:
																						position, tokenIndex = position484, tokenIndex484
																					}
																					add(rulePegText, position482)
																				}
																				{
																					add(ruleAction136, position)
																				}
																				add(rulestrPart2, position481)
																			}
																			goto l479
																		l480:
																			position, tokenIndex = position480, tokenIndex480
																		}
																		add(rulePegText, position478)
																	}
																	if buffer[position] != rune('"') {
																		goto l284
																	}
																	position++
																	{
																		add(ruleAction151, position)
																	}
																case '\x1e':
																	if buffer[position] != rune('\x1e') {
																		goto l284
																	}
																	position++
																	{
																		add(ruleAction146, position)
																	}
																	{
																		position496 := position
																	l497:
																		{
																			position498, tokenIndex498 := position, tokenIndex
																			{
																				position499, tokenIndex499 := position, tokenIndex
																				if buffer[position] != rune('{') {
																					goto l500
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l500
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l500
																				}
																				{
																					add(ruleAction147, position)
																				}
																				if buffer[position] != rune('}') {
																					goto l500
																				}
																				position++
																				goto l499
																			l500:
																				position, tokenIndex = position499, tokenIndex499
																				if buffer[position] != rune('{') {
																					goto l502
																				}
																				position++
																				if buffer[position] != rune('%') {
																					goto l502
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l502
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l502
																				}
																				{
																					add(ruleAction148, position)
																				}
																				if buffer[position] != rune('%') {
																					goto l502
																				}
																				position++
																				if buffer[position] != rune('}') {
																					goto l502
																				}
																				position++
																				goto l499
																			l502:
																				position, tokenIndex = position499, tokenIndex499
																				{
																					position504 := position
																					{
																						position505 := position
																						{
																							position508, tokenIndex508 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l509
																							}
																							goto l508
																						l509:
																							position, tokenIndex = position508, tokenIndex508
																							{
																								position510, tokenIndex510 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l510
																										}
																										position++
																									case '\x1e':
																										if buffer[position] != rune('\x1e') {
																											goto l510
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l510
																										}
																										position++
																									}
																								}

																								goto l498
																							l510:
																								position, tokenIndex = position510, tokenIndex510
																							}
																							if !matchDot() {
																								goto l498
																							}
																						}
																					l508:
																					l506:
																						{
																							position507, tokenIndex507 := position, tokenIndex
																							{
																								position512, tokenIndex512 := position, tokenIndex
																								if !_rules[ruleescape]() {
																									goto l513
																								}
																								goto l512
																							l513:
																								position, tokenIndex = position512, tokenIndex512
																								{
																									position514, tokenIndex514 := position, tokenIndex
																									{
																										switch buffer[position] {
																										case '\\':
																											if buffer[position] != rune('\\') {
																												goto l514
																											}
																											position++
																										case '\x1e':
																											if buffer[position] != rune('\x1e') {
																												goto l514
																											}
																											position++
																										default:
																											if buffer[position] != rune('{') {
																												goto l514
																											}
																											position++
																										}
																									}

																									goto l507
																								l514:
																									position, tokenIndex = position514, tokenIndex514
																								}
																								if !matchDot() {
																									goto l507
																								}
																							}
																						l512:
																							goto l506
																						l507:
																							position, tokenIndex = position507, tokenIndex507
																						}
																						add(rulePegText, position505)
																					}
																					{
																						add(ruleAction135, position)
																					}
																					add(rulestrPart1, position504)
																				}
																			}
																		l499:
																			goto l497
																		l498:
																			position, tokenIndex = position498, tokenIndex498
																		}
																		add(rulePegText, position496)
																	}
																	if buffer[position] != rune('\x1e') {
																		goto l284
																	}
																	position++
																	{
																		add(ruleAction149, position)
																	}
																default:
																	if buffer[position] != rune('`') {
																		goto l284
																	}
																	position++
																	{
																		add(ruleAction142, position)
																	}
																	{
																		position519 := position
																	l520:
																		{
																			position521, tokenIndex521 := position, tokenIndex
																			{
																				position522, tokenIndex522 := position, tokenIndex
																				if buffer[position] != rune('{') {
																					goto l523
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l523
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l523
																				}
																				{
																					add(ruleAction143, position)
																				}
																				if buffer[position] != rune('}') {
																					goto l523
																				}
																				position++
																				goto l522
																			l523:
																				position, tokenIndex = position522, tokenIndex522
																				if buffer[position] != rune('{') {
																					goto l525
																				}
																				position++
																				if buffer[position] != rune('%') {
																					goto l525
																				}
																				position++
																				if !_rules[rulesp]() {
																					goto l525
																				}
																				if !_rules[ruleexprRoot]() {
																					goto l525
																				}
																				{
																					add(ruleAction144, position)
																				}
																				if buffer[position] != rune('%') {
																					goto l525
																				}
																				position++
																				if buffer[position] != rune('}') {
																					goto l525
																				}
																				position++
																				goto l522
																			l525:
																				position, tokenIndex = position522, tokenIndex522
																				{
																					position527 := position
																					{
																						position528 := position
																						{
																							position531, tokenIndex531 := position, tokenIndex
																							if !_rules[ruleescape]() {
																								goto l532
																							}
																							goto l531
																						l532:
																							position, tokenIndex = position531, tokenIndex531
																							{
																								position533, tokenIndex533 := position, tokenIndex
																								{
																									switch buffer[position] {
																									case '\\':
																										if buffer[position] != rune('\\') {
																											goto l533
																										}
																										position++
																									case '`':
																										if buffer[position] != rune('`') {
																											goto l533
																										}
																										position++
																									default:
																										if buffer[position] != rune('{') {
																											goto l533
																										}
																										position++
																									}
																								}

																								goto l521
																							l533:
																								position, tokenIndex = position533, tokenIndex533
																							}
																							if !matchDot() {
																								goto l521
																							}
																						}
																					l531:
																					l529:
																						{
																							position530, tokenIndex530 := position, tokenIndex
																							{
																								position535, tokenIndex535 := position, tokenIndex
																								if !_rules[ruleescape]() {
																									goto l536
																								}
																								goto l535
																							l536:
																								position, tokenIndex = position535, tokenIndex535
																								{
																									position537, tokenIndex537 := position, tokenIndex
																									{
																										switch buffer[position] {
																										case '\\':
																											if buffer[position] != rune('\\') {
																												goto l537
																											}
																											position++
																										case '`':
																											if buffer[position] != rune('`') {
																												goto l537
																											}
																											position++
																										default:
																											if buffer[position] != rune('{') {
																												goto l537
																											}
																											position++
																										}
																									}

																									goto l530
																								l537:
																									position, tokenIndex = position537, tokenIndex537
																								}
																								if !matchDot() {
																									goto l530
																								}
																							}
																						l535:
																							goto l529
																						l530:
																							position, tokenIndex = position530, tokenIndex530
																						}
																						add(rulePegText, position528)
																					}
																					{
																						add(ruleAction134, position)
																					}
																					add(rulestrPart, position527)
																				}
																			}
																		l522:
																			goto l520
																		l521:
																			position, tokenIndex = position521, tokenIndex521
																		}
																		add(rulePegText, position519)
																	}
																	if buffer[position] != rune('`') {
																		goto l284
																	}
																	position++
																	{
																		add(ruleAction145, position)
																	}
																}
															}

														}
													l449:
														if !_rules[rulesp]() {
															goto l284
														}
														add(rulefstring, position448)
													}
												}
											}

										}
									l393:
										add(rulevalue, position392)
									}
								}
							l294:
								add(ruleexprDice, position293)
							}
						}
					l290:
						add(ruleexprUnaryPos, position289)
					}
				}
			l286:
				add(ruleexprUnaryNeg, position285)
			}
			return true
		l284:
			position, tokenIndex = position284, tokenIndex284
			return false
		},
		/* 35 exprUnaryPos <- <((add exprRoot Action66) / exprDice)> */
		nil,
		/* 36 nos <- <(number / sub)> */
		func() bool {
			position542, tokenIndex542 := position, tokenIndex
			{
				position543 := position
				{
					position544, tokenIndex544 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l545
					}
					goto l544
				l545:
					position, tokenIndex = position544, tokenIndex544
					if !_rules[rulesub]() {
						goto l542
					}
				}
			l544:
				add(rulenos, position543)
			}
			return true
		l542:
			position, tokenIndex = position542, tokenIndex542
			return false
		},
		/* 37 _diceMod <- <(((('k' 'l') / ('q' / 'Q')) nos Action67) / ((('k' 'l') / ('q' / 'Q')) Action68) / ((('k' 'h') / ('k' / 'K')) nos Action69) / ((('k' 'h') / ('k' / 'K')) Action70) / ('d' 'h' nos Action71) / ('d' 'h' Action72) / ('d' 'l' nos Action73) / ('d' 'l' Action74))> */
		func() bool {
			position546, tokenIndex546 := position, tokenIndex
			{
				position547 := position
				{
					position548, tokenIndex548 := position, tokenIndex
					{
						position550, tokenIndex550 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l551
						}
						position++
						if buffer[position] != rune('l') {
							goto l551
						}
						position++
						goto l550
					l551:
						position, tokenIndex = position550, tokenIndex550
						{
							position552, tokenIndex552 := position, tokenIndex
							if buffer[position] != rune('q') {
								goto l553
							}
							position++
							goto l552
						l553:
							position, tokenIndex = position552, tokenIndex552
							if buffer[position] != rune('Q') {
								goto l549
							}
							position++
						}
					l552:
					}
				l550:
					if !_rules[rulenos]() {
						goto l549
					}
					{
						add(ruleAction67, position)
					}
					goto l548
				l549:
					position, tokenIndex = position548, tokenIndex548
					{
						position556, tokenIndex556 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l557
						}
						position++
						if buffer[position] != rune('l') {
							goto l557
						}
						position++
						goto l556
					l557:
						position, tokenIndex = position556, tokenIndex556
						{
							position558, tokenIndex558 := position, tokenIndex
							if buffer[position] != rune('q') {
								goto l559
							}
							position++
							goto l558
						l559:
							position, tokenIndex = position558, tokenIndex558
							if buffer[position] != rune('Q') {
								goto l555
							}
							position++
						}
					l558:
					}
				l556:
					{
						add(ruleAction68, position)
					}
					goto l548
				l555:
					position, tokenIndex = position548, tokenIndex548
					{
						position562, tokenIndex562 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l563
						}
						position++
						if buffer[position] != rune('h') {
							goto l563
						}
						position++
						goto l562
					l563:
						position, tokenIndex = position562, tokenIndex562
						{
							position564, tokenIndex564 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l565
							}
							position++
							goto l564
						l565:
							position, tokenIndex = position564, tokenIndex564
							if buffer[position] != rune('K') {
								goto l561
							}
							position++
						}
					l564:
					}
				l562:
					if !_rules[rulenos]() {
						goto l561
					}
					{
						add(ruleAction69, position)
					}
					goto l548
				l561:
					position, tokenIndex = position548, tokenIndex548
					{
						position568, tokenIndex568 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l569
						}
						position++
						if buffer[position] != rune('h') {
							goto l569
						}
						position++
						goto l568
					l569:
						position, tokenIndex = position568, tokenIndex568
						{
							position570, tokenIndex570 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l571
							}
							position++
							goto l570
						l571:
							position, tokenIndex = position570, tokenIndex570
							if buffer[position] != rune('K') {
								goto l567
							}
							position++
						}
					l570:
					}
				l568:
					{
						add(ruleAction70, position)
					}
					goto l548
				l567:
					position, tokenIndex = position548, tokenIndex548
					if buffer[position] != rune('d') {
						goto l573
					}
					position++
					if buffer[position] != rune('h') {
						goto l573
					}
					position++
					if !_rules[rulenos]() {
						goto l573
					}
					{
						add(ruleAction71, position)
					}
					goto l548
				l573:
					position, tokenIndex = position548, tokenIndex548
					if buffer[position] != rune('d') {
						goto l575
					}
					position++
					if buffer[position] != rune('h') {
						goto l575
					}
					position++
					{
						add(ruleAction72, position)
					}
					goto l548
				l575:
					position, tokenIndex = position548, tokenIndex548
					if buffer[position] != rune('d') {
						goto l577
					}
					position++
					if buffer[position] != rune('l') {
						goto l577
					}
					position++
					if !_rules[rulenos]() {
						goto l577
					}
					{
						add(ruleAction73, position)
					}
					goto l548
				l577:
					position, tokenIndex = position548, tokenIndex548
					if buffer[position] != rune('d') {
						goto l546
					}
					position++
					if buffer[position] != rune('l') {
						goto l546
					}
					position++
					{
						add(ruleAction74, position)
					}
				}
			l548:
				add(rule_diceMod, position547)
			}
			return true
		l546:
			position, tokenIndex = position546, tokenIndex546
			return false
		},
		/* 38 _diceMod2 <- <(('m' 'i' 'n' nos Action75)? ('m' 'a' 'x' nos Action76)?)> */
		func() bool {
			{
				position581 := position
				{
					position582, tokenIndex582 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l582
					}
					position++
					if buffer[position] != rune('i') {
						goto l582
					}
					position++
					if buffer[position] != rune('n') {
						goto l582
					}
					position++
					if !_rules[rulenos]() {
						goto l582
					}
					{
						add(ruleAction75, position)
					}
					goto l583
				l582:
					position, tokenIndex = position582, tokenIndex582
				}
			l583:
				{
					position585, tokenIndex585 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l585
					}
					position++
					if buffer[position] != rune('a') {
						goto l585
					}
					position++
					if buffer[position] != rune('x') {
						goto l585
					}
					position++
					if !_rules[rulenos]() {
						goto l585
					}
					{
						add(ruleAction76, position)
					}
					goto l586
				l585:
					position, tokenIndex = position585, tokenIndex585
				}
			l586:
				add(rule_diceMod2, position581)
			}
			return true
		},
		/* 39 _dicePearMod <- <(('优' '势' Action77) / ('劣' '势' Action78))> */
		nil,
		/* 40 detailStart <- <Action79> */
		func() bool {
			{
				position590 := position
				{
					add(ruleAction79, position)
				}
				add(ruledetailStart, position590)
			}
			return true
		},
		/* 41 detailEnd <- <Action80> */
		func() bool {
			{
				position593 := position
				{
					add(ruleAction80, position)
				}
				add(ruledetailEnd, position593)
			}
			return true
		},
		/* 42 _diceType1 <- <(nos ('d' / 'D') nos)> */
		nil,
		/* 43 _diceType2 <- <(('d' / 'D') nos)> */
		func() bool {
			position596, tokenIndex596 := position, tokenIndex
			{
				position597 := position
				{
					position598, tokenIndex598 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l599
					}
					position++
					goto l598
				l599:
					position, tokenIndex = position598, tokenIndex598
					if buffer[position] != rune('D') {
						goto l596
					}
					position++
				}
			l598:
				if !_rules[rulenos]() {
					goto l596
				}
				add(rule_diceType2, position597)
			}
			return true
		l596:
			position, tokenIndex = position596, tokenIndex596
			return false
		},
		/* 44 _diceExpr1 <- <(('d' / 'D') Action81 nos _diceMod? _diceMod2?)> */
		func() bool {
			position600, tokenIndex600 := position, tokenIndex
			{
				position601 := position
				{
					position602, tokenIndex602 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l603
					}
					position++
					goto l602
				l603:
					position, tokenIndex = position602, tokenIndex602
					if buffer[position] != rune('D') {
						goto l600
					}
					position++
				}
			l602:
				{
					add(ruleAction81, position)
				}
				if !_rules[rulenos]() {
					goto l600
				}
				{
					position605, tokenIndex605 := position, tokenIndex
					if !_rules[rule_diceMod]() {
						goto l605
					}
					goto l606
				l605:
					position, tokenIndex = position605, tokenIndex605
				}
			l606:
				{
					position607, tokenIndex607 := position, tokenIndex
					if !_rules[rule_diceMod2]() {
						goto l607
					}
					goto l608
				l607:
					position, tokenIndex = position607, tokenIndex607
				}
			l608:
				add(rule_diceExpr1, position601)
			}
			return true
		l600:
			position, tokenIndex = position600, tokenIndex600
			return false
		},
		/* 45 _diceExpr2 <- <(('d' / 'D') Action82 nos (_dicePearMod / _diceMod)? _diceMod2?)> */
		nil,
		/* 46 _diceExprX <- <(&_diceType2 detailStart _diceExpr1 detailEnd Action83)> */
		func() bool {
			position610, tokenIndex610 := position, tokenIndex
			{
				position611 := position
				{
					position612, tokenIndex612 := position, tokenIndex
					if !_rules[rule_diceType2]() {
						goto l610
					}
					position, tokenIndex = position612, tokenIndex612
				}
				if !_rules[ruledetailStart]() {
					goto l610
				}
				if !_rules[rule_diceExpr1]() {
					goto l610
				}
				if !_rules[ruledetailEnd]() {
					goto l610
				}
				{
					add(ruleAction83, position)
				}
				add(rule_diceExprX, position611)
			}
			return true
		l610:
			position, tokenIndex = position610, tokenIndex610
			return false
		},
		/* 47 _wodTypeMain <- <(('a' / 'A') nos ((&('Q' | 'q') (('q' / 'Q') nos)) | (&('K' | 'k') (('k' / 'K') nos)) | (&('M' | 'm') (('m' / 'M') nos)))*)> */
		func() bool {
			position614, tokenIndex614 := position, tokenIndex
			{
				position615 := position
				{
					position616, tokenIndex616 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l617
					}
					position++
					goto l616
				l617:
					position, tokenIndex = position616, tokenIndex616
					if buffer[position] != rune('A') {
						goto l614
					}
					position++
				}
			l616:
				if !_rules[rulenos]() {
					goto l614
				}
			l618:
				{
					position619, tokenIndex619 := position, tokenIndex
					{
						switch buffer[position] {
						case 'Q', 'q':
							{
								position621, tokenIndex621 := position, tokenIndex
								if buffer[position] != rune('q') {
									goto l622
								}
								position++
								goto l621
							l622:
								position, tokenIndex = position621, tokenIndex621
								if buffer[position] != rune('Q') {
									goto l619
								}
								position++
							}
						l621:
							if !_rules[rulenos]() {
								goto l619
							}
						case 'K', 'k':
							{
								position623, tokenIndex623 := position, tokenIndex
								if buffer[position] != rune('k') {
									goto l624
								}
								position++
								goto l623
							l624:
								position, tokenIndex = position623, tokenIndex623
								if buffer[position] != rune('K') {
									goto l619
								}
								position++
							}
						l623:
							if !_rules[rulenos]() {
								goto l619
							}
						default:
							{
								position625, tokenIndex625 := position, tokenIndex
								if buffer[position] != rune('m') {
									goto l626
								}
								position++
								goto l625
							l626:
								position, tokenIndex = position625, tokenIndex625
								if buffer[position] != rune('M') {
									goto l619
								}
								position++
							}
						l625:
							if !_rules[rulenos]() {
								goto l619
							}
						}
					}

					goto l618
				l619:
					position, tokenIndex = position619, tokenIndex619
				}
				add(rule_wodTypeMain, position615)
			}
			return true
		l614:
			position, tokenIndex = position614, tokenIndex614
			return false
		},
		/* 48 _wodDiceType <- <((nos _wodTypeMain) / (_wodTypeMain !identifier_ch))> */
		nil,
		/* 49 _wodMain <- <(('a' / 'A') nos ((&('Q' | 'q') (('q' / 'Q') nos Action86)) | (&('K' | 'k') (('k' / 'K') nos Action85)) | (&('M' | 'm') (('m' / 'M') nos Action84)))*)> */
		func() bool {
			position628, tokenIndex628 := position, tokenIndex
			{
				position629 := position
				{
					position630, tokenIndex630 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l631
					}
					position++
					goto l630
				l631:
					position, tokenIndex = position630, tokenIndex630
					if buffer[position] != rune('A') {
						goto l628
					}
					position++
				}
			l630:
				if !_rules[rulenos]() {
					goto l628
				}
			l632:
				{
					position633, tokenIndex633 := position, tokenIndex
					{
						switch buffer[position] {
						case 'Q', 'q':
							{
								position635, tokenIndex635 := position, tokenIndex
								if buffer[position] != rune('q') {
									goto l636
								}
								position++
								goto l635
							l636:
								position, tokenIndex = position635, tokenIndex635
								if buffer[position] != rune('Q') {
									goto l633
								}
								position++
							}
						l635:
							if !_rules[rulenos]() {
								goto l633
							}
							{
								add(ruleAction86, position)
							}
						case 'K', 'k':
							{
								position638, tokenIndex638 := position, tokenIndex
								if buffer[position] != rune('k') {
									goto l639
								}
								position++
								goto l638
							l639:
								position, tokenIndex = position638, tokenIndex638
								if buffer[position] != rune('K') {
									goto l633
								}
								position++
							}
						l638:
							if !_rules[rulenos]() {
								goto l633
							}
							{
								add(ruleAction85, position)
							}
						default:
							{
								position641, tokenIndex641 := position, tokenIndex
								if buffer[position] != rune('m') {
									goto l642
								}
								position++
								goto l641
							l642:
								position, tokenIndex = position641, tokenIndex641
								if buffer[position] != rune('M') {
									goto l633
								}
								position++
							}
						l641:
							if !_rules[rulenos]() {
								goto l633
							}
							{
								add(ruleAction84, position)
							}
						}
					}

					goto l632
				l633:
					position, tokenIndex = position633, tokenIndex633
				}
				add(rule_wodMain, position629)
			}
			return true
		l628:
			position, tokenIndex = position628, tokenIndex628
			return false
		},
		/* 50 _cocDiceType <- <(((&('B') 'B') | (&('b') 'b') | (&('P') 'P') | (&('p') 'p')) ((nos !identifier_ch) / !identifier_ch))> */
		nil,
		/* 51 _diceCocBonus <- <(('b' / 'B') ((nos !identifier_ch) / (!identifier_ch Action87)) detailEnd Action88)> */
		nil,
		/* 52 _diceCocPenalty <- <(('p' / 'P') ((nos !identifier_ch) / (!identifier_ch Action89)) detailEnd Action90)> */
		nil,
		/* 53 _dcDiceType <- <(nos ('c' / 'C') nos (('m' / 'M') nos)*)> */
		nil,
		/* 54 _fateDiceType <- <(('f' / 'F') !identifier_ch)> */
		nil,
		/* 55 exprDice <- <((&_diceType1 detailStart nos _diceExpr1 detailEnd Action91 _diceExprX*) / (&_diceType2 detailStart _diceExpr2 detailEnd Action92 _diceExprX*) / (&{p.Flags.EnableDiceCoC} &_cocDiceType detailStart (_diceCocBonus / _diceCocPenalty)) / (&{p.Flags.EnableDiceWoD} &_wodDiceType detailStart Action93 ((nos Action94 _wodMain) / (_wodMain !identifier_ch)) detailEnd Action95) / (&{p.Flags.EnableDiceDoubleCross} &_dcDiceType detailStart Action96 nos Action97 ('c' / 'C') nos (('m' / 'M') nos Action98)* detailEnd Action99) / (&{p.Flags.EnableDiceFate} &_fateDiceType detailStart ('f' / 'F') !identifier_ch detailEnd Action100) / value)> */
		nil,
		/* 56 item_get <- <('[' sp exprRoot ']' sp !'=' Action101 func_invoke?)*> */
		func() bool {
			{
				position651 := position
			l652:
				{
					position653, tokenIndex653 := position, tokenIndex
					if buffer[position] != rune('[') {
						goto l653
					}
					position++
					if !_rules[rulesp]() {
						goto l653
					}
					if !_rules[ruleexprRoot]() {
						goto l653
					}
					if buffer[position] != rune(']') {
						goto l653
					}
					position++
					if !_rules[rulesp]() {
						goto l653
					}
					{
						position654, tokenIndex654 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l654
						}
						position++
						goto l653
					l654:
						position, tokenIndex = position654, tokenIndex654
					}
					{
						add(ruleAction101, position)
					}
					{
						position656, tokenIndex656 := position, tokenIndex
						if !_rules[rulefunc_invoke]() {
							goto l656
						}
						goto l657
					l656:
						position, tokenIndex = position656, tokenIndex656
					}
				l657:
					goto l652
				l653:
					position, tokenIndex = position653, tokenIndex653
				}
				add(ruleitem_get, position651)
			}
			return true
		},
		/* 57 array_call <- <(('k' 'h' Action102 ((number Action103) / Action104)) / ('k' 'l' Action105 ((number Action106) / Action107)) / ('[' sp exprRoot ']' sp Action108)+)> */
		func() bool {
			position658, tokenIndex658 := position, tokenIndex
			{
				position659 := position
				{
					position660, tokenIndex660 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l661
					}
					position++
					if buffer[position] != rune('h') {
						goto l661
					}
					position++
					{
						add(ruleAction102, position)
					}
					{
						position663, tokenIndex663 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l664
						}
						{
							add(ruleAction103, position)
						}
						goto l663
					l664:
						position, tokenIndex = position663, tokenIndex663
						{
							add(ruleAction104, position)
						}
					}
				l663:
					goto l660
				l661:
					position, tokenIndex = position660, tokenIndex660
					if buffer[position] != rune('k') {
						goto l667
					}
					position++
					if buffer[position] != rune('l') {
						goto l667
					}
					position++
					{
						add(ruleAction105, position)
					}
					{
						position669, tokenIndex669 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l670
						}
						{
							add(ruleAction106, position)
						}
						goto l669
					l670:
						position, tokenIndex = position669, tokenIndex669
						{
							add(ruleAction107, position)
						}
					}
				l669:
					goto l660
				l667:
					position, tokenIndex = position660, tokenIndex660
					if buffer[position] != rune('[') {
						goto l658
					}
					position++
					if !_rules[rulesp]() {
						goto l658
					}
					if !_rules[ruleexprRoot]() {
						goto l658
					}
					if buffer[position] != rune(']') {
						goto l658
					}
					position++
					if !_rules[rulesp]() {
						goto l658
					}
					{
						add(ruleAction108, position)
					}
				l673:
					{
						position674, tokenIndex674 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l674
						}
						position++
						if !_rules[rulesp]() {
							goto l674
						}
						if !_rules[ruleexprRoot]() {
							goto l674
						}
						if buffer[position] != rune(']') {
							goto l674
						}
						position++
						if !_rules[rulesp]() {
							goto l674
						}
						{
							add(ruleAction108, position)
						}
						goto l673
					l674:
						position, tokenIndex = position674, tokenIndex674
					}
				}
			l660:
				add(rulearray_call, position659)
			}
			return true
		l658:
			position, tokenIndex = position658, tokenIndex658
			return false
		},
		/* 58 attr_get <- <('.' sp identifier sp Action109 func_invoke?)*> */
		func() bool {
			{
				position678 := position
			l679:
				{
					position680, tokenIndex680 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l680
					}
					position++
					if !_rules[rulesp]() {
						goto l680
					}
					if !_rules[ruleidentifier]() {
						goto l680
					}
					if !_rules[rulesp]() {
						goto l680
					}
					{
						add(ruleAction109, position)
					}
					{
						position682, tokenIndex682 := position, tokenIndex
						if !_rules[rulefunc_invoke]() {
							goto l682
						}
						goto l683
					l682:
						position, tokenIndex = position682, tokenIndex682
					}
				l683:
					goto l679
				l680:
					position, tokenIndex = position680, tokenIndex680
				}
				add(ruleattr_get, position678)
			}
			return true
		},
		/* 59 func_invoke <- <(('(' sp ')' sp Action110) / ('(' sp Action111 exprRoot (',' sp exprRoot Action112)* ')' sp Action113))> */
		func() bool {
			position684, tokenIndex684 := position, tokenIndex
			{
				position685 := position
				{
					position686, tokenIndex686 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l687
					}
					position++
					if !_rules[rulesp]() {
						goto l687
					}
					if buffer[position] != rune(')') {
						goto l687
					}
					position++
					if !_rules[rulesp]() {
						goto l687
					}
					{
						add(ruleAction110, position)
					}
					goto l686
				l687:
					position, tokenIndex = position686, tokenIndex686
					if buffer[position] != rune('(') {
						goto l684
					}
					position++
					if !_rules[rulesp]() {
						goto l684
					}
					{
						add(ruleAction111, position)
					}
					if !_rules[ruleexprRoot]() {
						goto l684
					}
				l690:
					{
						position691, tokenIndex691 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l691
						}
						position++
						if !_rules[rulesp]() {
							goto l691
						}
						if !_rules[ruleexprRoot]() {
							goto l691
						}
						{
							add(ruleAction112, position)
						}
						goto l690
					l691:
						position, tokenIndex = position691, tokenIndex691
					}
					if buffer[position] != rune(')') {
						goto l684
					}
					position++
					if !_rules[rulesp]() {
						goto l684
					}
					{
						add(ruleAction113, position)
					}
				}
			l686:
				add(rulefunc_invoke, position685)
			}
			return true
		l684:
			position, tokenIndex = position684, tokenIndex684
			return false
		},
		/* 60 dict_item <- <(Action114 ((value_id_without_colon / exprRoot) sp ':' sp exprRoot) sp)> */
		func() bool {
			position694, tokenIndex694 := position, tokenIndex
			{
				position695 := position
				{
					add(ruleAction114, position)
				}
				{
					position697, tokenIndex697 := position, tokenIndex
					{
						position699 := position
						{
							position700 := position
							if !_rules[ruleno_keywords]() {
								goto l698
							}
							{
								position701 := position
								if !_rules[ruleidentifier_ch0]() {
									goto l698
								}
							l702:
								{
									position703, tokenIndex703 := position, tokenIndex
									{
										position704, tokenIndex704 := position, tokenIndex
										if !_rules[ruleidentifier_ch0]() {
											goto l705
										}
										goto l704
									l705:
										position, tokenIndex = position704, tokenIndex704
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l703
										}
										position++
									}
								l704:
									goto l702
								l703:
									position, tokenIndex = position703, tokenIndex703
								}
								add(rulePegText, position701)
							}
							add(ruleidentifierWithoutColon, position700)
						}
						if !_rules[rulesp]() {
							goto l698
						}
						{
							add(ruleAction115, position)
						}
						{
							position707, tokenIndex707 := position, tokenIndex
							if !_rules[rulefunc_invoke]() {
								goto l707
							}
							goto l708
						l707:
							position, tokenIndex = position707, tokenIndex707
						}
					l708:
						if !_rules[ruleitem_get]() {
							goto l698
						}
						if !_rules[ruleattr_get]() {
							goto l698
						}
						add(rulevalue_id_without_colon, position699)
					}
					goto l697
				l698:
					position, tokenIndex = position697, tokenIndex697
					if !_rules[ruleexprRoot]() {
						goto l694
					}
				}
			l697:
				if !_rules[rulesp]() {
					goto l694
				}
				if buffer[position] != rune(':') {
					goto l694
				}
				position++
				if !_rules[rulesp]() {
					goto l694
				}
				if !_rules[ruleexprRoot]() {
					goto l694
				}
				if !_rules[rulesp]() {
					goto l694
				}
				add(ruledict_item, position695)
			}
			return true
		l694:
			position, tokenIndex = position694, tokenIndex694
			return false
		},
		/* 61 value_id_without_colon <- <(identifierWithoutColon sp Action115 func_invoke? item_get attr_get)> */
		nil,
		/* 62 value <- <(('t' 'r' 'u' 'e' sp Action116) / ('f' 'a' 'l' 's' 'e' sp Action117) / ('u' 'n' 'd' 'e' 'f' 'i' 'n' 'e' 'd' sp Action118) / ('t' 'h' 'i' 's' sp Action119 item_get attr_get) / ('&' identifier sp Action120 attr_get) / (!{_matched := false} &{_matched} ('c' 'a' 'f' 'e' 'b' 'a' 'b' 'e')) / float / number / (&(identifier sp) detailStart identifier detailEnd spNoCR Action121 func_invoke? item_get attr_get) / ('[' sp ']' sp Action122 array_call? attr_get) / ('[' sp exprRoot ('.' '.') sp exprRoot ']' sp Action123 array_call? attr_get) / ('{' sp '}' sp Action127 item_get attr_get) / ((&('f') ('f' 'u' 'n' 'c' sp func_def_params '{' sp Action130 <stmtRoot?> '}' sp Action131)) | (&('{') ('{' sp Action128 dict_item (',' sp dict_item)* ','? '}' sp Action129 item_get attr_get)) | (&('[') ('[' sp Action124 exprRoot (',' sp exprRoot Action125)* ']' sp Action126 array_call? attr_get)) | (&('(') (sub item_get attr_get)) | (&('\x1e' | '"' | '\'' | '`') fstring)))> */
		nil,
		/* 63 number <- <(<[0-9]+> Action132)> */
		func() bool {
			position711, tokenIndex711 := position, tokenIndex
			{
				position712 := position
				{
					position713 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l711
					}
					position++
				l714:
					{
						position715, tokenIndex715 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l715
						}
						position++
						goto l714
					l715:
						position, tokenIndex = position715, tokenIndex715
					}
					add(rulePegText, position713)
				}
				{
					add(ruleAction132, position)
				}
				add(rulenumber, position712)
			}
			return true
		l711:
			position, tokenIndex = position711, tokenIndex711
			return false
		},
		/* 64 float <- <(<([0-9]* '.' [0-9]+)> Action133)> */
		nil,
		/* 65 strPart <- <(<(escape / (!((&('\\') '\\') | (&('`') '`') | (&('{') '{')) .))+> Action134)> */
		nil,
		/* 66 strPart1 <- <(<(escape / (!((&('\\') '\\') | (&('\x1e') '\x1e') | (&('{') '{')) .))+> Action135)> */
		nil,
		/* 67 strPart2 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('"') '"') | (&('{') '{')) .))+> Action136)> */
		nil,
		/* 68 strPart3 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('\'') '\'') | (&('{') '{')) .))+> Action137)> */
		nil,
		/* 69 fstring <- <((('\'' '\'' Action138) / ('\x1e' '\x1e' Action139) / ('"' '"' Action140) / ('`' '`' Action141) / ((&('\'') ('\'' Action152 <strPart3*> '\'' Action153)) | (&('"') ('"' Action150 <strPart2*> '"' Action151)) | (&('\x1e') ('\x1e' Action146 <(('{' sp exprRoot Action147 '}') / ('{' '%' sp exprRoot Action148 ('%' '}')) / strPart1)*> '\x1e' Action149)) | (&('`') ('`' Action142 <(('{' sp exprRoot Action143 '}') / ('{' '%' sp exprRoot Action144 ('%' '}')) / strPart)*> '`' Action145)))) sp)> */
		nil,
		/* 70 keywords <- <((&('f') ('f' 'u' 'n' 'c')) | (&('r') ('r' 'e' 't' 'u' 'r' 'n')) | (&('b') ('b' 'r' 'e' 'a' 'k')) | (&('c') ('c' 'o' 'n' 't' 'i' 'n' 'u' 'e')) | (&('e') ('e' 'l' 's' 'e')) | (&('i') ('i' 'f')) | (&('w') ('w' 'h' 'i' 'l' 'e')))> */
		nil,
		/* 71 identifier_ch0 <- <(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) .)> */
		func() bool {
			position724, tokenIndex724 := position, tokenIndex
			{
				position725 := position
				{
					position726, tokenIndex726 := position, tokenIndex
					{
						switch buffer[position] {
						case '\x1e':
							if buffer[position] != rune('\x1e') {
								goto l726
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l726
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l726
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l726
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l726
							}
							position++
						case '~':
							if buffer[position] != rune('~') {
								goto l726
							}
							position++
						case '}':
							if buffer[position] != rune('}') {
								goto l726
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l726
							}
							position++
						case '{':
							if buffer[position] != rune('{') {
								goto l726
							}
							position++
						case '`':
							if buffer[position] != rune('`') {
								goto l726
							}
							position++
						case '^':
							if buffer[position] != rune('^') {
								goto l726
							}
							position++
						case ']':
							if buffer[position] != rune(']') {
								goto l726
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l726
							}
							position++
						case '[':
							if buffer[position] != rune('[') {
								goto l726
							}
							position++
						case '@':
							if buffer[position] != rune('@') {
								goto l726
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l726
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l726
							}
							position++
						case '=':
							if buffer[position] != rune('=') {
								goto l726
							}
							position++
						case '<':
							if buffer[position] != rune('<') {
								goto l726
							}
							position++
						case ';':
							if buffer[position] != rune(';') {
								goto l726
							}
							position++
						case ':':
							if buffer[position] != rune(':') {
								goto l726
							}
							position++
						case '/':
							if buffer[position] != rune('/') {
								goto l726
							}
							position++
						case '+':
							if buffer[position] != rune('+') {
								goto l726
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l726
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l726
							}
							position++
						case '(':
							if buffer[position] != rune('(') {
								goto l726
							}
							position++
						case '\'':
							if buffer[position] != rune('\'') {
								goto l726
							}
							position++
						case '&':
							if buffer[position] != rune('&') {
								goto l726
							}
							position++
						case '%':
							if buffer[position] != rune('%') {
								goto l726
							}
							position++
						case '#':
							if buffer[position] != rune('#') {
								goto l726
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l726
							}
							position++
						case '!':
							if buffer[position] != rune('!') {
								goto l726
							}
							position++
						case ',', '-', '.':
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l726
							}
							position++
						default:
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l726
							}
							position++
						}
					}

					goto l724
				l726:
					position, tokenIndex = position726, tokenIndex726
				}
				if !matchDot() {
					goto l724
				}
				add(ruleidentifier_ch0, position725)
			}
			return true
		l724:
			position, tokenIndex = position724, tokenIndex724
			return false
		},
		/* 72 identifier_ch <- <(identifier_ch0 / ([0-9] / ':'))> */
		func() bool {
			position728, tokenIndex728 := position, tokenIndex
			{
				position729 := position
				{
					position730, tokenIndex730 := position, tokenIndex
					if !_rules[ruleidentifier_ch0]() {
						goto l731
					}
					goto l730
				l731:
					position, tokenIndex = position730, tokenIndex730
					{
						position732, tokenIndex732 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l733
						}
						position++
						goto l732
					l733:
						position, tokenIndex = position732, tokenIndex732
						if buffer[position] != rune(':') {
							goto l728
						}
						position++
					}
				l732:
				}
			l730:
				add(ruleidentifier_ch, position729)
			}
			return true
		l728:
			position, tokenIndex = position728, tokenIndex728
			return false
		},
		/* 73 no_keywords <- <!(keywords (sp1 / (!(identifier_ch0 / [0-9]) .)))> */
		func() bool {
			position734, tokenIndex734 := position, tokenIndex
			{
				position735 := position
				{
					position736, tokenIndex736 := position, tokenIndex
					{
						position737 := position
						{
							switch buffer[position] {
							case 'f':
								if buffer[position] != rune('f') {
									goto l736
								}
								position++
								if buffer[position] != rune('u') {
									goto l736
								}
								position++
								if buffer[position] != rune('n') {
									goto l736
								}
								position++
								if buffer[position] != rune('c') {
									goto l736
								}
								position++
							case 'r':
								if buffer[position] != rune('r') {
									goto l736
								}
								position++
								if buffer[position] != rune('e') {
									goto l736
								}
								position++
								if buffer[position] != rune('t') {
									goto l736
								}
								position++
								if buffer[position] != rune('u') {
									goto l736
								}
								position++
								if buffer[position] != rune('r') {
									goto l736
								}
								position++
								if buffer[position] != rune('n') {
									goto l736
								}
								position++
							case 'b':
								if buffer[position] != rune('b') {
									goto l736
								}
								position++
								if buffer[position] != rune('r') {
									goto l736
								}
								position++
								if buffer[position] != rune('e') {
									goto l736
								}
								position++
								if buffer[position] != rune('a') {
									goto l736
								}
								position++
								if buffer[position] != rune('k') {
									goto l736
								}
								position++
							case 'c':
								if buffer[position] != rune('c') {
									goto l736
								}
								position++
								if buffer[position] != rune('o') {
									goto l736
								}
								position++
								if buffer[position] != rune('n') {
									goto l736
								}
								position++
								if buffer[position] != rune('t') {
									goto l736
								}
								position++
								if buffer[position] != rune('i') {
									goto l736
								}
								position++
								if buffer[position] != rune('n') {
									goto l736
								}
								position++
								if buffer[position] != rune('u') {
									goto l736
								}
								position++
								if buffer[position] != rune('e') {
									goto l736
								}
								position++
							case 'e':
								if buffer[position] != rune('e') {
									goto l736
								}
								position++
								if buffer[position] != rune('l') {
									goto l736
								}
								position++
								if buffer[position] != rune('s') {
									goto l736
								}
								position++
								if buffer[position] != rune('e') {
									goto l736
								}
								position++
							case 'i':
								if buffer[position] != rune('i') {
									goto l736
								}
								position++
								if buffer[position] != rune('f') {
									goto l736
								}
								position++
							default:
								if buffer[position] != rune('w') {
									goto l736
								}
								position++
								if buffer[position] != rune('h') {
									goto l736
								}
								position++
								if buffer[position] != rune('i') {
									goto l736
								}
								position++
								if buffer[position] != rune('l') {
									goto l736
								}
								position++
								if buffer[position] != rune('e') {
									goto l736
								}
								position++
							}
						}

						add(rulekeywords, position737)
					}
					{
						position739, tokenIndex739 := position, tokenIndex
						if !_rules[rulesp1]() {
							goto l740
						}
						goto l739
					l740:
						position, tokenIndex = position739, tokenIndex739
						{
							position741, tokenIndex741 := position, tokenIndex
							{
								position742, tokenIndex742 := position, tokenIndex
								if !_rules[ruleidentifier_ch0]() {
									goto l743
								}
								goto l742
							l743:
								position, tokenIndex = position742, tokenIndex742
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l741
								}
								position++
							}
						l742:
							goto l736
						l741:
							position, tokenIndex = position741, tokenIndex741
						}
						if !matchDot() {
							goto l736
						}
					}
				l739:
					goto l734
				l736:
					position, tokenIndex = position736, tokenIndex736
				}
				add(ruleno_keywords, position735)
			}
			return true
		l734:
			position, tokenIndex = position734, tokenIndex734
			return false
		},
		/* 74 identifier <- <(no_keywords <(identifier_ch0 identifier_ch*)>)> */
		func() bool {
			position744, tokenIndex744 := position, tokenIndex
			{
				position745 := position
				if !_rules[ruleno_keywords]() {
					goto l744
				}
				{
					position746 := position
					if !_rules[ruleidentifier_ch0]() {
						goto l744
					}
				l747:
					{
						position748, tokenIndex748 := position, tokenIndex
						if !_rules[ruleidentifier_ch]() {
							goto l748
						}
						goto l747
					l748:
						position, tokenIndex = position748, tokenIndex748
					}
					add(rulePegText, position746)
				}
				add(ruleidentifier, position745)
			}
			return true
		l744:
			position, tokenIndex = position744, tokenIndex744
			return false
		},
		/* 75 identifierWithoutColon <- <(no_keywords <(identifier_ch0 (identifier_ch0 / [0-9])*)>)> */
		nil,
		/* 76 sub <- <(parenOpen exprRoot parenClose)> */
		func() bool {
			position750, tokenIndex750 := position, tokenIndex
			{
				position751 := position
				{
					position752 := position
					if buffer[position] != rune('(') {
						goto l750
					}
					position++
					if !_rules[rulesp]() {
						goto l750
					}
					add(ruleparenOpen, position752)
				}
				if !_rules[ruleexprRoot]() {
					goto l750
				}
				{
					position753 := position
					if buffer[position] != rune(')') {
						goto l750
					}
					position++
					if !_rules[rulesp]() {
						goto l750
					}
					add(ruleparenClose, position753)
				}
				add(rulesub, position751)
			}
			return true
		l750:
			position, tokenIndex = position750, tokenIndex750
			return false
		},
		/* 77 parenOpen <- <('(' sp)> */
		nil,
		/* 78 parenClose <- <(')' sp)> */
		nil,
		/* 79 add <- <(('+' / '＋') sp)> */
		func() bool {
			position756, tokenIndex756 := position, tokenIndex
			{
				position757 := position
				{
					position758, tokenIndex758 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l759
					}
					position++
					goto l758
				l759:
					position, tokenIndex = position758, tokenIndex758
					if buffer[position] != rune('＋') {
						goto l756
					}
					position++
				}
			l758:
				if !_rules[rulesp]() {
					goto l756
				}
				add(ruleadd, position757)
			}
			return true
		l756:
			position, tokenIndex = position756, tokenIndex756
			return false
		},
		/* 80 minus <- <(('-' / '－') sp)> */
		func() bool {
			position760, tokenIndex760 := position, tokenIndex
			{
				position761 := position
				{
					position762, tokenIndex762 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l763
					}
					position++
					goto l762
				l763:
					position, tokenIndex = position762, tokenIndex762
					if buffer[position] != rune('－') {
						goto l760
					}
					position++
				}
			l762:
				if !_rules[rulesp]() {
					goto l760
				}
				add(ruleminus, position761)
			}
			return true
		l760:
			position, tokenIndex = position760, tokenIndex760
			return false
		},
		/* 81 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 82 divide <- <(('/' / '／') sp)> */
		nil,
		/* 83 modulus <- <('%' sp)> */
		nil,
		/* 84 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 85 bitwiseOr <- <('|' sp)> */
		nil,
		/* 86 bitwiseAnd <- <('&' sp)> */
		nil,
		/* 87 logicOr <- <('|' '|' sp)> */
		nil,
		/* 88 logicAnd <- <('&' '&' sp)> */
		nil,
		/* 89 lt <- <('<' sp)> */
		nil,
		/* 90 gt <- <('>' sp)> */
		nil,
		/* 91 le <- <('<' '=' sp)> */
		nil,
		/* 92 ge <- <('>' '=' sp)> */
		nil,
		/* 93 eq <- <('=' '=' sp)> */
		nil,
		/* 94 ne <- <('!' '=' sp)> */
		nil,
		/* 95 sp <- <((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position779 := position
			l780:
				{
					position781, tokenIndex781 := position, tokenIndex
					{
						switch buffer[position] {
						case '\r':
							if buffer[position] != rune('\r') {
								goto l781
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l781
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l781
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l781
							}
							position++
						}
					}

					goto l780
				l781:
					position, tokenIndex = position781, tokenIndex781
				}
				add(rulesp, position779)
			}
			return true
		},
		/* 96 spNoCR <- <((&('\r') '\r') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position784 := position
			l785:
				{
					position786, tokenIndex786 := position, tokenIndex
					{
						switch buffer[position] {
						case '\r':
							if buffer[position] != rune('\r') {
								goto l786
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l786
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l786
							}
							position++
						}
					}

					goto l785
				l786:
					position, tokenIndex = position786, tokenIndex786
				}
				add(rulespNoCR, position784)
			}
			return true
		},
		/* 97 sp1 <- <((((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ')) sp) / !.)> */
		func() bool {
			position788, tokenIndex788 := position, tokenIndex
			{
				position789 := position
				{
					position790, tokenIndex790 := position, tokenIndex
					{
						switch buffer[position] {
						case '\r':
							if buffer[position] != rune('\r') {
								goto l791
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l791
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l791
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l791
							}
							position++
						}
					}

					if !_rules[rulesp]() {
						goto l791
					}
					goto l790
				l791:
					position, tokenIndex = position790, tokenIndex790
					{
						position793, tokenIndex793 := position, tokenIndex
						if !matchDot() {
							goto l793
						}
						goto l788
					l793:
						position, tokenIndex = position793, tokenIndex793
					}
				}
			l790:
				add(rulesp1, position789)
			}
			return true
		l788:
			position, tokenIndex = position788, tokenIndex788
			return false
		},
		/* 98 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		func() bool {
			position794, tokenIndex794 := position, tokenIndex
			{
				position795 := position
				if buffer[position] != rune('\\') {
					goto l794
				}
				position++
				{
					switch buffer[position] {
					case '\\':
						if buffer[position] != rune('\\') {
							goto l794
						}
						position++
					case '\'':
						if buffer[position] != rune('\'') {
							goto l794
						}
						position++
					case '"':
						if buffer[position] != rune('"') {
							goto l794
						}
						position++
					case 'r':
						if buffer[position] != rune('r') {
							goto l794
						}
						position++
					case 'f':
						if buffer[position] != rune('f') {
							goto l794
						}
						position++
					case 'n':
						if buffer[position] != rune('n') {
							goto l794
						}
						position++
					case 't':
						if buffer[position] != rune('t') {
							goto l794
						}
						position++
					default:
						if buffer[position] != rune('b') {
							goto l794
						}
						position++
					}
				}

				add(ruleescape, position795)
			}
			return true
		l794:
			position, tokenIndex = position794, tokenIndex794
			return false
		},
		/* 99 comment <- <(spNoCR ('/' '/') (!'\n' .)* ('\n' / !.))> */
		nil,
		/* 101 Action0 <- <{ p.AddOp(TypeHalt) }> */
		nil,
		/* 102 Action1 <- <{ p.BreakPush() }> */
		nil,
		/* 103 Action2 <- <{ p.ContinuePush() }> */
		nil,
		/* 104 Action3 <- <{ p.AddOp(TypeReturn); }> */
		nil,
		/* 105 Action4 <- <{ p.PushUndefined(); p.AddOp(TypeReturn); }> */
		nil,
		/* 106 Action5 <- <{ p.LoopBegin(); p.OffsetPush() }> */
		nil,
		/* 107 Action6 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 108 Action7 <- <{ p.AddOp(TypeJmp); p.OffsetPush(); p.OffsetJmpSetX(0, 2, true); p.OffsetJmpSetX(1, 1, false); p.ContinueSet(2); p.BreakSet(); p.OffsetPopN(3);p.LoopEnd(); }> */
		nil,
		/* 109 Action8 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 110 Action9 <- <{ p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush(); }> */
		nil,
		/* 111 Action10 <- <{ p.OffsetPopAndSet() }> */
		nil,
		/* 112 Action11 <- <{ p.CounterPush() }> */
		nil,
		/* 113 Action12 <- <{ p.CounterPush(); p.CounterAdd(1) }> */
		nil,
		/* 114 Action13 <- <{ p.NamePush(text) }> */
		nil,
		/* 115 Action14 <- <{ p.NamePush(text) }> */
		nil,
		/* 116 Action15 <- <{p.CounterAdd(1)}> */
		nil,
		/* 117 Action16 <- <{ p.NamePush(text) }> */
		nil,
		/* 118 Action17 <- <{ p.CodePush() }> */
		nil,
		nil,
		/* 120 Action18 <- <{  num := p.CounterPop(); arr := []string{}; for i:=int64(0); i<num; i++ { arr = append(arr, p.NamePop()) }; p.AddStoreFunction(p.NamePop(), arr, string(text)) }> */
		nil,
		/* 121 Action19 <- <{ p.NamePush(text) }> */
		nil,
		/* 122 Action20 <- <{ p.AddStore(p.NamePop()) }> */
		nil,
		/* 123 Action21 <- <{ p.NamePush(text) }> */
		nil,
		/* 124 Action22 <- <{ p.CodePush() }> */
		nil,
		/* 125 Action23 <- <{ p.AddStoreComputed(p.NamePop(), string(text)) }> */
		nil,
		/* 126 Action24 <- <{ p.NamePush(text) }> */
		nil,
		/* 127 Action25 <- <{ p.NamePush(text) }> */
		nil,
		/* 128 Action26 <- <{ attr, objName := p.NamePop(), p.NamePop(); p.AddAttrSet(objName, attr, true) }> */
		nil,
		/* 129 Action27 <- <{ p.NamePush(text) }> */
		nil,
		/* 130 Action28 <- <{ p.AddStoreLocal(p.NamePop()) }> */
		nil,
		/* 131 Action29 <- <{ p.NamePush(text) }> */
		nil,
		/* 132 Action30 <- <{ p.NamePush(text) }> */
		nil,
		/* 133 Action31 <- <{ attr, objName := p.NamePop(), p.NamePop(); p.AddAttrSet(objName, attr, false) }> */
		nil,
		/* 134 Action32 <- <{ p.AddOp(TypeItemSet) }> */
		nil,
		/* 135 Action33 <- <{ p.AddOp(TypeSliceSet) }> */
		nil,
		/* 136 Action34 <- <{ p.PushUndefined() }> */
		nil,
		/* 137 Action35 <- <{ p.PushUndefined() }> */
		nil,
		/* 138 Action36 <- <{ p.PushUndefined() }> */
		nil,
		/* 139 Action37 <- <{ p.PushUndefined() }> */
		nil,
		/* 140 Action38 <- <{ p.AddOp(TypeSliceGet) }> */
		nil,
		/* 141 Action39 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 142 Action40 <- <{ p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush(); }> */
		nil,
		/* 143 Action41 <- <{ p.AddOp(TypeJne); p.OffsetPush() }> */
		nil,
		/* 144 Action42 <- <{ p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush() }> */
		nil,
		/* 145 Action43 <- <{ p.OffsetPopAndSet() }> */
		nil,
		/* 146 Action44 <- <{ p.CounterPush() }> */
		nil,
		/* 147 Action45 <- <{p.CounterAdd(1)}> */
		nil,
		/* 148 Action46 <- <{ p.PushStr(""); limit:=p.CounterPop()+1; for i:=int64(0); i<limit; i++ { p.OffsetPopAndSet() } }> */
		nil,
		/* 149 Action47 <- <{p.AddOp(TypeJeDup); p.OffsetPush()}> */
		nil,
		/* 150 Action48 <- <{ p.AddOp(TypeJeDup); p.OffsetPush()}> */
		nil,
		/* 151 Action49 <- <{ p.AddOp(TypePushLast); p.OffsetPopAndSet(); p.OffsetPopAndSet();  }> */
		nil,
		/* 152 Action50 <- <{ p.AddOp(TypeLogicAnd) }> */
		nil,
		/* 153 Action51 <- <{ p.AddOp(TypeBitwiseOr) }> */
		nil,
		/* 154 Action52 <- <{ p.AddOp(TypeBitwiseAnd) }> */
		nil,
		/* 155 Action53 <- <{ p.AddOp(TypeCompLT) }> */
		nil,
		/* 156 Action54 <- <{ p.AddOp(TypeCompLE) }> */
		nil,
		/* 157 Action55 <- <{ p.AddOp(TypeCompEQ) }> */
		nil,
		/* 158 Action56 <- <{ p.AddOp(TypeCompNE) }> */
		nil,
		/* 159 Action57 <- <{ p.AddOp(TypeCompGE) }> */
		nil,
		/* 160 Action58 <- <{ p.AddOp(TypeCompGT) }> */
		nil,
		/* 161 Action59 <- <{ p.AddOp(TypeAdd) }> */
		nil,
		/* 162 Action60 <- <{ p.AddOp(TypeSubtract) }> */
		nil,
		/* 163 Action61 <- <{ p.AddOp(TypeMultiply) }> */
		nil,
		/* 164 Action62 <- <{ p.AddOp(TypeDivide) }> */
		nil,
		/* 165 Action63 <- <{ p.AddOp(TypeModulus) }> */
		nil,
		/* 166 Action64 <- <{ p.AddOp(TypeExponentiation) }> */
		nil,
		/* 167 Action65 <- <{ p.AddOp(TypeNegation) }> */
		nil,
		/* 168 Action66 <- <{ p.AddOp(TypePositive) }> */
		nil,
		/* 169 Action67 <- <{ p.AddOp(TypeDiceSetKeepLowNum) }> */
		nil,
		/* 170 Action68 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepLowNum) }> */
		nil,
		/* 171 Action69 <- <{ p.AddOp(TypeDiceSetKeepHighNum) }> */
		nil,
		/* 172 Action70 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepHighNum) }> */
		nil,
		/* 173 Action71 <- <{ p.AddOp(TypeDiceSetDropHighNum) }> */
		nil,
		/* 174 Action72 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetDropHighNum) }> */
		nil,
		/* 175 Action73 <- <{ p.AddOp(TypeDiceSetDropLowNum) }> */
		nil,
		/* 176 Action74 <- <{ p.PushIntNumber("1"); p.AddOp(TypeDiceSetDropLowNum) }> */
		nil,
		/* 177 Action75 <- <{ p.AddOp(TypeDiceSetMin) }> */
		nil,
		/* 178 Action76 <- <{ p.AddOp(TypeDiceSetMax) }> */
		nil,
		/* 179 Action77 <- <{ p.PushIntNumber("2"); p.AddOp(TypeDiceSetTimes); p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepHighNum) }> */
		nil,
		/* 180 Action78 <- <{ p.PushIntNumber("2"); p.AddOp(TypeDiceSetTimes); p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepLowNum) }> */
		nil,
		/* 181 Action79 <- <{ p.CounterPush(); p.CounterAdd(int64(token.begin)) }> */
		nil,
		/* 182 Action80 <- <{ p.AddDiceDetail(p.CounterPop(), int64(token.end)) }> */
		nil,
		/* 183 Action81 <- <{ p.AddOp(TypeDiceInit); p.AddOp(TypeDiceSetTimes); }> */
		nil,
		/* 184 Action82 <- <{ p.AddOp(TypeDiceInit); }> */
		nil,
		/* 185 Action83 <- <{ p.AddOp(TypeDice) }> */
		nil,
		/* 186 Action84 <- <{ p.AddOp(TypeWodSetPoints) }> */
		nil,
		/* 187 Action85 <- <{ p.AddOp(TypeWodSetThreshold) }> */
		nil,
		/* 188 Action86 <- <{ p.AddOp(TypeWodSetThresholdQ) }> */
		nil,
		/* 189 Action87 <- <{p.PushIntNumber("1")}> */
		nil,
		/* 190 Action88 <- <{ p.AddOp(TypeDiceCocBonus) }> */
		nil,
		/* 191 Action89 <- <{p.PushIntNumber("1")}> */
		nil,
		/* 192 Action90 <- <{ p.AddOp(TypeDiceCocPenalty) }> */
		nil,
		/* 193 Action91 <- <{ p.AddOp(TypeDice) }> */
		nil,
		/* 194 Action92 <- <{ p.AddOp(TypeDice) }> */
		nil,
		/* 195 Action93 <- <{ p.AddOp(TypeWodSetInit) }> */
		nil,
		/* 196 Action94 <- <{ p.AddOp(TypeWodSetPool) }> */
		nil,
		/* 197 Action95 <- <{ p.AddOp(TypeDiceWod) }> */
		nil,
		/* 198 Action96 <- <{ p.AddOp(TypeDCSetInit) }> */
		nil,
		/* 199 Action97 <- <{ p.AddOp(TypeDCSetPool) }> */
		nil,
		/* 200 Action98 <- <{ p.AddOp(TypeDCSetPoints) }> */
		nil,
		/* 201 Action99 <- <{ p.AddOp(TypeDiceDC) }> */
		nil,
		/* 202 Action100 <- <{ p.AddOp(TypeDiceFate) }> */
		nil,
		/* 203 Action101 <- <{ p.AddOp(TypeItemGet) }> */
		nil,
		/* 204 Action102 <- <{ p.WriteCode(TypeGetAttr, string("kh")) }> */
		nil,
		/* 205 Action103 <- <{ p.AddInvoke(1) }> */
		nil,
		/* 206 Action104 <- <{p.AddInvoke(0)}> */
		nil,
		/* 207 Action105 <- <{ p.WriteCode(TypeGetAttr, string("kl")) }> */
		nil,
		/* 208 Action106 <- <{ p.AddInvoke(1) }> */
		nil,
		/* 209 Action107 <- <{p.AddInvoke(0)}> */
		nil,
		/* 210 Action108 <- <{ p.AddOp(TypeItemGet) }> */
		nil,
		/* 211 Action109 <- <{ p.WriteCode(TypeGetAttr, string(text)) }> */
		nil,
		/* 212 Action110 <- <{ p.AddInvoke(0) }> */
		nil,
		/* 213 Action111 <- <{ p.CounterPush(); p.CounterAdd(1) }> */
		nil,
		/* 214 Action112 <- <{p.CounterAdd(1)}> */
		nil,
		/* 215 Action113 <- <{ p.AddInvoke(p.CounterPop()) }> */
		nil,
		/* 216 Action114 <- <{ p.CounterAdd(1) }> */
		nil,
		/* 217 Action115 <- <{ p.WriteCode(TypeLoadName, string(text)) }> */
		nil,
		/* 218 Action116 <- <{ p.PushIntNumber("1") }> */
		nil,
		/* 219 Action117 <- <{ p.PushIntNumber("0") }> */
		nil,
		/* 220 Action118 <- <{ p.PushUndefined() }> */
		nil,
		/* 221 Action119 <- <{ p.PushThis() }> */
		nil,
		/* 222 Action120 <- <{ p.WriteCode(TypeLoadNameRaw, string(text)) }> */
		nil,
		/* 223 Action121 <- <{ p.WriteCode(TypeLoadNameWithDetail, string(text)) }> */
		nil,
		/* 224 Action122 <- <{ p.PushArray(0) }> */
		nil,
		/* 225 Action123 <- <{ p.AddOp(TypePushRange) }> */
		nil,
		/* 226 Action124 <- <{ p.CounterPush(); p.CounterAdd(1) }> */
		nil,
		/* 227 Action125 <- <{p.CounterAdd(1)}> */
		nil,
		/* 228 Action126 <- <{ p.PushArray(p.CounterPop()) }> */
		nil,
		/* 229 Action127 <- <{ p.PushDict(0) }> */
		nil,
		/* 230 Action128 <- <{ p.CounterPush() }> */
		nil,
		/* 231 Action129 <- <{ p.PushDict(p.CounterPop()) }> */
		nil,
		/* 232 Action130 <- <{ p.CodePush() }> */
		nil,
		/* 233 Action131 <- <{  num := p.CounterPop(); arr := []string{}; for i:=int64(0); i<num; i++ { arr = append(arr, p.NamePop()) }; p.AddStoreFunction("", arr, string(text)) }> */
		nil,
		/* 234 Action132 <- <{ p.PushIntNumber(string(text)) }> */
		nil,
		/* 235 Action133 <- <{ p.PushFloatNumber(string(text)) }> */
		nil,
		/* 236 Action134 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 237 Action135 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 238 Action136 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 239 Action137 <- <{ p.PushStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 240 Action138 <- <{ p.PushStr("") }> */
		nil,
		/* 241 Action139 <- <{ p.PushStr("") }> */
		nil,
		/* 242 Action140 <- <{ p.PushStr("") }> */
		nil,
		/* 243 Action141 <- <{ p.PushStr("") }> */
		nil,
		/* 244 Action142 <- <{ p.CounterPush() }> */
		nil,
		/* 245 Action143 <- <{p.CounterAdd(1)}> */
		nil,
		/* 246 Action144 <- <{p.CounterAdd(1)}> */
		nil,
		/* 247 Action145 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 248 Action146 <- <{ p.CounterPush() }> */
		nil,
		/* 249 Action147 <- <{p.CounterAdd(1)}> */
		nil,
		/* 250 Action148 <- <{p.CounterAdd(1)}> */
		nil,
		/* 251 Action149 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 252 Action150 <- <{ p.CounterPush() }> */
		nil,
		/* 253 Action151 <- <{ p.CounterPop() }> */
		nil,
		/* 254 Action152 <- <{ p.CounterPush() }> */
		nil,
		/* 255 Action153 <- <{ p.CounterPop() }> */
		nil,
	}
	p.rules = _rules
	return nil
}
